##!/usr/bin/env python

__author__ = "Prasad K"
__email__  = "pkondisetty@infoblox.com"
__RFE__ = 'DNS Scavenging Ability to WhiteList IP\Subnet to Not Trigger "Last Queried" (RFE-7933)'
########################################################################################
#  Grid Set up required:                                                               #
#  1. Grid Master with member                                                                      #
#  2. Licenses : DNS, DHCP, Grid, NIOS (IB-V1415)                                      #
########################################################################################


import re
import sys
import config
import pytest
import unittest
import os
import os.path
from os.path import join
import json
import pexpect
import requests
import urllib3
import commands
from time import sleep
import ib_utils.ib_NIOS as ib_NIOS
import ib_utils.common_utilities as common_util
import paramiko
import time
from datetime import datetime, timedelta
ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
global log_validation


pass_count = [0]
fail_count = [0]
pass_count1 = [0]
fail_count1 = [0]

def epoch(date):
        date = time.strftime("%a,%b %d %H:%M:%S %Z %Y", time.localtime(date))
        return date


def convert(response):
        global pass_count
        global fail_count
        try:
                res=json.loads(response)
                res = eval(json.dumps(res))
                res= str(res)
                output=res.replace(':','').replace(' ','').replace("'",'')
                result = re.findall(r'last_queried[0-9]{10}',output)
                result = (str(result))
                result = result.replace('last_queried','').replace('[','').replace(']','').replace('"','').replace("'",'')
                print ('record last queried epoch time ',result)
                time = epoch(int(result))
                print('epoch time to date ',time)
                time = time.replace(',','').replace(' ','')
                time = time[ 0 : 8]
                print(time)
                if date == time:
                        pass_count = [x+1 for x in pass_count]
                else:
                        assert False
                return time
        except:
                fail_count = [x+1 for x in fail_count]


def convert1(response):
        global pass_count1
        global fail_count1
        if 'last_queried' in response:
                fail_count1 = [x+1 for x in fail_count1]
        else:
                print("conver1 used else condition")
                pass_count1 = [x+1 for x in pass_count1]


class Network(unittest.TestCase):
		
        @pytest.mark.run(order=1)
        def test_001_Default_last_queried_time_monitoring_should_be_disabled_for_RR_and_zones(self):
                print("\n============================================\n")
                print("Default last queried time monitoring should be disabled for RR and zones")
                print("\n============================================\n")
                output = ib_NIOS.wapi_request('GET',object_type="grid:dns",params="?_inheritance=True&_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(output)
                data = ['"enable_rr_last_queried": false','"enable_zone_last_queried": false']
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
                print("\n")
                print("Test Case 01 Execution Completed")


        @pytest.mark.run(order=2)
        def test_002_Add_Authoritative_zone(self):
                print("\n============================================\n")
                print("Create Authoritative Zone")
                print("\n============================================\n")
                grid_member=config.grid_fqdn
                data = {"fqdn": "test.com","grid_primary": [{"name":config.grid_fqdn,"stealth":False}]}
                response = ib_NIOS.wapi_request('POST', object_type="zone_auth", fields=json.dumps(data))
                print(response)
                sleep(20)
                print("Test Case 02 Execution Completed")

        @pytest.mark.run(order=3)
        def test_003_Validate_addition_of_Authoritative_zone(self):
                print("\n============================================\n")
                print("Validating addition of authoritative zone")
                print("\n============================================\n")
                get_temp = ib_NIOS.wapi_request('GET', object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                print(get_temp)
                data = '"fqdn": "test.com"'
                if data in get_temp:
                    assert True
                else:           
                    assert False
                print(data)
                print("\n")
                print("Test Case 03 Execution Completed")

        @pytest.mark.run(order=4)
        def test_004_Default_last_queried_should_not_be_updated_for_zone(self):
                print("\n============================================\n")
                print("Default last queried time monitoring should be disabled for RR and zones")
                print("\n============================================\n")
                get_ref =ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                ref = json.loads(get_ref)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 04 Execution Completed")
    
        @pytest.mark.run(order=5)
        def test_005_Add_A_record(self):
                print("\n============================================\n")
                print("Adding A record")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.1","name": "a.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                sleep(10)
                print("Test Case 05 Executuion Completed")
             
        @pytest.mark.run(order=6)
        def test_006_Validate_addition_of_A_record(self):
                print("\n============================================\n")
                print("validating created A record")
                print("\n============================================\n")
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=a.test.com",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "a.test.com"','"ipv4addr": "10.0.0.1"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("Test Case 06 Executuion Completed")            


        @pytest.mark.run(order=7)
        def test_007_validate_default_last_queried_timestamp_should_not_be_updated_for_records(self):
                print("\n============================================\n")
                print("validating default last queried timestamp for zones")
                print("\n============================================\n")
                get_ref =ib_NIOS.wapi_request('GET',object_type="record:a?name=a.test.com",grid_vip=config.grid_vip)
                ref = json.loads(get_ref)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 07 Execution Completed")


#############################################################################
### NONE (Enabling Last Queried for both RR and Zone ) option at Grid DNS ###
#############################################################################



        @pytest.mark.run(order=8)
        def test_008_Enable_last_queried_time_monitoring_for_RR_and_zones_at_grid_level(self):
                print("\n============================================\n")
                print("Enabling and validating last queried time monitoring for RR and zones at grid level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET', object_type="grid:dns")
                ref1 = json.loads(get_ref)[0]['_ref']
                print ref1
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT',ref= ref1,fields=json.dumps(data))
                print(response)
                sleep(20)
                print("Test Case 8 Execution Completed")
                
        @pytest.mark.run(order=9)
        def test_009_Validate_enabled_last_queried_time_monitoring_for_RR_and_zones_at_grid_level(self):
                print("\n============================================\n")
                print("Validating enabled last queried time monitoring for RR and zones at grid level")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = ['"enable_rr_last_queried": true','"enable_zone_last_queried": true']
                for i in data:
                    if i in response:
                        assert True
                    else:
                        assert False
                print(data)
                print("Test Case 9 Execution Completed")

        @pytest.mark.run(order=10)
        def test_010_Start_DNS_Service(self):
                print("\n============================================\n")
                print("Starting DNS Service")
                print("\n============================================\n")
                for i in range(0,2):
	                get_ref = ib_NIOS.wapi_request('GET', object_type="member:dns")
                    	print(get_ref)
        	        ref = json.loads(get_ref)[i]['_ref']
                	print(ref)
	                data = {"enable_dns": True}
        	        response = ib_NIOS.wapi_request('PUT', ref=ref, fields=json.dumps(data))
                	print(response)
                sleep(20)
                for i in range(0,2):
                        get_ref = ib_NIOS.wapi_request('GET', object_type="member:dns")
                        print(get_ref)
                        ref = json.loads(get_ref)[i]['_ref']
                        print(ref)
                        data = {"use_lan_ipv6_port": True}
                        response = ib_NIOS.wapi_request('PUT', ref=ref, fields=json.dumps(data))
                        print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(get_ref)
                print("Test Case 10 Execution Completed")

        @pytest.mark.run(order=11)
        def test_011_Validate_DNS_service_Enabled(self):
                print("\n============================================\n")
                print("Validating enabled DNS Service")
                print("\n============================================\n")
		for i in range(0,2):
	                grid =  ib_NIOS.wapi_request('GET', object_type="member:dns", grid_vip=config.grid_vip)
        	        print(grid)
                	ref = json.loads(grid)[i]['_ref']
	                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=enable_dns",grid_vip=config.grid_vip)
        	        print(response)
		 	data = '"enable_dns": true'
			if data in response:
				assert True
				print(data)
			else:			
				assert False	
		sleep(10)
		for i in range(0,2):
                        grid1 =  ib_NIOS.wapi_request('GET', object_type="member:dns", grid_vip=config.grid_vip)
                        print(grid1)
                        ref1 = json.loads(grid1)[i]['_ref']
                        response1 = ib_NIOS.wapi_request('GET',ref=ref1,params="?_inheritance=True&_return_fields=use_lan_ipv6_port",grid_vip=config.grid_vip)
                        print(response1)
                        data1 = '"use_lan_ipv6_port": true'
                        if data1 in response1:
                                assert True
				print(data1)
                        else:
                                assert False
                print("Test Case 11 Execution Completed")
	
        @pytest.mark.run(order=12)
        def test_012_Login_as_root_to_GM_to_get_the_current_date(self):
                print("\n============================================\n")
                print("Login as root to GM to get the current date")
                print("\n============================================\n")
                global date
                child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                child.logfile=sys.stdout
                child.expect('#')
                child.sendline('date')
                child.sendline('\r')
                child.expect('#')
                date = child.before
                date = date.replace('\r','').replace('\n','').replace('date','')
                print('date is ',date)
                date = date[:-26]
                date = date.replace(' ','')
                print(date)
                date=time.strptime(date,"%a%b%d")
                date = time.strftime("%a%b%d",date)
                print('conveted date is',date)
                print("Test Case 12 Execution Completed")


        @pytest.mark.run(order=13)
        def test_013_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get current last queried timestamp")
                print("\n============================================\n")
                dig_cmd = ('dig @'+str(config.grid_vip)+' a.test.com A' )
                f= open("7933.txt","w+")		
                f.write("a.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 13 Execution Completed")

        @pytest.mark.run(order=14)
        def test_014_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',"record:a?name=a.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert(response)
                print("Test Case 14 Execution Completed")

        @pytest.mark.run(order=15)
        def test_015_Validate_Updated_Auth_Zone_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating updated Auth Zone last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com&_return_fields=last_queried",grid_vip=config.grid_vip)
                print(response)
                output=convert(response)
                print("Test Case 15 Execution Completed")

	
        @pytest.mark.run(order=16)
        def test_016_Add_ALL_records(self):
                print("\n============================================\n")
                print("adding and validating cname record")
                print("\n============================================\n")
                data = {"canonical": "test.com","name": "caa.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:cname",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
		print("\n============================================\n")
		print("Successfully created CNAME record")
		print("\n============================================\n")
		data = {"name": "dname.test.com","target": "www.infoblox.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:dname",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
		print("\n============================================\n")
		print("Successfully created DNAME record")
		print("\n============================================\n")
		data = {"mail_exchanger": "test.com","name": "mx.test.com","preference": 10,"view": "default"}
		response = ib_NIOS.wapi_request('POST', object_type="record:mx",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
		print("\n============================================\n")
		print("Successfully created MX record")
		print("\n============================================\n")
		data = {"name": "naptr.test.com","order": 10,"preference": 10,"regexp": "","replacement": "naptr.com","services": "http+E2U","view": "default"}
		response = ib_NIOS.wapi_request('POST', object_type="record:naptr",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
		print("\n============================================\n")
		print("Successfully created NAPTR record")
		print("\n============================================\n")
		data = {"name": "srv.test.com","port": 22,"priority": 0,"target": "test.com","view": "default","weight": 0}
		response = ib_NIOS.wapi_request('POST', object_type="record:srv",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
		print("\n============================================\n")
		print("Successfully created SRV record")
		print("\n============================================\n")
		data = {"ptrdname": "www.infoblox.com","name": "ptr.test.com","view": "default"}
		response = ib_NIOS.wapi_request('POST', object_type="record:ptr",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
		print("\n============================================\n")
		print("Successfully created PTR record")
		print("\n============================================\n")
		data = {"name": "txt.test.com","text": "text","view": "default"}
                response = ib_NIOS.wapi_request('POST',object_type="record:txt",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
		print("\n============================================\n")
		print("Successfully created TXT record")
		print("\n============================================\n")
		data = {"ipv6addr": "2620:10a:6000:2400::1","name": "aaaa.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:aaaa",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
		print("Successfully created AAAA record")
		print("\n============================================\n")
		data={"name": "afsdb.test.com","record_type": "AFSDB","subfield_values": [{"field_type": "S","field_value": "10","include_length": "NONE"},{"field_type": "N","field_value": "www.exmple3000.com","include_length": "NONE"}],"view": "default","extattrs": { "IB Discovery Owned": {"value": "100"},"Site": { "value": "200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
		print("Successfully created UNKNOWN AFSDB record")
		print("\n============================================\n")
		data= {"name": "rp.test.com","record_type": "RP","subfield_values": [{"field_type": "N","field_value": "www.example.com","include_length": "NONE"},{"field_type": "N","field_value": "abc.example.com","include_length": "NONE"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
		print("Successfully created UNKNOWN RP record")
		print("\n============================================\n")
		data={"name": "apl.test.com","record_type": "APL","subfield_values": [{"field_type": "P","field_value": "1:224.0.0.0/4 2:ff00::/8","include_length": "NONE"}],"view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
		print("Successfully created UNKNOWN APL record")
		print("\n============================================\n")
		data={"name": "dlv.test.com","record_type": "DLV","subfield_values": [{"field_type": "B","field_value": "10","include_length": "NONE"},{"field_type": "B","field_value": "11","include_length": "NONE"},{"field_type": "B","field_value": "23","include_length": "NONE"},{"field_type": "X","field_value": "2AF3","include_length": "NONE"}],"view": "default","extattrs": {"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
		print("Successfully created UNKNOWN DLV record")
		print("\n============================================\n")
		data={"name": "sshfp.test.com","record_type": "SSHFP","subfield_values":[{"field_type": "B","field_value": "1","include_length": "NONE"},{"field_type": "B","field_value": "1","include_length": "NONE"},{"field_type": "X","field_value": "123456789abcdef67890123456789abcdef67890","include_length": "8_BIT"}],"view": "default","extattrs": {"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
		print("Successfully created UNKNOWN SSHFP record")
		print("\n============================================\n")
		data={"name": "cds.test.com","record_type": "CDS","subfield_values": [{"field_value":"100","field_type": "S","include_length": "NONE"},{"field_value":"0","field_type": "S","include_length": "NONE"},{"field_value":"200","field_type": "S","include_length": "NONE"},{"field_value":"123456789abcdef67890123456789abcdef67890","field_type": "X","include_length": "8_BIT"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
		print("Successfully created UNKNOWN CDS record")
		print("\n============================================\n")
		data={"name": "cert.test.com","record_type": "CERT","subfield_values": [{"field_value": "11083 21041 76 MEdib2NhSU9PaW0xK3FkSHRPU3JEY09zR2lJMk5DY3h1WDIvVHFj","field_type": "P","include_length": "NONE"}],"view":"default","extattrs": {"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
		print("Successfully created UNKNOWN CERT record")
		print("\n============================================\n")
		data={"name": "hinfo.test.com","record_type": "HINFO","subfield_values": [{"field_value": "INTEL","field_type": "T","include_length": "8_BIT"},{"field_value": "WINDOWS","field_type": "T","include_length": "8_BIT"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
		print("Successfully created UNKNOWN HINFO record")
		print("\n============================================\n")
		data={"name": "loc.test.com","record_type": "LOC","subfield_values": [{"field_type": "P","field_value": "42 21 54.000 N 71 6 18.000 W -24.00m 30m 100m 0.10m","include_length": "NONE"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
		print("Successfully created UNKNOWN LOC record")
		print("\n============================================\n")
		data={"name": "ipseckey.test.com","record_type": "IPSECKEY","subfield_values": [{"field_value":"10","field_type": "B","include_length": "NONE"},{"field_value":"1","field_type": "S","include_length": "NONE"},{"field_value":"2","field_type": "S","include_length": "NONE"},{"field_value": "1.1.1.1","field_type": "4","include_length": "NONE"},{"field_value": "AQNRU3mG7TVTO2BkR47usntb102uFJtugbo6BSGvgqt4AQ==","field_type": "H","include_length": "8_BIT"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
		print("Successfully created UNKNOWN IPSECKEY record")
		print("\n============================================\n")
                print("Test Case 16 Executuion Completed")





        @pytest.mark.run(order=17)
        def test_017_Validate_ALL_created_records(self):
                print("\n============================================\n")
                print("Validating all created records ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa.test.com",grid_vip=config.grid_vip)
                print(output)
                result = ['aaaa.test.com','2620:10a:6000:2400::1']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
		print("\n============================================\n")
                print("Validated AAAA record present in the grid ")
                print("\n============================================\n")
                output = ib_NIOS.wapi_request('GET',object_type="record:cname",grid_vip=config.grid_vip)
                print(output)
                result = '"name": "caa.test.com"'
                if result in output:
                    assert True
                else:
                     assert False
                print(result)
		print("\n============================================\n")
                print("Validated CNAME record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:dname",grid_vip=config.grid_vip)
                print(output)
                result = '"name": "dname.test.com"'
                if result in output:
                    assert True
                else:
                    assert False
                print(result)
		print("\n============================================\n")
                print("Validated DNAME record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:mx",grid_vip=config.grid_vip)
                print(output)
                result = 'mx.test.com'
                if result in output:
                   assert True
                else:
                   assert False
                print(result)
		print("\n============================================\n")
                print("Validated MX record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:naptr",grid_vip=config.grid_vip)
                print(output)
                result = 'naptr.test.com'
                if result in output:
                    assert True
                else:
                    assert False
                print(result)
		print("\n============================================\n")
                print("Validated NAPTR record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:srv",grid_vip=config.grid_vip)
                print(output)
                result = 'srv.test.com'
                if result in output:
                    assert True
                else:
                    assert False
                print(result)
		print("\n============================================\n")
                print("Validated SRV record present in the grid ")
                print("\n============================================\n")
		get_ref = ib_NIOS.wapi_request('GET',object_type="record:ptr?name=ptr.test.com",grid_vip=config.grid_vip)
                #print(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                ref = eval(json.dumps(ref))
                #print(ref)
                output = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=name,ptrdname",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "ptr.test.com"','"ptrdname": "www.infoblox.com"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
		print("\n============================================\n")
                print("Validated PTR record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:txt",grid_vip=config.grid_vip)
                print(output)
                result = 'txt.test.com'
                if result in output:
                    assert True
                else:
                    assert False
                print(result)
		print("\n============================================\n")
                print("Validated TXT record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=afsdb.test.com&_return_fields=name,display_rdata",grid_vip=config.grid_vip)
                print(output)
                data = ['"display_rdata": "10 www.exmple3000.com."','"name": "afsdb.test.com"']
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
		print("\n============================================\n")
                print("Validated UNKNOWN AFSDB record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=rp.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = '"name": "rp.test.com"'
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
		print("\n============================================\n")
                print("Validated UNKNOWN RP record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=apl.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "apl.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
		print("\n============================================\n")
                print("Validated UNKNOWN APL record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=dlv.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "dlv.test.com"')
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
		print("\n============================================\n")
                print("Validated UNKNOWN DLV record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=sshfp.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "sshfp.test.com"')
                if data in output:
                        #assert True
						assert False
                else:
                        #assert False
						assert True
                print(data)
		print("\n============================================\n")
                print("Validated UNKNOWN SSHFP record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=cds.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "cds.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
		print("\n============================================\n")
                print("Validated UNKNOWN CDS record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=cert.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "cert.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
		print("\n============================================\n")
                print("Validated UNKNOWN CERT record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=hinfo.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "hinfo.zone.com"')
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
		print("\n============================================\n")
                print("Validated UNKNOWN HINFO record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=loc.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "loc.test.com"')
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
		print("\n============================================\n")
                print("Validated UNKNOWN LOC record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=ipseckey.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "ipseckey.test.com"')
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
		print("\n============================================\n")
                print("Validated UNKNOWN IPSECKEY record present in the grid ")
                print("\n============================================\n")
                print("Test Case 17 Executuion Completed")

        @pytest.mark.run(order=18)
        def test_018_Dig_ALL_records_using_lap_tool(self):
                print("\n============================================\n")
                print("Dig cname Record to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["caa.test.com CNAME\n","dname.test.com DNAME\n","mx.test.com MX\n","naptr.test.com NAPTR\n","srv.test.com SRV\n","ptr.test.com PTR\n","txt.test.com TXT\n","aaaa.test.com AAAA\n"])
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
		print("\n============================================\n")
		print("\n============================================\n")
                print("\n============================================\n")
                print("Dig all UNKNOWN records to get last queried timestamp")
                print("\n============================================\n")
		print("\n============================================\n")
		dig_cmd = ['dig @'+str(config.grid_vip)+' afsdb.test.com AFSDB','dig @'+str(config.grid_vip)+' rp.test.com. RP','dig @'+str(config.grid_vip)+' apl.test.com. APL','dig @'+str(config.grid_vip)+' dlv.test.com. DLV','dig @'+str(config.grid_vip)+' sshfp.test.com. SSHFP','dig @'+str(config.grid_vip)+' cds.test.com. TYPE59','dig @'+str(config.grid_vip)+' cert.test.com CERT','dig @'+str(config.grid_vip)+' hinfo.test.com HINFO','dig @'+str(config.grid_vip)+' loc.test.com. LOC','dig @'+str(config.grid_vip)+' ipseckey.test.com IPSECKEY']
		f = open(r'response.txt','w');
		for i in dig_cmd:
                	for j in range(1,3000):
                       		data = os.popen(i).read()
                      		f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 18 Execution Completed")

        @pytest.mark.run(order=19)
        def test_019_Validate_Updated_ALL_records_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating updated cname record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:cname?name=caa.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
		print("\n============================================\n")
		print("CNAME record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:dname?name=dname.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("DNAME record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:mx?name=mx.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("MX record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:naptr?name=naptr.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("NAPTR record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:srv?name=srv.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("SRV record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:ptr?name=ptr.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("PTR record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:txt?name=txt.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("TXT record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=afsdb.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("UNKNOWN afsdb record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=rp.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)	
		output=convert(response)
		print("\n============================================\n")
		print("UNKNOWN rp record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=apl.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("UNKNOWN apl record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=dlv.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)	
		output=convert(response)
		print("\n============================================\n")
		print("UNKNOWN dlv record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=sshfp.test.com&_return_fields=last_queried",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("UNKNOWN sshfp record updated with current grid date")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=cds.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("UNKNOWN cdsrecord updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=cert.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)	
		output=convert(response)
		print("\n============================================\n")
		print("UNKNOWN cert record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=hinfo.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("UNKNOWN hinfo record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=loc.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("UNKNOWN loc record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=ipseckey.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("Unknown ipseckey record updated with current grid date")
		print("\n============================================\n")
                print("Test Case 19 Executuion Completed")


################################################################################################################################
### Test Cases : Adding IPv4 Address to the DENY LIST at grid level and Blocking the client from updating the "LAST Queried" ###
################################################################################################################################


#######################################################
############### SET of ACES at Grid DNS ###############
#######################################################

        @pytest.mark.run(order=20)
        def test_020_Allow_and_validate_IPV4_Address_to_the_DENY_List_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Adding and validating IPv4 address to the DENY List at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(get_ref)
                data = ['"address": "'+config.client_v4+'"','"permission": "ALLOW"']
                for i in data:
                    if i in get_ref:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 20 Execution Completed")

##############
## A record ##
##############



        @pytest.mark.run(order=21)
        def test_021_Add_ALL_records(self):
		print("\n============================================\n")
                print("adding A record")
                print("\n============================================\n")
		data = {"ipv4addr": "10.0.0.2","name": "b.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
		print("\n============================================\n")
                print("Successfully created A record")
                print("\n============================================\n")
		data = {"ipv6addr": "2620:10a:6000:2400::2","name": "aaaa1.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:aaaa",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created AAAA record")
                print("\n============================================\n")
		data = {"canonical": "test1.com","name": "caa1.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:cname",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
		print("\n============================================\n")
                print("Successfully created CNAME record")
                print("\n============================================\n")
		data = {"name": "dname1.test.com","target": "www.infoblox1.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:dname",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created DNAME record")
                print("\n============================================\n")
		data = {"mail_exchanger": "test.com","name": "mx1.test.com","preference": 10,"view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:mx",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created MX record")
                print("\n============================================\n")
		data = {"name": "naptr1.test.com","order": 10,"preference": 10,"regexp": "","replacement": "naptr.com","services": "http+E2U","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:naptr",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created NAPTR record")
                print("\n============================================\n")
		data = {"name": "srv1.test.com","port": 22,"priority": 0,"target": "test.com","view": "default","weight": 0}
                response = ib_NIOS.wapi_request('POST', object_type="record:srv",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created SRV record")
                print("\n============================================\n")
		data = {"ptrdname": "www.infoblox1.com","name": "ptr1.test.com","view": "default"}
                output = ib_NIOS.wapi_request('POST', object_type="record:ptr",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                print("\n============================================\n")
                print("Successfully created PTR record")
                print("\n============================================\n")
		data = {"name": "txt1.test.com","text": "testing txt record","view": "default"}
                response = ib_NIOS.wapi_request('POST',object_type="record:txt",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created TXT record")
                print("\n============================================\n")
		data={"name": "afsdb1.test.com","record_type": "AFSDB","subfield_values": [{"field_type": "S","field_value": "10","include_length": "NONE"},{"field_type": "N","field_value": "www.exmple3000.com","include_length": "NONE"}],"view": "default","extattrs": { "IB Discovery Owned": {"value": "100"},"Site": { "value": "200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN AFSDB record")
                print("\n============================================\n")
		data= {"name": "rp1.test.com","record_type": "RP","subfield_values": [{"field_type": "N","field_value": "www.example.com","include_length": "NONE"},{"field_type": "N","field_value": "abc.example.com","include_length": "NONE"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN RP record")
                print("\n============================================\n")
		data={"name": "apl1.test.com","record_type": "APL","subfield_values": [{"field_type": "P","field_value": "1:224.0.0.0/4 2:ff00::/8","include_length": "NONE"}],"view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN APL record")
                print("\n============================================\n")
		data={"name": "dlv1.test.com","record_type": "DLV","subfield_values": [{"field_type": "B","field_value": "10","include_length": "NONE"},{"field_type": "B","field_value": "11","include_length": "NONE"},{"field_type": "B","field_value": "23","include_length": "NONE"},{"field_type": "X","field_value": "2AF3","include_length": "NONE"}],"view": "default","extattrs": {"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN DLV record")
                print("\n============================================\n")
		data={"name": "sshfp1.test.com","record_type": "SSHFP","subfield_values":[{"field_type": "B","field_value": "1","include_length": "NONE"},{"field_type": "B","field_value": "1","include_length": "NONE"},{"field_type": "X","field_value": "123456789abcdef67890123456789abcdef67890","include_length": "8_BIT"}],"view": "default","extattrs": {"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN SSHFP record")
                print("\n============================================\n")
		data={"name": "cds1.test.com","record_type": "CDS","subfield_values": [{"field_value":"100","field_type": "S","include_length": "NONE"},{"field_value":"0","field_type": "S","include_length": "NONE"},{"field_value":"200","field_type": "S","include_length": "NONE"},{"field_value":"123456789abcdef67890123456789abcdef67890","field_type": "X","include_length": "8_BIT"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN CDS record")
                print("\n============================================\n")
		data={"name": "cert1.test.com","record_type": "CERT","subfield_values": [{"field_value": "11083 21041 76 MEdib2NhSU9PaW0xK3FkSHRPU3JEY09zR2lJMk5DY3h1WDIvVHFj","field_type": "P","include_length": "NONE"}],"view":"default","extattrs": {"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN CERT record")
                print("\n============================================\n")
		data={"name": "hinfo1.test.com","record_type": "HINFO","subfield_values": [{"field_value": "INTEL","field_type": "T","include_length": "8_BIT"},{"field_value": "WINDOWS","field_type": "T","include_length": "8_BIT"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN HINFO record")
                print("\n============================================\n")
		data={"name": "loc1.test.com","record_type": "LOC","subfield_values": [{"field_type": "P","field_value": "42 21 54.000 N 71 6 18.000 W -24.00m 30m 100m 0.10m","include_length": "NONE"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN LOC record")
                print("\n============================================\n")
		data={"name": "ipseckey1.test.com","record_type": "IPSECKEY","subfield_values": [{"field_value":"10","field_type": "B","include_length": "NONE"},{"field_value":"1","field_type": "S","include_length": "NONE"},{"field_value":"2","field_type": "S","include_length": "NONE"},{"field_value": "1.1.1.1","field_type": "4","include_length": "NONE"},{"field_value": "AQNRU3mG7TVTO2BkR47usntb102uFJtugbo6BSGvgqt4AQ==","field_type": "H","include_length": "8_BIT"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN IPSECKEY record")
                print("\n============================================\n")
                print("Test Case 21 Executuion Completed")

        @pytest.mark.run(order=22)
        def test_022_Validate_ALL_created_records(self):
                print("\n============================================\n")
                print("Validating all created records ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:a?name=b.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "b.test.com"','"ipv4addr": "10.0.0.2"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
		print("\n============================================\n")
                print("Validated A record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa1.test.com&_return_fields=name,view,ipv6addr",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "aaaa1.test.com"','"ipv6addr": "2620:10a:6000:2400::2"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
		print("\n============================================\n")
                print("Validated AAAA record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa1.test.com&_return_fields=name,canonical,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "caa1.test.com"','"canonical": "test1.com"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
		print("\n============================================\n")
                print("Validated CNAME record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:dname?name=dname1.test.com&_return_fields=name,target,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "dname1.test.com"','"target": "www.infoblox1.com"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
		print("\n============================================\n")
                print("Validated DNAME record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:mx?name=mx1.test.com&_return_fields%2B=preference,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['mx1.test.com','"preference": 10','"view": "default"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
		print("\n============================================\n")
                print("Validated MX record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:naptr?name=naptr1.test.com&_return_fields=name,order,preference,regexp,replacement,services,view",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "naptr1.test.com"','"order": 10','"preference": 10','"regexp": ""','"replacement": "naptr.com"','"services": "http+E2U"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
		print("\n============================================\n")
                print("Validated NAPTR record present in the grid ")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:ptr?name=ptr1.test.com&_return_fields=name,ptrdname&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                result = ['"name": "ptr1.test.com"','"ptrdname": "www.infoblox1.com"']
                for i in result:
                    if i in response:
                        assert True
                    else:
                        assert False
                print(result)
		print("\n============================================\n")
                print("Validated PTR record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:srv?name=srv1.test.com&_return_fields=name,port,priority,target,view,weight&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "srv1.test.com"','"port": 22','"priority": 0','"target": "test.com"','"view": "default"','"weight": 0']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
		print("\n============================================\n")
                print("Validated SRV record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:txt?name=txt1.test.com&_return_fields=name,text,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "txt1.test.com"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
		print("\n============================================\n")
                print("Validated TXT record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=afsdb1.test.com&_return_fields=name,display_rdata",grid_vip=config.grid_vip)
                print(output)
                data = ['"display_rdata": "10 www.exmple3000.com."','"name": "afsdb1.test.com"']
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
		print("\n============================================\n")
                print("Validated UNKNOWN AFSDB record present in the grid ")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET', object_type="record:unknown?name=rp1.test.com&_return_fields=name",fields=json.dumps(data))
                print(response)
                data = '"name": "rp1.test.com"'
                if data in response:
                        assert True
                else:
                        assert False
                print(data)
		print("\n============================================\n")
                print("Validated UNKNOWN RP record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=apl1.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "apl1.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
		print("\n============================================\n")
                print("Validated UNKNOWN APL record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=dlv1.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "dlv1.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
		print("\n============================================\n")
                print("Validated UNKNOWN DLV record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=sshfp1.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "sshfp1.test.com"')
                if data in output:
                        #assert True
						assert False
                else:
                        #assert False
						assert True
                print(data)
		print("\n============================================\n")
                print("Validated UNKNOWN SSHFP record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=cds1.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "cds1.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
		print("\n============================================\n")
                print("Validated UNKNOWN CDS record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=cert1.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "cert1.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
		print("\n============================================\n")
                print("Validated UNKNOWN CERT record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=hinfo1.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "hinfo1.zone.com"')
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
		print("\n============================================\n")
                print("Validated UNKNOWN HINFO record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=loc1.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "loc1.zone.com"')
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
		print("\n============================================\n")
                print("Validated UNKNOWN LOC record present in the grid ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=ipseckey1.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "ipseckey1.test.com"')
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
		print("\n============================================\n")
                print("Validated UNKNOWN IPSECKEY record present in the grid ")
                print("\n============================================\n")
                print("Test Case 22 Executuion Completed")


        @pytest.mark.run(order=23)
        def test_023_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["b.test.com A\n","aaaa1.test.com AAAA\n","ptr1.test.com PTR\n","caa1.test.com CNAME\n","dname1.test.com DNAME\n","mx.test.com MX\n","srv1.test.com SRV\n","naptr1.test.com NAPTR\n","txt1.test.com TXT\n"])
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 23 Execution Completed")

        @pytest.mark.run(order=24)
        def test_024_dig_ALL_UNKNOWN_Records_to_get_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig AFSDB Record to get last queried timestamp")
                print("\n============================================\n")
		dig_cmd = ['dig @'+str(config.grid_vip)+' afsdb1.test.com AFSDB','dig @'+str(config.grid_vip)+' rp1.test.com RP','dig @'+str(config.grid_vip)+' apl1.test.com APL','dig @'+str(config.grid_vip)+' dlv1.test.com DLV','dig @'+str(config.grid_vip)+' sshfp1.test.com SSHFP','dig @'+str(config.grid_vip)+' cds1.test.com TYPE59','dig @'+str(config.grid_vip)+' cert1.test.com CERT','dig @'+str(config.grid_vip)+' hinfo1.test.com HINFO','dig @'+str(config.grid_vip)+' loc1.test.com LOC','dig @'+str(config.grid_vip)+' ipseckey1.test.com IPSECKEY']
		f = open(r'response.txt','w');
		for i in dig_cmd:
                	for j in range(1,3000):
                       		data = os.popen(i).read()
                      		f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 24 Execution Completed")


        @pytest.mark.run(order=25)
        def test_025_Validate_ALL_records_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating all records last queried timestamp field will not update with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:a?name=b.test.com&_return_fields=last_queried",grid_vip=config.grid_vip)
                print(response)
		output=convert1(response)
		print("\n============================================\n")
                print("A record not updated with current grid date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa1.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
		output=convert1(response)
		print("\n============================================\n")
                print("AAAA record not updated with current grid date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa1.test.com&_return_fields=last_queried",grid_vip=config.grid_vip)
                output=convert1(response)
		print("\n============================================\n")
		print("CNAME record not updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:dname?name=dname1.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("DNAME record not updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:mx?name=mx1.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("MX record not updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:naptr?name=naptr1.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("NAPTR record not updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:srv?name=srv1.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("SRV record not updated with current grid date")
		print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:ptr?name=ptr1.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("PTR record not updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:txt?name=txt1.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("TXT record not updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=afsdb1.test.com&_return_fields=last_queried",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN afsdb record not updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=rp1.test.com&_return_fields=last_queried",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN rp record not updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=apl1.test.com&_return_fields=last_queried",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN apl record not updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=dlv1.test.com&_return_fields=last_queried",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN dlv record not updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=sshfp1.test.com&_return_fields=last_queried",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN sshfp record not updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=cds1.test.com&_return_fields=last_queried",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN cds record not updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=cert1.test.com&_return_fields=last_queried",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN cert record not updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=hinfo1.test.com&_return_fields=last_queried",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN hinfo record not updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=loc1.test.com&_return_fields=last_queried",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN loc record not updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=ipseckey1.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("Unknown ipseckey record not updated with current grid date")
		print("\n============================================\n")
                print("Test Case 25 Executuion Completed")



##############################################################################################################################
### Test Cases : Excluding the IPv4 Address from the DENY LIST and allowing client to update the "LAST Queried" time stamp ###
##############################################################################################################################

        @pytest.mark.run(order=26)
        def test_026_Excluding_and_Validate_IPv4_Address_from_the_Last_Queried_DENY_LIST_at_Grid_DNS(self):
                print("\n============================================\n")
                print("Excluding and_validating IPv4 address from the last queried deny list at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(get_ref)
                data = ['"address": "'+config.client_v4+'"','"permission": "DENY"']
                for i in data:
                    if i in get_ref:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 26 Execution Completed")

##############
## A record ##
##############


        @pytest.mark.run(order=27)
        def test_027_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["b.test.com A\n","aaaa1.test.com AAAA\n","ptr1.test.com PTR\n","caa1.test.com CNAME\n","dname1.test.com DNAME\n","mx1.test.com MX\n","srv1.test.com SRV\n","naptr1.test.com NAPTR\n","txt1.test.com TXT\n"])
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 27 Execution Completed")

        @pytest.mark.run(order=28)
        def test_028_dig_ALL_UNKNOWN_Records_to_get_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig AFSDB Record to get last queried timestamp")
                print("\n============================================\n")
                dig_cmd = ['dig @'+str(config.grid_vip)+' afsdb1.test.com AFSDB','dig @'+str(config.grid_vip)+' rp1.test.com RP','dig @'+str(config.grid_vip)+' apl1.test.com APL','dig @'+str(config.grid_vip)+' dlv1.test.com DLV','dig @'+str(config.grid_vip)+' sshfp1.test.com SSHFP','dig @'+str(config.grid_vip)+' cds1.test.com TYPE59','dig @'+str(config.grid_vip)+' cert1.test.com CERT','dig @'+str(config.grid_vip)+' hinfo1.test.com HINFO','dig @'+str(config.grid_vip)+' loc1.test.com LOC','dig @'+str(config.grid_vip)+' ipseckey1.test.com IPSECKEY']
                f = open(r'response.txt','w');
                for i in dig_cmd:
                        for j in range(1,3000):
                                data = os.popen(i).read()
                                f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 28 Execution Completed")


        @pytest.mark.run(order=29)
        def test_029_Validate_Updated_all_above_records_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating all records last queried timestamp field should update with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:a?name=b.test.com&_return_fields=last_queried",grid_vip=config.grid_vip)
                print(response)
		output=convert(response)
		print("\n============================================\n")
                print("A record updated with current grid date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa1.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
		output=convert(response)
		print("\n============================================\n")
                print("AAAA record updated with current grid date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa1.test.com&_return_fields=last_queried",grid_vip=config.grid_vip)
                output=convert(response)
		print("\n============================================\n")
		print("CNAME record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:dname?name=dname1.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("DNAME record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:mx?name=mx1.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("MX record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:naptr?name=naptr1.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("NAPTR record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:srv?name=srv1.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("SRV record updated with current grid date")
		print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:ptr?name=ptr1.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("PTR record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:txt?name=txt1.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("TXT record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=afsdb1.test.com&_return_fields=last_queried",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("UNKNOWN afsdb record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=rp1.test.com&_return_fields=last_queried",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("UNKNOWN rp record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=apl1.test.com&_return_fields=last_queried",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("UNKNOWN apl record  updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=dlv1.test.com&_return_fields=last_queried",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("UNKNOWN dlv record  updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=sshfp1.test.com&_return_fields=last_queried",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("UNKNOWN sshfp record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=cds1.test.com&_return_fields=last_queried",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("UNKNOWN cds record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=cert1.test.com&_return_fields=last_queried",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("UNKNOWN cert record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=hinfo1.test.com&_return_fields=last_queried",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("UNKNOWN hinfo record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=loc1.test.com&_return_fields=last_queried",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("UNKNOWN loc record updated with current grid date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=ipseckey1.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert(response)
		print("\n============================================\n")
		print("Unknown ipseckey record updated with current grid date")
		print("\n============================================\n")
                print("Test Case 29 Executuion Completed")


####################################################################################################################
### Test Cases :  Adding IPv4 NETWORK to the DENY LIST and prevente the clients from updating the "LAST Queried" ###
####################################################################################################################

        @pytest.mark.run(order=30)
        def test_030_Adding_IPv4_NETWORK_to_the_LAST_Queried_DENY_LIST_at_GRID_level(self):
                print("\n============================================\n")
                print("Adding IPv4 NETWORK to the DENY LIST at GRID DNS level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl": [{"address": "10.0.0.0/8","permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 30 Execution Completed")


        @pytest.mark.run(order=31)
        def test_031_Validate_Added_IPV4_NETWORK_in_the_DENY_List_at_Grid_DNS_level(self):
                print("\n============================================\n")
                print("Validating added IPv4 Network in the DENY LIST at Grid DNS level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "10.0.0.0/8"','"permission": "ALLOW"']
                for i in data:
                    if i in response:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 31 Execution Completed")


##############
## A record ##
##############

        @pytest.mark.run(order=32)
        def test_032_Add_ALL_records(self):
                print("\n============================================\n")
                print("adding A record")
                print("\n============================================\n")
		data = {"ipv4addr": "10.0.0.3","name": "c.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created A record")
                print("\n============================================\n")
		print("\n============================================\n")
                print("adding AAAA record")
                print("\n============================================\n")
		data = {"ipv6addr": "2620:10a:6000:2400::3","name": "aaaa2.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:aaaa",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created AAAA record")
                print("\n============================================\n")
		print("\n============================================\n")
                print("adding CNAME record")
                print("\n============================================\n")
		data = {"canonical": "test2.com","name": "caa2.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:cname",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created CNAME record")
                print("\n============================================\n")
		print("\n============================================\n")
                print("adding DNAME record")
                print("\n============================================\n")
		data = {"name": "dname2.test.com","target": "www.infoblox2.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:dname",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created DNAME record")
                print("\n============================================\n")
		print("\n============================================\n")
                print("adding MX record")
                print("\n============================================\n")
		data = {"mail_exchanger": "test.com","name": "mx2.test.com","preference": 10,"view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:mx",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created MX record")
                print("\n============================================\n")
		print("\n============================================\n")
                print("adding NAPTR record")
                print("\n============================================\n")
		data = {"name": "naptr2.test.com","order": 10,"preference": 10,"regexp": "","replacement": "naptr.com","services": "http+E2U","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:naptr",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
		print("\n============================================\n")
                print("Successfully created NAPTR record")
		print("\n============================================\n")
		print("\n============================================\n")
                print("adding SRV record")
                print("\n============================================\n")
		data = {"name": "srv2.test.com","port": 22,"priority": 0,"target": "test.com","view": "default","weight": 0}
                response = ib_NIOS.wapi_request('POST', object_type="record:srv",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created SRV record")
		print("\n============================================\n")
		print("\n============================================\n")
                print("adding PTR record")
                print("\n============================================\n")
		data = {"ptrdname": "www.infoblox2.com","name": "ptr2.test.com","view": "default"}
                output = ib_NIOS.wapi_request('POST', object_type="record:ptr",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                print("\n============================================\n")
                print("Successfully created PTR record")
                print("\n============================================\n")
		print("\n============================================\n")
                print("adding TXT record")
                print("\n============================================\n")
		data = {"name": "txt2.test.com","text": "text.com","view": "default"}
                response = ib_NIOS.wapi_request('POST',object_type="record:txt",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
		print("\n============================================\n")
                print("Successfully created TXT record")
		print("\n============================================\n")
		print("\n============================================\n")
                print("adding UNKNOWN AFSDB record")
                print("\n============================================\n")
		data={"name": "afsdb2.test.com","record_type": "AFSDB","subfield_values": [{"field_type": "S","field_value": "10","include_length": "NONE"},{"field_type": "N","field_value": "www.exmple3000.com","include_length": "NONE"}],"view": "default","extattrs": { "IB Discovery Owned": {"value": "100"},"Site": { "value": "200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN AFSDB record")
		print("\n============================================\n")
		print("\n============================================\n")
                print("adding UNKNOWN RP record")
                print("\n============================================\n")
		data= {"name": "rp2.test.com","record_type": "RP","subfield_values": [{"field_type": "N","field_value": "www.example.com","include_length": "NONE"},{"field_type": "N","field_value": "abc.example.com","include_length": "NONE"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN RP record")
		print("\n============================================\n")
		print("\n============================================\n")
                print("adding UNKNOWN APl record")
                print("\n============================================\n")
		data={"name": "apl2.test.com","record_type": "APL","subfield_values": [{"field_type": "P","field_value": "1:224.0.0.0/4 2:ff00::/8","include_length": "NONE"}],"view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN APL record")
		print("\n============================================\n")
		print("\n============================================\n")
                print("adding UNKNOWN DLV record")
                print("\n============================================\n")
		data={"name": "dlv2.test.com","record_type": "DLV","subfield_values": [{"field_type": "B","field_value": "10","include_length": "NONE"},{"field_type": "B","field_value": "11","include_length": "NONE"},{"field_type": "B","field_value": "23","include_length": "NONE"},{"field_type": "X","field_value": "2AF3","include_length": "NONE"}],"view": "default","extattrs": {"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN DLV record")
		print("\n============================================\n")
		print("\n============================================\n")
                print("adding UNKNOWN SSHFP record")
                print("\n============================================\n")
		data={"name": "sshfp2.test.com","record_type": "SSHFP","subfield_values":[{"field_type": "B","field_value": "1","include_length": "NONE"},{"field_type": "B","field_value": "1","include_length": "NONE"},{"field_type": "X","field_value": "123456789abcdef67890123456789abcdef67890","include_length": "8_BIT"}],"view": "default","extattrs": {"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN SSHFP record")
		print("\n============================================\n")
		print("\n============================================\n")
                print("adding UNKNOWN CDS record")
                print("\n============================================\n")
		data={"name": "cds2.test.com","record_type": "CDS","subfield_values": [{"field_value":"100","field_type": "S","include_length": "NONE"},{"field_value":"0","field_type": "S","include_length": "NONE"},{"field_value":"200","field_type": "S","include_length": "NONE"},{"field_value":"123456789abcdef67890123456789abcdef67890","field_type": "X","include_length": "8_BIT"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN CDS record")
		print("\n============================================\n")
		print("\n============================================\n")
                print("adding UNKNOWN CERT record")
                print("\n============================================\n")
		data={"name": "cert2.test.com","record_type": "CERT","subfield_values": [{"field_value": "11083 21041 76 MEdib2NhSU9PaW0xK3FkSHRPU3JEY09zR2lJMk5DY3h1WDIvVHFj","field_type": "P","include_length": "NONE"}],"view":"default","extattrs": {"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN CERT record")
		print("\n============================================\n")
		print("\n============================================\n")
                print("adding UNKNOWN HINFO record")
                print("\n============================================\n")
		data={"name": "hinfo2.test.com","record_type": "HINFO","subfield_values": [{"field_value": "INTEL","field_type": "T","include_length": "8_BIT"},{"field_value": "WINDOWS","field_type": "T","include_length": "8_BIT"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN HINFO record")
		print("\n============================================\n")
		print("\n============================================\n")
                print("adding UNKNOWN LOC record")
                print("\n============================================\n")
		data={"name": "loc2.test.com","record_type": "LOC","subfield_values": [{"field_type": "P","field_value": "42 21 54.000 N 71 6 18.000 W -24.00m 30m 100m 0.10m","include_length": "NONE"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN LOC record")
		print("\n============================================\n")
		print("\n============================================\n")
                print("adding UNKNOWN IPSECKEY record")
                print("\n============================================\n")
		data={"name": "ipseckey2.test.com","record_type": "IPSECKEY","subfield_values": [{"field_value":"10","field_type": "B","include_length": "NONE"},{"field_value":"1","field_type": "S","include_length": "NONE"},{"field_value":"2","field_type": "S","include_length": "NONE"},{"field_value": "1.1.1.1","field_type": "4","include_length": "NONE"},{"field_value": "AQNRU3mG7TVTO2BkR47usntb102uFJtugbo6BSGvgqt4AQ==","field_type": "H","include_length": "8_BIT"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN IPSECKEY record")
                print("\n============================================\n")
                print("Test Case 32 Executuion Completed")

	@pytest.mark.run(order=33)
        def test_033_Validate_ALL_created_records(self):
                print("\n============================================\n")
                print("Validating created A record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:a?name=c.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "c.test.com"','"ipv4addr": "10.0.0.3"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
		print("\n============================================\n")
                print("Validating created AAAA record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa2.test.com&_return_fields=name,view,ipv6addr&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "aaaa2.test.com"','"ipv6addr": "2620:10a:6000:2400::3"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
		print("\n============================================\n")
                print("Validating created CNAME record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa2.test.com&_return_fields=name,canonical,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "caa2.test.com"','"canonical": "test2.com"','"view": "default"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
		print("\n============================================\n")
                print("Validating created DNAME record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:dname?name=dname2.test.com&_return_fields=name,target,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "dname2.test.com"','"target": "www.infoblox2.com"','"view": "default"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
		print("\n============================================\n")
                print("Validating created MX record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:mx?name=mx2.test.com&_return_fields%2B=preference,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['mx2.test.com','"preference": 10','"view": "default"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
		print("\n============================================\n")
                print("Validating created NAPTR record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:naptr?name=naptr2.test.com&_return_fields=name,order,preference,regexp,replacement,services,view",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "naptr2.test.com"','"order": 10','"preference": 10','"regexp": ""','"replacement": "naptr.com"','"services": "http+E2U"','"view": "default"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
		print("\n============================================\n")
                print("Validating created PTR record ")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:ptr?name=ptr2.test.com&_return_fields=name,ptrdname&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                result = ['"name": "ptr2.test.com"','"ptrdname": "www.infoblox2.com"']
                for i in result:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(result)
		print("\n============================================\n")
                print("Validating created SRV record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:srv?name=srv2.test.com&_return_fields=name,port,priority,target,view,weight&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "srv2.test.com"','"port": 22','"priority": 0','"target": "test.com"','"view": "default"','"weight": 0']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
		print("\n============================================\n")
                print("Validating created TXT record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:txt?name=txt2.test.com&_return_fields=name,text,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "txt2.test.com"','"view": "default"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
		print("\n============================================\n")
                print("Validating UNKNOWN AFSDB record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=afsdb2.test.com&_return_fields=name,display_rdata",grid_vip=config.grid_vip)
                print(output)
                data = ['"display_rdata": "10 www.exmple3000.com."','"name": "afsdb2.test.com"']
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
		print("\n============================================\n")
                print("Validating UNKNOWN RP record ")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET', object_type="record:unknown?name=rp2.test.com&_return_fields=name",fields=json.dumps(data))
                print(response)
                data = '"name": "rp2.test.com"'
                if data in response:
                        assert True
                else:
                        assert False
                print(data)
		print("\n============================================\n")
                print("Validating UNKNOWN APL record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=apl2.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "apl2.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
		print("\n============================================\n")
                print("Validating UNKNOWN DLV record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=dlv2.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "dlv2.test.com"')
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
		print("\n============================================\n")
                print("Validating UNKNOWN SSHFP record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=sshfp2.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "sshfp2.test.com"')
                if data in output:
                        #assert True
						assert False
                else:
                        #assert False
						assert True
                print(data)
		print("\n============================================\n")
                print("Validating UNKNOWN CDS record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=cds2.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "cds2.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
		print("\n============================================\n")
                print("Validating UNKNOWN CERT record ")
                print("\n============================================\n")		
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=cert2.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "cert2.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
		print("\n============================================\n")
                print("Validating UNKNOWN HINFO record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=hinfo2.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "hinfo2.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
		print("\n============================================\n")
                print("Validating UNKNOWN LOC record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=loc2.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "loc2.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
		print("\n============================================\n")
                print("Validating UNKNOWN IPSECKEY record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=ipseckey2.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "ipseckey2.test.com"')
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
                print("Test Case 33 Executuion Completed")

        @pytest.mark.run(order=34)
        def test_034_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["c.test.com A\n","aaaa2.test.com AAAA\n","ptr2.test.com PTR\n","caa2.test.com CNAME\n","dname2.test.com DNAME\n","mx2.test.com MX\n","srv2.test.com SRV\n","naptr2.test.com NAPTR\n","txt2.test.com TXT\n",])
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 34 Execution Completed")


        @pytest.mark.run(order=35)
        def test_035_dig_ALL_UNKNOWN_Records_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all UNKNOWN records to get last queried timestamp")
                print("\n============================================\n")
		dig_cmd = ['dig @'+str(config.grid_vip)+' afsdb2.test.com AFSDB','dig @'+str(config.grid_vip)+' rp2.test.com RP','dig @'+str(config.grid_vip)+' apl2.test.com APL','dig @'+str(config.grid_vip)+' dlv2.test.com DLV','dig @'+str(config.grid_vip)+' sshfp2.test.com SSHFP','dig @'+str(config.grid_vip)+' cds2.test.com CDS','dig @'+str(config.grid_vip)+' cert2.test.com CERT','dig @'+str(config.grid_vip)+' hinfo2.test.com HINFO','dig @'+str(config.grid_vip)+' loc2.test.com LOC','dig @'+str(config.grid_vip)+' ipseckey2.test.com IPSECKEY']
		f = open(r'response.txt','w');
		for i in dig_cmd:
                	for j in range(1,3000):
                       		data = os.popen(i).read()
                      		f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 35 Execution Completed")


        @pytest.mark.run(order=36)
        def test_036_Validate_all_created_records_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validate A record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:a?name=c.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
	       	output=convert1(response)
	       	print("\n============================================\n")
	       	print("A record not updated with current grid date")
	       	print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate AAAA record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa2.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("AAAA record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate CNAME record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa2.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("CNAME record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate DNAME record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:dname?name=dname2.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("DNAME record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate PTR record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:ptr?name=ptr2.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("PTR record not updated with current grid date")
		print("\n============================================\n")	
		print("\n")
                print("\n============================================\n")
                print("validate MX record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:mx?name=mx2.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("MX record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate SRV record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:srv?name=srv2.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("SRV record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate NAPTR record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:naptr?name=naptr2.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("NAPTR record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate TXT record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:txt?name=txt2.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("TXT record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN AFSDB record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=afsdb2.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN AFSDB not record updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
		print("validate UNKNOWN RP record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=rp2.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN RP record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
		print("validate UNKNOWN APL record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=apl2.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN APL record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN DLV record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=dlv2.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN DLV record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN SSHFP record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=sshfp2.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN SSHFP record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN CDS record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=cds2.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN CDS record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("validate UNKNOWN CERT record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=cert2.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN CERT record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("validate UNKNOWN HINFO record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=hinfo2.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN HINFO record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("validate UNKNOWN LOC record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=loc2.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN LOC record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("validate UNKNOWN IPSECKEY record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=ipseckey2.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN IPSECKEY record not updated with current grid date")
		print("\n============================================\n")
		print("\nTest Case 36 Execution Completed")



#############################################################################################################
### Test Cases :  Excluding IPv4 NETWORK from  DENY LIST and allowing client to update the "LAST Queried" ###
#############################################################################################################

        @pytest.mark.run(order=37)
        def test_037_Excluding_IPv4_NETWORK_from_the_Last_Queried_DENY_List_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("Adding IPv4 Network to the Last Queried DENY LIST at Grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl": [{"address": "10.0.0.0/8","permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 37 Execution Completed")


        @pytest.mark.run(order=38)
        def test_038_Validate_Added_IPV4_NETWORK_in_the_Last_Queried_DENY_List(self):
                print("\n============================================\n")
                print("Validating added IPv4 Network in the Last Queried DENY LIST")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "10.0.0.0/8"','"permission": "DENY"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 38 Execution Completed")

##############
## A record ##
##############

        @pytest.mark.run(order=39)
        def test_039_dig_all_created_records_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["c.test.com A\n","aaaa2.test.com AAAA\n","ptr2.test.com PTR\n","caa2.test.com CNAME\n","dname2.test.com DNAME\n","mx2.test.com MX\n","srv2.test.com SRV\n","naptr2.test.com NAPTR\n","txt2.test.com TXT\n",])
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 39 Execution Completed")


        @pytest.mark.run(order=40)
        def test_040_dig_ALL_UNKNOWN_Records_to_get_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all UNKNOWN records to get last queried timestamp")
                print("\n============================================\n")
                dig_cmd = ['dig @'+str(config.grid_vip)+' afsdb2.test.com AFSDB','dig @'+str(config.grid_vip)+' rp2.test.com RP','dig @'+str(config.grid_vip)+' apl2.test.com APL','dig @'+str(config.grid_vip)+' dlv2.test.com DLV','dig @'+str(config.grid_vip)+' sshfp2.test.com SSHFP','dig @'+str(config.grid_vip)+' cds2.test.com CDS','dig @'+str(config.grid_vip)+' cert2.test.com CERT','dig @'+str(config.grid_vip)+' hinfo2.test.com HINFO','dig @'+str(config.grid_vip)+' loc2.test.com LOC','dig @'+str(config.grid_vip)+' ipseckey2.test.com IPSECKEY']
                f = open(r'response.txt','w');
                for i in dig_cmd:
                        for j in range(1,3000):
                                data = os.popen(i).read()
                                f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 40 Execution Completed")

        @pytest.mark.run(order=41)
        def test_041_Validate_Updated_ALL_records_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:a?name=c.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("A record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated AAAA record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa2.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("AAAA record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated CNAME record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa2.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("CNAME record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated DNAME record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:dname?name=dname2.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("DNAME record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated PTR record last queried timestamp with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:ptr?name=ptr1.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("PTR record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated MX record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:mx?name=mx2.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("MX record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated SRV record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:srv?name=srv2.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("SRV record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated NAPTR record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:naptr?name=naptr2.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("NAPTR record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated TXT record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:txt?name=txt2.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("TXT record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN AFSDB record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=afsdb2.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN AFSDB record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN RP record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=rp2.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN RP record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN APL record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=apl2.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN APL record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN DLV record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=dlv2.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN DLV record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN SSHFP record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=sshfp2.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN SSHFP record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN CDS record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=cds2.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN CDS record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN CERT record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=cert2.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN CERT record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN HINFO record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=hinfo2.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN HINFO record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN LOC record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=loc2.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN LOC record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN IPSECKEY record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=ipseckey2.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN IPSECKEY record updated with current grid date")
                print("\n============================================\n")
		print("Test Case 41 Execution Completed")


	
##################################################################################################################
### Test Cases : Adding IPv6 Address to the DENY LIST and Blocking the client from updating the "LAST Queried" ###
##################################################################################################################
	
        @pytest.mark.run(order=42)
        def test_042_Add_and_Validate_IPV6_Address_to_the_DENY_List_grid_dns(self):
                print("\n============================================\n")
                print("Adding IPv6 Address to the DENY LIST")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v6, "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\n============================================\n")
                print("Validating added IPv6 Address in the DENY LIST")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "'+config.client_v6+'"','"permission": "ALLOW"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 42 Execution Completed")


##############
## A record ##
##############

        @pytest.mark.run(order=43)
        def test_043_Add_ALL_records(self):
		print("\n============================================\n")
                print("Adding A record")
                print("\n============================================\n")
		data = {"ipv4addr": "10.0.0.4","name": "d.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
		print("\n============================================\n")
                print("Successfully created A record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding AAAA record")
                print("\n============================================\n")
		data = {"ipv6addr": "2620:10a:6000:2400::4","name": "aaaa3.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:aaaa",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
                print("Successfully created AAAA record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding CNAME record")
                print("\n============================================\n")
		data = {"canonical": "test3.com","name": "caa3.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:cname",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
		print("\n============================================\n")
                print("Successfully created CNAME record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding DNAME record")
                print("\n============================================\n")
		data = {"name": "dname3.test.com","target": "www.infoblox3.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:dname",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
		print("\n============================================\n")
                print("Successfully created DNAME record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding MX record")
                print("\n============================================\n")
		data = {"mail_exchanger": "test.com","name": "mx3.test.com","preference": 10,"view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:mx",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
		print("\n============================================\n")
                print("Successfully created MX record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding NAPTR record")
                print("\n============================================\n")
		data = {"name": "naptr3.test.com","order": 10,"preference": 10,"regexp": "","replacement": "naptr.com","services": "http+E2U","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:naptr",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
		print("\n============================================\n")
                print("Successfully created NAPTR record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding SRV record")
                print("\n============================================\n")
		data = {"name": "srv3.test.com","port": 22,"priority": 0,"target": "test.com","view": "default","weight": 0}
                response = ib_NIOS.wapi_request('POST', object_type="record:srv",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
		print("\n============================================\n")
                print("Successfully created SRV record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding PTR record")
                print("\n============================================\n")
		data = {"ptrdname": "www.infoblox3.com","name": "ptr3.test.com","view": "default"}
                output = ib_NIOS.wapi_request('POST', object_type="record:ptr",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
		print("\n============================================\n")
                print("Successfully created PTR record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding TXT record")
                print("\n============================================\n")
		data = {"name": "txt3.test.com","text": "txt.com","view": "default"}
                response = ib_NIOS.wapi_request('POST',object_type="record:txt",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
		print("\n============================================\n")
                print("Successfully created TXT record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding UNKNOWN AFSDB record")
                print("\n============================================\n")
		data={"name": "afsdb3.test.com","record_type": "AFSDB","subfield_values": [{"field_type": "S","field_value": "10","include_length": "NONE"},{"field_type": "N","field_value": "www.exmple3000.com","include_length": "NONE"}],"view": "default","extattrs": { "IB Discovery Owned": {"value": "100"},"Site": { "value": "200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
                print("Successfully created UNKNOWN AFSDB record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding UNKNOWN RP record")
                print("\n============================================\n")
		data= {"name": "rp3.test.com","record_type": "RP","subfield_values": [{"field_type": "N","field_value": "www.example.com","include_length": "NONE"},{"field_type": "N","field_value": "abc.example.com","include_length": "NONE"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
                print("Successfully created UNKNOWN RP record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding UNKNOWN APL record")
                print("\n============================================\n")
		data={"name": "apl3.test.com","record_type": "APL","subfield_values": [{"field_type": "P","field_value": "1:224.0.0.0/4 2:ff00::/8","include_length": "NONE"}],"view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
                print("Successfully created UNKNOWN APL record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding UNKNOWN DLV record")
                print("\n============================================\n")
		data={"name": "dlv3.test.com","record_type": "DLV","subfield_values": [{"field_type": "B","field_value": "10","include_length": "NONE"},{"field_type": "B","field_value": "11","include_length": "NONE"},{"field_type": "B","field_value": "23","include_length": "NONE"},{"field_type": "X","field_value": "2AF3","include_length": "NONE"}],"view": "default","extattrs": {"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
                print("Successfully created UNKNOWN DLV record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding UNKNOWN SSHFP record")
                print("\n============================================\n")
		data={"name": "sshfp3.test.com","record_type": "SSHFP","subfield_values":[{"field_type": "B","field_value": "1","include_length": "NONE"},{"field_type": "B","field_value": "1","include_length": "NONE"},{"field_type": "X","field_value": "123456789abcdef67890123456789abcdef67890","include_length": "8_BIT"}],"view": "default","extattrs": {"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
                print("Successfully created UNKNOWN SSHFP record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding UNKNOWN CDS record")
                print("\n============================================\n")
		data={"name": "cds3.test.com","record_type": "CDS","subfield_values": [{"field_value":"100","field_type": "S","include_length": "NONE"},{"field_value":"0","field_type": "S","include_length": "NONE"},{"field_value":"200","field_type": "S","include_length": "NONE"},{"field_value":"123456789abcdef67890123456789abcdef67890","field_type": "X","include_length": "8_BIT"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
                print("Successfully created UNKNOWN CDS record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding UNKNOWN CERT record")
                print("\n============================================\n")
		data={"name": "cert3.test.com","record_type": "CERT","subfield_values": [{"field_value": "11083 21041 76 MEdib2NhSU9PaW0xK3FkSHRPU3JEY09zR2lJMk5DY3h1WDIvVHFj","field_type": "P","include_length": "NONE"}],"view":"default","extattrs": {"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
                print("Successfully created UNKNOWN CERT record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding UNKNOWN HINFO record")
                print("\n============================================\n")
		data={"name": "hinfo3.test.com","record_type": "HINFO","subfield_values": [{"field_value": "INTEL","field_type": "T","include_length": "8_BIT"},{"field_value": "WINDOWS","field_type": "T","include_length": "8_BIT"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
                print("Successfully created UNKNOWN HINFO record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding UNKNOWN LOC record")
                print("\n============================================\n")
		data={"name": "loc3.test.com","record_type": "LOC","subfield_values": [{"field_type": "P","field_value": "42 21 54.000 N 71 6 18.000 W -24.00m 30m 100m 0.10m","include_length": "NONE"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
                print("Successfully created UNKNOWN LOC record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding UNKNOWN IPSECKEY record")
                print("\n============================================\n")
		data={"name": "ipseckey3.test.com","record_type": "IPSECKEY","subfield_values": [{"field_value":"10","field_type": "B","include_length": "NONE"},{"field_value":"1","field_type": "S","include_length": "NONE"},{"field_value":"2","field_type": "S","include_length": "NONE"},{"field_value": "1.1.1.1","field_type": "4","include_length": "NONE"},{"field_value": "AQNRU3mG7TVTO2BkR47usntb102uFJtugbo6BSGvgqt4AQ==","field_type": "H","include_length": "8_BIT"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
                print("Successfully created UNKNOWN IPSECKEY record")
                print("\n============================================\n")
                print("Test Case 43 Executuion Completed")


	@pytest.mark.run(order=44)
        def test_044_Validate_ALL_created_records(self):
                print("\n============================================\n")
                print("Validating created A record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:a?name=d.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "d.test.com"','"ipv4addr": "10.0.0.4"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("\n============================================\n")
                print("Validating created AAAA record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa3.test.com&_return_fields=name,view,ipv6addr&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "aaaa3.test.com"','"ipv6addr": "2620:10a:6000:2400::4"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
                print("\n============================================\n")
                print("Validating created CNAMEA record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa3.test.com&_return_fields=name,canonical,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "caa3.test.com"','"canonical": "test3.com"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created DNAME record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:dname?name=dname3.test.com&_return_fields=name,target,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "dname3.test.com"','"target": "www.infoblox3.com"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created MX record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:mx?name=mx3.test.com&_return_fields%2B=preference,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['mx3.test.com','"preference": 10','"view": "default"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("\n============================================\n")
                print("Validating created NAPTR record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:naptr?name=naptr3.test.com&_return_fields=name,order,preference,regexp,replacement,services,view",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "naptr3.test.com"','"order": 10','"preference": 10','"regexp": ""','"replacement": "naptr.com"','"services": "http+E2U"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created PTR record ")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:ptr?name=ptr3.test.com&_return_fields=name,ptrdname&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                result = ['"name": "ptr3.test.com"','"ptrdname": "www.infoblox3.com"']
                for i in result:
                    if i in response:
                        assert True
                    else:
                        assert False
                print(result)
                print("\n============================================\n")
                print("Validating created SRV record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:srv?name=srv3.test.com&_return_fields=name,port,priority,target,view,weight&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "srv3.test.com"','"port": 22','"priority": 0','"target": "test.com"','"view": "default"','"weight": 0']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created TXT record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:txt?name=txt3.test.com&_return_fields=name,text,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "txt3.test.com"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating UNKNOWN AFSDB record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=afsdb3.test.com&_return_fields=name,display_rdata",grid_vip=config.grid_vip)
                print(output)
                data = ['"display_rdata": "10 www.exmple3000.com."','"name": "afsdb3.test.com"']
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN RP A record ")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET', object_type="record:unknown?name=rp3.test.com&_return_fields=name",fields=json.dumps(data))
                print(response)
                data = '"name": "rp3.test.com"'
                if data in response:
                        assert True
                else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN APL record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=apl3.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "apl3.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN DLV record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=dlv3.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "dlv3.test.com"')
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN SSHFP record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=sshfp3.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "sshfp3.test.com"')
                if data in output:
                        #assert True
                        assert False
                else:
                        #assert False
                        assert True
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN CDS record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=cds3.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "cds3.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN CERT record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=cert3.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "cert3.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN HINFO record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=hinfo3.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "hinfo3.test.com"')
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN LOC record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=loc3.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "loc3.test.com"')
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN IPSECKEY record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=ipseckey3.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "ipseckey3.test.com"')
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
                print("Test Case 44 Executuion Completed")

        @pytest.mark.run(order=45)
        def test_045_dig_all_created_records_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["d.test.com A\n","aaaa3.test.com AAAA\n","ptr3.test.com PTR\n","caa3.test.com CNAME\n","dname3.test.com DNAME\n","mx3.test.com MX\n","srv3.test.com SRV\n","naptr3.test.com NAPTR\n","txt3.test.com TXT\n"])
                f.close()
		dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
		print("Test Case 45 Executuion Completed")

        @pytest.mark.run(order=46)
        def test_046_dig_ALL_UNKNOWN_Records_to_get_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all UNKNOWN records to get last queried timestamp")
                print("\n============================================\n")
                dig_cmd = ['dig @'+str(config.grid_ipv6_vip)+' afsdb3.test.com AFSDB','dig @'+str(config.grid_ipv6_vip)+' rp3.test.com RP','dig @'+str(config.grid_ipv6_vip)+' apl3.test.com APL','dig @'+str(config.grid_ipv6_vip)+' dlv3.test.com DLV','dig @'+str(config.grid_ipv6_vip)+' sshfp3.test.com SSHFP','dig @'+str(config.grid_ipv6_vip)+' cds3.test.com TYPE59','dig @'+str(config.grid_ipv6_vip)+' cert3.test.com CERT','dig @'+str(config.grid_ipv6_vip)+' hinfo3.test.com HINFO','dig @'+str(config.grid_ipv6_vip)+' loc3.test.com LOC','dig @'+str(config.grid_ipv6_vip)+' ipseckey3.test.com IPSECKEY']
                f = open(r'response.txt','w');
                for i in dig_cmd:
                        for j in range(1,3000):
                                data = os.popen(i).read()
                                f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 46 Execution Completed")


        @pytest.mark.run(order=47)
        def test_047_Validate_all_created_records_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validate A record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:a?name=d.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
	       	output=convert1(response)
	       	print("\n============================================\n")
	       	print("A record not updated with current grid date")
	       	print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate AAAA record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa3.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("AAAA record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate CNAME record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa3.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("CNAME record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate DNAME record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:dname?name=dname3.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("DNAME record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate PTR record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:ptr?name=ptr3.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("PTR record not updated with current grid date")
		print("\n============================================\n")	
		print("\n")
                print("\n============================================\n")
                print("validate MX record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:mx?name=mx3.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("MX record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate SRV record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:srv?name=srv3.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("SRV record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate NAPTR record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:naptr?name=naptr3.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("NAPTR record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate TXT record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:txt?name=txt3.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("TXT record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN AFSDB record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=afsdb3.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN AFSDB not record updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
		print("validate UNKNOWN RP record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=rp3.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN RP record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
		print("validate UNKNOWN APL record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=apl3.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN APL record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN DLV record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=dlv3.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN DLV record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN SSHFP record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=sshfp3.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN SSHFP record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN CDS record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=cds3.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN CDS record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("validate UNKNOWN CERT record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=cert3.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN CERT record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("validate UNKNOWN HINFO record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=hinfo3.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN HINFO record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("validate UNKNOWN LOC record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=loc3.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN LOC record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("validate UNKNOWN IPSECKEY record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=ipseckey3.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN IPSECKEY record not updated with current grid date")
		print("\n============================================\n")
		print("Test Case 47 Executuion Completed")	




##############################################################################################################################
### Test Cases : Excluding the IPv6 Address from the DENY LIST and allowing client to update the "LAST Queried" time stamp ###
##############################################################################################################################

        @pytest.mark.run(order=48)
        def test_048_Exclude_IPv6_address_from_the_DENY_List(self):
                print("\n============================================\n")
                print("Excluding IPv6 Address from the DENY LIST at grid dns")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v6, "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 48 Execution Completed")
             
	 
        @pytest.mark.run(order=49)
        def test_049_Validate_Excluded_IPv6_Address_in_the_DENY_List(self):
                print("\n============================================\n")
                print("validating excluded IPv6 address in the DENY list")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "'+config.client_v6+'"','"permission": "DENY"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 49 Execution Completed")


##############
## A record ##
##############

        @pytest.mark.run(order=50)
        def test_050_dig_all_created_records_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["d.test.com A\n","aaaa3.test.com AAAA\n","ptr3.test.com PTR\n","caa3.test.com CNAME\n","dname3.test.com DNAME\n","mx3.test.com MX\n","srv3.test.com SRV\n","naptr3.test.com NAPTR\n","txt3.test.com TXT\n"])
                f.close()
		dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 50 Executuion Completed")

        @pytest.mark.run(order=51)
        def test_051_dig_ALL_UNKNOWN_Records_to_get_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all UNKNOWN records to get last queried timestamp")
                print("\n============================================\n")
                dig_cmd = ['dig @'+str(config.grid_ipv6_vip)+' afsdb3.test.com AFSDB','dig @'+str(config.grid_ipv6_vip)+' rp3.test.com RP','dig @'+str(config.grid_ipv6_vip)+' apl3.test.com APL','dig @'+str(config.grid_ipv6_vip)+' dlv3.test.com DLV','dig @'+str(config.grid_ipv6_vip)+' sshfp3.test.com SSHFP','dig @'+str(config.grid_ipv6_vip)+' cds3.test.com TYPE59','dig @'+str(config.grid_ipv6_vip)+' cert3.test.com CERT','dig @'+str(config.grid_ipv6_vip)+' hinfo3.test.com HINFO','dig @'+str(config.grid_ipv6_vip)+' loc3.test.com LOC','dig @'+str(config.grid_ipv6_vip)+' ipseckey3.test.com IPSECKEY']
                f = open(r'response.txt','w');
                for i in dig_cmd:
                        for j in range(1,3000):
                                data = os.popen(i).read()
                                f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 51 Execution Completed")


        @pytest.mark.run(order=52)
        def test_052_Validate_Updated_ALL_records_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:a?name=d.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("A record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated AAAA record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa3.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("AAAA record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated CNAME record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa3.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("CNAME record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated DNAME record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:dname?name=dname3.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("DNAME record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated PTR record last queried timestamp with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:ptr?name=ptr3.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("PTR record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated MX record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:mx?name=mx3.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("MX record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated SRV record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:srv?name=srv3.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("SRV record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated NAPTR record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:naptr?name=naptr3.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("NAPTR record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated TXT record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:txt?name=txt3.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("TXT record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN AFSDB record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=afsdb3.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN AFSDB record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN RP record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=rp3.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN RP record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN APL record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=apl3.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN APL record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN DLV record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=dlv3.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN DLV record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN SSHFP record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=sshfp3.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN SSHFP record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN CDS record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=cds3.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN CDS record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN CERT record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=cert3.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN CERT record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN HINFO record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=hinfo3.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN HINFO record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN LOC record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=loc3.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN LOC record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN IPSECKEY record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=ipseckey3.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN IPSECKEY record updated with current grid date")
                print("\n============================================\n")
		print("Test Case 52 Executuion Completed")

##################################################################################################################
### Test Cases : Adding IPv6 NETWORK to the DENY LIST and Blocking the client from updating the "LAST Queried" ###
##################################################################################################################

        @pytest.mark.run(order=53)
        def test_053_Add_IPv6_NETWORK_to_the_DENY_List_at_grid_dns_level(self):
                print("\n============================================\n")
                print("adding IPv6 network to the DENY LIST")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v6_network+'::/64', "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 53 Execution Completed")
              
        @pytest.mark.run(order=54)
        def test_054_Validate_Added_IPv6_NETWORK_in_the_DENY_List(self):
                print("\n============================================\n")
                print("validating added IPv6 network in the DENY LIST ")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "'+config.client_v6_network+'::/64"','"permission": "ALLOW"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 54 Execution Completed")

	
##############
## A record ##
##############

        @pytest.mark.run(order=55)
        def test_055_Add_ALL_records(self):
		print("\n============================================\n")
                print("Adding A record")
                print("\n============================================\n")
		data = {"ipv4addr": "10.0.0.5","name": "e.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
		print("\n============================================\n")
                print("Successfully created A record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding AAAA record")
                print("\n============================================\n")
		data = {"ipv6addr": "2620:10a:6000:2400::5","name": "aaaa4.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:aaaa",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
                print("Successfully created AAAA record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding CNAME record")
                print("\n============================================\n")
		data = {"canonical": "test4.com","name": "caa4.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:cname",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
		print("\n============================================\n")
                print("Successfully created CNAME record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding DNAME record")
                print("\n============================================\n")
		data = {"name": "dname4.test.com","target": "www.infoblox4.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:dname",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
		print("\n============================================\n")
                print("Successfully created DNAME record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding MX record")
                print("\n============================================\n")
		data = {"mail_exchanger": "test.com","name": "mx4.test.com","preference": 10,"view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:mx",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
		print("\n============================================\n")
                print("Successfully created MX record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding NAPTR record")
                print("\n============================================\n")
		data = {"name": "naptr4.test.com","order": 10,"preference": 10,"regexp": "","replacement": "naptr.com","services": "http+E2U","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:naptr",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
		print("\n============================================\n")
                print("Successfully created NAPTR record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding SRV record")
                print("\n============================================\n")
		data = {"name": "srv4.test.com","port": 22,"priority": 0,"target": "test.com","view": "default","weight": 0}
                response = ib_NIOS.wapi_request('POST', object_type="record:srv",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
		print("\n============================================\n")
                print("Successfully created SRV record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding PTR record")
                print("\n============================================\n")
		data = {"ptrdname": "www.infoblox4.com","name": "ptr4.test.com","view": "default"}
                output = ib_NIOS.wapi_request('POST', object_type="record:ptr",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
		print("\n============================================\n")
                print("Successfully created PTR record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding TXT record")
                print("\n============================================\n")
		data = {"name": "txt4.test.com","text": "txt.com","view": "default"}
                response = ib_NIOS.wapi_request('POST',object_type="record:txt",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
		print("\n============================================\n")
                print("Successfully created TXT record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding UNKNOWN AFSDB record")
                print("\n============================================\n")
		data={"name": "afsdb4.test.com","record_type": "AFSDB","subfield_values": [{"field_type": "S","field_value": "10","include_length": "NONE"},{"field_type": "N","field_value": "www.exmple3000.com","include_length": "NONE"}],"view": "default","extattrs": { "IB Discovery Owned": {"value": "100"},"Site": { "value": "200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
                print("Successfully created UNKNOWN AFSDB record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding UNKNOWN RP record")
                print("\n============================================\n")
		data= {"name": "rp4.test.com","record_type": "RP","subfield_values": [{"field_type": "N","field_value": "www.example.com","include_length": "NONE"},{"field_type": "N","field_value": "abc.example.com","include_length": "NONE"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
                print("Successfully created UNKNOWN RP record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding UNKNOWN APL record")
                print("\n============================================\n")
		data={"name": "apl4.test.com","record_type": "APL","subfield_values": [{"field_type": "P","field_value": "1:224.0.0.0/4 2:ff00::/8","include_length": "NONE"}],"view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
                print("Successfully created UNKNOWN APL record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding UNKNOWN DLV record")
                print("\n============================================\n")
		data={"name": "dlv4.test.com","record_type": "DLV","subfield_values": [{"field_type": "B","field_value": "10","include_length": "NONE"},{"field_type": "B","field_value": "11","include_length": "NONE"},{"field_type": "B","field_value": "23","include_length": "NONE"},{"field_type": "X","field_value": "2AF3","include_length": "NONE"}],"view": "default","extattrs": {"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
                print("Successfully created UNKNOWN DLV record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding UNKNOWN SSHFP record")
                print("\n============================================\n")
		data={"name": "sshfp4.test.com","record_type": "SSHFP","subfield_values":[{"field_type": "B","field_value": "1","include_length": "NONE"},{"field_type": "B","field_value": "1","include_length": "NONE"},{"field_type": "X","field_value": "123456789abcdef67890123456789abcdef67890","include_length": "8_BIT"}],"view": "default","extattrs": {"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
                print("Successfully created UNKNOWN SSHFP record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding UNKNOWN CDS record")
                print("\n============================================\n")
		data={"name": "cds4.test.com","record_type": "CDS","subfield_values": [{"field_value":"100","field_type": "S","include_length": "NONE"},{"field_value":"0","field_type": "S","include_length": "NONE"},{"field_value":"200","field_type": "S","include_length": "NONE"},{"field_value":"123456789abcdef67890123456789abcdef67890","field_type": "X","include_length": "8_BIT"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
                print("Successfully created UNKNOWN CDS record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding UNKNOWN CERT record")
                print("\n============================================\n")
		data={"name": "cert4.test.com","record_type": "CERT","subfield_values": [{"field_value": "11083 21041 76 MEdib2NhSU9PaW0xK3FkSHRPU3JEY09zR2lJMk5DY3h1WDIvVHFj","field_type": "P","include_length": "NONE"}],"view":"default","extattrs": {"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
                print("Successfully created UNKNOWN CERT record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding UNKNOWN HINFO record")
                print("\n============================================\n")
		data={"name": "hinfo4.test.com","record_type": "HINFO","subfield_values": [{"field_value": "INTEL","field_type": "T","include_length": "8_BIT"},{"field_value": "WINDOWS","field_type": "T","include_length": "8_BIT"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
                print("Successfully created UNKNOWN HINFO record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding UNKNOWN LOC record")
                print("\n============================================\n")
		data={"name": "loc4.test.com","record_type": "LOC","subfield_values": [{"field_type": "P","field_value": "42 21 54.000 N 71 6 18.000 W -24.00m 30m 100m 0.10m","include_length": "NONE"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
                print("Successfully created UNKNOWN LOC record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Adding UNKNOWN IPSECKEY record")
                print("\n============================================\n")
		data={"name": "ipseckey4.test.com","record_type": "IPSECKEY","subfield_values": [{"field_value":"10","field_type": "B","include_length": "NONE"},{"field_value":"1","field_type": "S","include_length": "NONE"},{"field_value":"2","field_type": "S","include_length": "NONE"},{"field_value": "1.1.1.1","field_type": "4","include_length": "NONE"},{"field_value": "AQNRU3mG7TVTO2BkR47usntb102uFJtugbo6BSGvgqt4AQ==","field_type": "H","include_length": "8_BIT"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
                print("Successfully created UNKNOWN IPSECKEY record")
                print("\n============================================\n")
                print("Test Case 55 Executuion Completed")

        @pytest.mark.run(order=56)
        def test_056_Validate_ALL_created_records(self):
                print("\n============================================\n")
                print("Validating created A record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:a?name=e.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "e.test.com"','"ipv4addr": "10.0.0.5"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("\n============================================\n")
                print("Validating created AAAA record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa4.test.com&_return_fields=name,view,ipv6addr&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "aaaa4.test.com"','"ipv6addr": "2620:10a:6000:2400::5"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
                print("\n============================================\n")
                print("Validating created CNAME record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa4.test.com&_return_fields=name,canonical,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "caa4.test.com"','"canonical": "test4.com"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created DNAME record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:dname?name=dname4.test.com&_return_fields=name,target,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "dname4.test.com"','"target": "www.infoblox4.com"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created MX record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:mx?name=mx4.test.com&_return_fields%2B=preference,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['mx4.test.com','"preference": 10','"view": "default"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("\n============================================\n")
                print("Validating created NAPTR record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:naptr?name=naptr4.test.com&_return_fields=name,order,preference,regexp,replacement,services,view",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "naptr4.test.com"','"order": 10','"preference": 10','"regexp": ""','"replacement": "naptr.com"','"services": "http+E2U"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created PTR record ")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:ptr?name=ptr4.test.com&_return_fields=name,ptrdname&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                result = ['"name": "ptr4.test.com"','"ptrdname": "www.infoblox4.com"']
                for i in result:
                    if i in response:
                        assert True
                    else:
                        assert False
                print(result)
                print("\n============================================\n")
                print("Validating created SRV record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:srv?name=srv4.test.com&_return_fields=name,port,priority,target,view,weight&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "srv4.test.com"','"port": 22','"priority": 0','"target": "test.com"','"view": "default"','"weight": 0']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created TXT record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:txt?name=txt4.test.com&_return_fields=name,text,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "txt4.test.com"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating UNKNOWN AFSDB record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=afsdb4.test.com&_return_fields=name,display_rdata",grid_vip=config.grid_vip)
                print(output)
                data = ['"display_rdata": "10 www.exmple3000.com."','"name": "afsdb4.test.com"']
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN RP A record ")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET', object_type="record:unknown?name=rp4.test.com&_return_fields=name",fields=json.dumps(data))
                print(response)
                data = '"name": "rp4.test.com"'
                if data in response:
                        assert True
                else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN APL record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=apl4.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "apl4.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN DLV record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=dlv4.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "dlv4.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN SSHFP record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=sshfp4.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "sshfp4.test.com"')
                if data in output:
                        #assert True
						assert False
                else:
                        #assert False
						assert True
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN CDS record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=cds4.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "cds4.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN CERT record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=cert4.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "cert4.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN HINFO record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=hinfo4.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "hinfo4.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN LOC record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=loc4.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "loc4.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN IPSECKEY record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=ipseckey4.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "ipseckey4.test.com"')
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
                print("Test Case 56 Executuion Completed")

        @pytest.mark.run(order=57)
        def test_057_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all records to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["e.test.com A\n","aaaa4.test.com AAAA\n","ptr4.test.com PTR\n","caa4.test.com CNAME\n","dname4.test.com DNAME\n","mx4.test.com MX\n","srv4.test.com SRV\n","naptr4.test.com NAPTR\n","txt4.test.com TXT\n"])
                f.close()
		dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 57 Execution Completed")

        @pytest.mark.run(order=58)
        def test_058_dig_ALL_UNKNOWN_Records_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all UNKNOWN records to get last queried timestamp")
                print("\n============================================\n")
		dig_cmd = ['dig @'+str(config.grid_ipv6_vip)+' afsdb4.test.com AFSDB','dig @'+str(config.grid_ipv6_vip)+' rp4.test.com RP','dig @'+str(config.grid_ipv6_vip)+' apl4.test.com APL','dig @'+str(config.grid_ipv6_vip)+' dlv4.test.com DLV','dig @'+str(config.grid_ipv6_vip)+' sshfp4.test.com SSHFP','dig @'+str(config.grid_ipv6_vip)+' cds4.test.com CDS','dig @'+str(config.grid_ipv6_vip)+' cert4.test.com CERT','dig @'+str(config.grid_ipv6_vip)+' hinfo4.test.com HINFO','dig @'+str(config.grid_ipv6_vip)+' loc4.test.com LOC','dig @'+str(config.grid_ipv6_vip)+' ipseckey4.test.com IPSECKEY']
		f = open(r'response.txt','w');
		for i in dig_cmd:
                	for j in range(1,3000):
                       		data = os.popen(i).read()
                      		f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 58 Execution Completed")

        @pytest.mark.run(order=59)
        def test_059_Validate_all_created_records_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validate A record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:a?name=e.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
	       	output=convert1(response)
	       	print("\n============================================\n")
	       	print("A record not updated with current grid date")
	       	print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate AAAA record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa4.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("AAAA record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate CNAME record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa4.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("CNAME record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate DNAME record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:dname?name=dname4.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("DNAME record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate PTR record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:ptr?name=ptr4.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("PTR record not updated with current grid date")
		print("\n============================================\n")	
		print("\n")
                print("\n============================================\n")
                print("validate MX record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:mx?name=mx4.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("MX record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate SRV record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:srv?name=srv4.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("SRV record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate NAPTR record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:naptr?name=naptr4.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("NAPTR record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate TXT record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:txt?name=txt4.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("TXT record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN AFSDB record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=afsdb4.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN AFSDB not record updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
		print("validate UNKNOWN RP record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=rp4.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN RP record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
		print("validate UNKNOWN APL record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=apl4.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN APL record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN DLV record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=dlv4.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN DLV record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN SSHFP record last queried timestamp should not update with grid current date")
		print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=sshfp4.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN SSHFP record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN CDS record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=cds4.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN CDS record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("validate UNKNOWN CERT record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=cert4.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN CERT record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("validate UNKNOWN HINFO record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=hinfo4.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN HINFO record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("validate UNKNOWN LOC record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=loc4.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN LOC record not updated with current grid date")
		print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("validate UNKNOWN IPSECKEY record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=ipseckey4.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
		print("UNKNOWN IPSECKEY record not updated with current grid date")
		print("\n============================================\n")
		print("Test Case 59 Executuion Completed")			


##############################################################################################################################
### Test Cases : Excluding the IPv6 NETWORK from the DENY LIST and allowing client to update the "LAST Queried" time stamp ###
##############################################################################################################################

        @pytest.mark.run(order=60)
        def test_060_Exclude_IPv6_NETWORK_from_DENY_List(self):
                print("\n============================================\n")
                print("Excluding IPv6 Network from DENY LIST")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v6_network+'::', "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 60 Execution Completed")
               
	 
        @pytest.mark.run(order=61)
        def test_061_Validate_Added_IPv6_NETWORK_in_the_DENY_List(self):
                print("\n============================================\n")
                print("validating added IPv6 Network in the DENY LIST")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "'+config.client_v6_network+'::"','"permission": "DENY"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 61 Execution Completed")


##############
## A record ##
##############

        @pytest.mark.run(order=62)
        def test_062_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all records to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["e.test.com A\n","aaaa4.test.com AAAA\n","ptr4.test.com PTR\n","caa4.test.com CNAME\n","dname4.test.com DNAME\n","mx4.test.com MX\n","srv4.test.com SRV\n","naptr4.test.com NAPTR\n","txt4.test.com TXT\n"])
                f.close()
		dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 62 Execution Completed")

        @pytest.mark.run(order=63)
        def test_063_dig_ALL_UNKNOWN_Records_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all UNKNOWN records to get last queried timestamp")
                print("\n============================================\n")
                dig_cmd = ['dig @'+str(config.grid_ipv6_vip)+' afsdb4.test.com AFSDB','dig @'+str(config.grid_ipv6_vip)+' rp4.test.com RP','dig @'+str(config.grid_ipv6_vip)+' apl4.test.com APL','dig @'+str(config.grid_ipv6_vip)+' dlv4.test.com DLV','dig @'+str(config.grid_ipv6_vip)+' sshfp4.test.com SSHFP','dig @'+str(config.grid_ipv6_vip)+' cds4.test.com CDS','dig @'+str(config.grid_ipv6_vip)+' cert4.test.com CERT','dig @'+str(config.grid_ipv6_vip)+' hinfo4.test.com HINFO','dig @'+str(config.grid_ipv6_vip)+' loc4.test.com LOC','dig @'+str(config.grid_ipv6_vip)+' ipseckey4.test.com IPSECKEY']
                f = open(r'response.txt','w');
                for i in dig_cmd:
                        for j in range(1,3000):
                                data = os.popen(i).read()
                                f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 63 Execution Completed")


        @pytest.mark.run(order=64)
        def test_064_Validate_Updated_ALL_records_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:a?name=e.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("A record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated AAAA record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa4.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("AAAA record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated CNAME record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa4.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("CNAME record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated DNAME record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:dname?name=dname4.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("DNAME record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated PTR record last queried timestamp with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:ptr?name=ptr4.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("PTR record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated MX record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:mx?name=mx4.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("MX record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated SRV record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:srv?name=srv4.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("SRV record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated NAPTR record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:naptr?name=naptr4.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("NAPTR record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated TXT record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:txt?name=txt4.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("TXT record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN AFSDB record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=afsdb4.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN AFSDB record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN RP record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=rp4.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN RP record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN APL record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=apl4.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN APL record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN DLV record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=dlv4.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN DLV record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN SSHFP record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=sshfp4.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN SSHFP record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN CDS record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=cds4.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN CDS record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN CERT record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=cert4.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN CERT record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN HINFO record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=hinfo4.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN HINFO record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN LOC record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=loc4.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN LOC record updated with current grid date")
                print("\n============================================\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN IPSECKEY record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=ipseckey4.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN IPSECKEY record updated with current grid date")
                print("\n============================================\n")
		print("Test Case 64 Execution Completed")




##################################################################################################################
### Test Cases : Adding "ANY Address" to the DENY LIST and Blocking the client from updating the "LAST Queried" ###
##################################################################################################################

        @pytest.mark.run(order=65)
        def test_065_Add_ANY_Address_to_the_DENY_List(self):
                print("\n============================================\n")
                print("Adding ANY address to the DENY LIST")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl": [{"address": "Any","permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 65 Execution Completed")
                
        @pytest.mark.run(order=66)
        def test_066_Validate_Added_ANY_address_in_the_DENY_List(self):
                print("\n============================================\n")
                print("validating ANY address in the DENY LIST")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "Any"','"permission": "ALLOW"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 66 Execution Completed")


##############
## A record ##
##############



        @pytest.mark.run(order=67)
        def test_067_Add_ALL_records(self):
                print("\n============================================\n")
                print("Adding A record")
                print("\n============================================\n")
		data = {"ipv4addr": "10.0.0.6","name": "f.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created A record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding AAAA record")
                print("\n============================================\n")
		data = {"ipv6addr": "2620:10a:6000:2400::6","name": "aaaa5.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:aaaa",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created AAAA record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding CNAME record")
                print("\n============================================\n")
		data = {"canonical": "test5.com","name": "caa5.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:cname",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created CNAME record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding DNAME record")
                print("\n============================================\n")
		data = {"name": "dname5.test.com","target": "www.infoblox5.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:dname",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created DNAME record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding MX record")
                print("\n============================================\n")
		data = {"mail_exchanger": "test.com","name": "mx5.test.com","preference": 10,"view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:mx",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created MX record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding NAPTR record")
                print("\n============================================\n")
		data = {"name": "naptr5.test.com","order": 10,"preference": 10,"regexp": "","replacement": "naptr.com","services": "http+E2U","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:naptr",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created NAPTR record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding SRV record")
                print("\n============================================\n")
		data = {"name": "srv5.test.com","port": 22,"priority": 0,"target": "test.com","view": "default","weight": 0}
                response = ib_NIOS.wapi_request('POST', object_type="record:srv",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created SRV record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding PTR record")
                print("\n============================================\n")
		data = {"ptrdname": "www.infoblox5.com","name": "ptr5.test.com","view": "default"}
                output = ib_NIOS.wapi_request('POST', object_type="record:ptr",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                print("\n============================================\n")
                print("Successfully created PTR record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding TXT record")
                print("\n============================================\n")
		data = {"name": "txt5.test.com","text": "txt.com","view": "default"}
                response = ib_NIOS.wapi_request('POST',object_type="record:txt",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created TXT record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding UNKNOWN AFSDB record")
                print("\n============================================\n")
		data={"name": "afsdb5.test.com","record_type": "AFSDB","subfield_values": [{"field_type": "S","field_value": "10","include_length": "NONE"},{"field_type": "N","field_value": "www.exmple3000.com","include_length": "NONE"}],"view": "default","extattrs": { "IB Discovery Owned": {"value": "100"},"Site": { "value": "200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN AFSDB record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding UNKNOWN RP record")
                print("\n============================================\n")
		data= {"name": "rp5.test.com","record_type": "RP","subfield_values": [{"field_type": "N","field_value": "www.example.com","include_length": "NONE"},{"field_type": "N","field_value": "abc.example.com","include_length": "NONE"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN RP record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding UNKNOWN APL record")
                print("\n============================================\n")
		data={"name": "apl5.test.com","record_type": "APL","subfield_values": [{"field_type": "P","field_value": "1:224.0.0.0/4 2:ff00::/8","include_length": "NONE"}],"view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN APL record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding UNKNOWN DLV record")
                print("\n============================================\n")
		data={"name": "dlv5.test.com","record_type": "DLV","subfield_values": [{"field_type": "B","field_value": "10","include_length": "NONE"},{"field_type": "B","field_value": "11","include_length": "NONE"},{"field_type": "B","field_value": "23","include_length": "NONE"},{"field_type": "X","field_value": "2AF3","include_length": "NONE"}],"view": "default","extattrs": {"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN DLV record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding UNKNOWN SSHFP record")
                print("\n============================================\n")
		data={"name": "sshfp5.test.com","record_type": "SSHFP","subfield_values":[{"field_type": "B","field_value": "1","include_length": "NONE"},{"field_type": "B","field_value": "1","include_length": "NONE"},{"field_type": "X","field_value": "123456789abcdef67890123456789abcdef67890","include_length": "8_BIT"}],"view": "default","extattrs": {"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN SSHFP record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding UNKNOWN CDS record")
                print("\n============================================\n")
		data={"name": "cds5.test.com","record_type": "CDS","subfield_values": [{"field_value":"100","field_type": "S","include_length": "NONE"},{"field_value":"0","field_type": "S","include_length": "NONE"},{"field_value":"200","field_type": "S","include_length": "NONE"},{"field_value":"123456789abcdef67890123456789abcdef67890","field_type": "X","include_length": "8_BIT"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN CDS record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding UNKNOWN CERT record")
                print("\n============================================\n")
		data={"name": "cert5.test.com","record_type": "CERT","subfield_values": [{"field_value": "11083 21041 76 MEdib2NhSU9PaW0xK3FkSHRPU3JEY09zR2lJMk5DY3h1WDIvVHFj","field_type": "P","include_length": "NONE"}],"view":"default","extattrs": {"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN CERT record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding UNKNOWN HINFO record")
                print("\n============================================\n")
		data={"name": "hinfo5.test.com","record_type": "HINFO","subfield_values": [{"field_value": "INTEL","field_type": "T","include_length": "8_BIT"},{"field_value": "WINDOWS","field_type": "T","include_length": "8_BIT"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN HINFO record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding UNKNOWN LOC record")
                print("\n============================================\n")
		data={"name": "loc5.test.com","record_type": "LOC","subfield_values": [{"field_type": "P","field_value": "42 21 54.000 N 71 6 18.000 W -24.00m 30m 100m 0.10m","include_length": "NONE"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN LOC record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding UNKNOWN IPSECKEY record")
                print("\n============================================\n")
		data={"name": "ipseckey5.test.com","record_type": "IPSECKEY","subfield_values": [{"field_value":"10","field_type": "B","include_length": "NONE"},{"field_value":"1","field_type": "S","include_length": "NONE"},{"field_value":"2","field_type": "S","include_length": "NONE"},{"field_value": "1.1.1.1","field_type": "4","include_length": "NONE"},{"field_value": "AQNRU3mG7TVTO2BkR47usntb102uFJtugbo6BSGvgqt4AQ==","field_type": "H","include_length": "8_BIT"}],"view": "default","extattrs":{"IB Discovery Owned":{"value":"100"},"Site":{"value":"200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN IPSECKEY record")
                print("\n============================================\n")
                print("Test Case 67 Executuion Completed")

        @pytest.mark.run(order=68)
        def test_068_Validate_ALL_created_records(self):
                print("\n============================================\n")
                print("Validating created A record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:a?name=f.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "f.test.com"','"ipv4addr": "10.0.0.6"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("\n============================================\n")
                print("Validating created AAAA record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa5.test.com&_return_fields=name,view,ipv6addr&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "aaaa5.test.com"','"ipv6addr": "2620:10a:6000:2400::6"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
                print("\n============================================\n")
                print("Validating created CNAME record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa5.test.com&_return_fields=name,canonical,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "caa5.test.com"','"canonical": "test5.com"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created DNAME record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:dname?name=dname5.test.com&_return_fields=name,target,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "dname5.test.com"','"target": "www.infoblox5.com"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created MX record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:mx?name=mx5.test.com&_return_fields%2B=preference,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['mx5.test.com','"preference": 10','"view": "default"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("\n============================================\n")
                print("Validating created NAPTR record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:naptr?name=naptr5.test.com&_return_fields=name,order,preference,regexp,replacement,services,view",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "naptr5.test.com"','"order": 10','"preference": 10','"regexp": ""','"replacement": "naptr.com"','"services": "http+E2U"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created PTR record ")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:ptr?name=ptr5.test.com&_return_fields=name,ptrdname&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                result = ['"name": "ptr5.test.com"','"ptrdname": "www.infoblox5.com"']
                for i in result:
                            if i in response:
                                assert True
                            else:
                                assert False
                print(result)
                print("\n============================================\n")
                print("Validating created SRV record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:srv?name=srv5.test.com&_return_fields=name,port,priority,target,view,weight&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "srv5.test.com"','"port": 22','"priority": 0','"target": "test.com"','"view": "default"','"weight": 0']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created TXT record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:txt?name=txt5.test.com&_return_fields=name,text,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "txt5.test.com"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating UNKNOWN AFSDB record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=afsdb5.test.com&_return_fields=name,display_rdata",grid_vip=config.grid_vip)
                print(output)
                data = ['"display_rdata": "10 www.exmple3000.com."','"name": "afsdb5.test.com"']
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN RP A record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=rp5.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = '"name": "rp5.test.com"'
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN APL record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=apl5.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "apl5.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN DLV record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=dlv5.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "dlv5.test.com"')
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN SSHFP record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=sshfp5.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "sshfp5.test.com"')
                if data in output:
                        #assert True
						assert False
                else:
                        #assert False
						assert True
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN CDS record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=cds5.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "cds5.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN CERT record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=cert5.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "cert5.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN HINFO record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=hinfo5.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "hinfo5.test.com"')
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN LOC record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=loc5.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "loc5.test.com"')
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Validating UNKNOWN IPSECKEY record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=ipseckey5.test.com&_return_fields=name",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "ipseckey5.test.com"')
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
                print("Test Case 68 Executuion Completed")



        @pytest.mark.run(order=69)
        def test_069_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all records to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["f.test.com A\n","aaaa5.test.com AAAA\n","ptr5.test.com PTR\n","caa5.test.com CNAME\n","dname5.test.com DNAME\n","mx5.test.com MX""mx5.test.com MX\n","srv5.test.com SRV\n","naptr5.test.com NAPTR\n","txt5.test.com TXT\n"])
                f.close()
                digv4 = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
		print(digv4)
		digv6 = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(digv6)
                cmd1 = os.system(digv4)
		cmd2 = os.system(digv6)
                print("Test Case 69 Execution Completed")

        @pytest.mark.run(order=70)
        def test_070_dig_ALL_UNKNOWN_Records_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all UNKNOWN records to get last queried timestamp")
                print("\n============================================\n")
                dig_cmd = ['dig @'+str(config.grid_vip)+' afsdb5.test.com AFSDB','dig @'+str(config.grid_vip)+' rp5.test.com RP','dig @'+str(config.grid_vip)+' apl5.test.com APL','dig @'+str(config.grid_vip)+' dlv5.test.com DLV','dig @'+str(config.grid_vip)+' sshfp5.test.com SSHFP','dig @'+str(config.grid_vip)+' cds5.test.com CDS','dig @'+str(config.grid_vip)+' cert5.test.com CERT''dig @'+str(config.grid_vip)+' hinfo5.test.com HINFO','dig @'+str(config.grid_vip)+' loc5.test.com LOC','dig @'+str(config.grid_vip)+' ipseckey5.test.com IPSECKEY']
                f = open(r'response.txt','w');
                for i in dig_cmd:
                        for j in range(1,3000):
                                data = os.popen(i).read()
                                f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 70 Execution Completed")

        @pytest.mark.run(order=71)
        def test_071_dig_ALL_UNKNOWN_Records_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all UNKNOWN records to get last queried timestamp")
                print("\n============================================\n")
                dig_cmd = ['dig @'+str(config.grid_ipv6_vip)+' afsdb5.test.com AFSDB','dig @'+str(config.grid_vip)+' rp5.test.com RP','dig @'+str(config.grid_ipv6_vip)+' apl5.test.com APL','dig @'+str(config.grid_ipv6_vip)+' dlv5.test.com DLV','dig @'+str(config.grid_ipv6_vip)+' sshfp5.test.com SSHFP','dig @'+str(config.grid_ipv6_vip)+' cds5.test.com CDS','dig @'+str(config.grid_ipv6_vip)+' cert5.test.com CERT','dig @'+str(config.grid_ipv6_vip)+' hinfo5.test.com HINFO','dig @'+str(config.grid_ipv6_vip)+' loc5.test.com LOC','dig @'+str(config.grid_ipv6_vip)+' ipseckey5.test.com IPSECKEY']
                f = open(r'response.txt','w');
                for i in dig_cmd:
                        for j in range(1,3000):
                                data = os.popen(i).read()
                                f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 71 Execution Completed")


        @pytest.mark.run(order=72)
        def test_072_Validate_all_created_records_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validate A record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:a?name=f.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("A record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate AAAA record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa5.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("AAAA record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate CNAME record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa5.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("CNAME record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate DNAME record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:dname?name=dname5.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("DNAME record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate PTR record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:ptr?name=ptr5.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("PTR record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate MX record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:mx?name=mx5.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("MX record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate SRV record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:srv?name=srv5.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("SRV record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate NAPTR record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:naptr?name=naptr5.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("NAPTR record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate TXT record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:txt?name=txt5.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("TXT record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN AFSDB record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=afsdb5.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("UNKNOWN AFSDB not record updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN RP record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=rp5.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("UNKNOWN RP record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN APL record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=apl5.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("UNKNOWN APL record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN DLV record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=dlv5.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("UNKNOWN DLV record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN SSHFP record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=sshfp5.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("UNKNOWN SSHFP record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN CDS record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=cds5.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("UNKNOWN CDS record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN CERT record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=cert5.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("UNKNOWN CERT record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN HINFO record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=hinfo5.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("UNKNOWN HINFO record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN LOC record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=loc5.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("UNKNOWN LOC record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN IPSECKEY record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=ipseckey5.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("UNKNOWN IPSECKEY record not updated with current grid date")
                print("\n============================================\n")
		print("Test Case 72 Execution Completed")


##############################################################################################################################
### Test Cases : Excluding "ANY ADDRESS" from the DENY LIST and allowing client to update the "LAST Queried" time stamp ###
##############################################################################################################################

        @pytest.mark.run(order=73)
        def test_073_Exclude_ANY_Address_from_DENY_List(self):
                print("\n============================================\n")
                print("Excluding ANY address from the DENY LIST")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl": [{"address": "Any","permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 73 Execution Completed")
                
        @pytest.mark.run(order=74)
        def test_074_Validate_Added_ANY_Address_in_the_DENY_List(self):
                print("\n============================================\n")
                print("validating ANY address in DENY LIST")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "Any"','"permission": "DENY"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 74 Execution Completed")


##############
## A record ##
##############



        @pytest.mark.run(order=75)
        def test_075_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all records to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["f.test.com A\n","aaaa5.test.com AAAA\n","ptr5.test.com PTR\n","caa5.test.com CNAME\n","dname5.test.com DNAME\n","mx5.test.com MX\n","srv5.test.com SRV\n","naptr5.test.com NAPTR\n","txt5.test.com TXT\n"])
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 75 Execution Completed")


        @pytest.mark.run(order=76)
        def test_076_dig_ALL_UNKNOWN_Records_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all UNKNOWN records to get last queried timestamp")
                print("\n============================================\n")
                dig_cmd = ['dig @'+str(config.grid_ipv6_vip)+' afsdb5.test.com AFSDB','dig @'+str(config.grid_vip)+' rp5.test.com RP','dig @'+str(config.grid_ipv6_vip)+' apl5.test.com APL','dig @'+str(config.grid_ipv6_vip)+' dlv5.test.com DLV','dig @'+str(config.grid_ipv6_vip)+' sshfp5.test.com SSHFP','dig @'+str(config.grid_ipv6_vip)+' cds5.test.com CDS','dig @'+str(config.grid_ipv6_vip)+' cert5.test.com CERT','dig @'+str(config.grid_ipv6_vip)+' hinfo5.test.com HINFO','dig @'+str(config.grid_ipv6_vip)+' loc5.test.com LOC','dig @'+str(config.grid_ipv6_vip)+' ipseckey5.test.com IPSECKEY']
                f = open(r'response.txt','w');
                for i in dig_cmd:
                        for j in range(1,3000):
                                data = os.popen(i).read()
                                f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 76 Execution Completed")


        @pytest.mark.run(order=77)
        def test_077_Validate_Updated_ALL_records_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:a?name=f.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("A record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated AAAA record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa5.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("AAAA record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated CNAME record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa5.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("CNAME record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated DNAME record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:dname?name=dname5.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("DNAME record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated PTR record last queried timestamp with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:ptr?name=ptr5.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("PTR record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated MX record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:mx?name=mx5.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("MX record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated SRV record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:srv?name=srv5.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("SRV record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated NAPTR record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:naptr?name=naptr5.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("NAPTR record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated TXT record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:txt?name=txt5.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("TXT record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN AFSDB record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=afsdb5.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN AFSDB record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN RP record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=rp5.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN RP record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN APL record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=apl5.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN APL record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN DLV record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=dlv5.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN DLV record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN SSHFP record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=sshfp5.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN SSHFP record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN CDS record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=cds5.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN CDS record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN CERT record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=cert5.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN CERT record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN HINFO record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=hinfo5.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN HINFO record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN LOC record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=loc5.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN LOC record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN IPSECKEY record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=ipseckey5.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN IPSECKEY record updated with current grid date")
                print("\n============================================\n")
		print("Test Case 77 Execution Completed")

###############################################
####### Named ACLs Scenarios at grid dns ######
###############################################

#########################################
### IPv4 Address with Allow permission ##
#########################################

        @pytest.mark.run(order=78)
        def test_078_Add_IPv4_Address_ACL_with_Alow_Permission_in_Named_ACLs(self):
                print("\n============================================\n")
                print("Adding IPv4 Named ACL with Allow Permission")
                print("\n============================================\n")
                data = {"name": "test","access_list": [{"_struct": "addressac","address": config.client_v4,"permission": "ALLOW"}]}
                response = ib_NIOS.wapi_request('POST', object_type="namedacl",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 78 Executuion Completed")

        @pytest.mark.run(order=79)
        def test_079_Validate_Created_IPv4_Address_Named_ACL(self):
                print("\n============================================\n")
                print("Validating added ipv4 named acl ")
                print("\n============================================\n")
                data = ('"name": "test"','"_struct": "addressac"','"address": "'+config.client_v4+'"','"permission": "ALLOW"')
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                for i in data:
                    if i in response:
                        assert True
                    else:
                        assert False
                print(data)
                print("Test Case 79 Executuion Completed")

        @pytest.mark.run(order=80)
        def test_080_Add_Created_IPv4_Address_Named_ACL_at_Grid_DNS_Scavenging(self):
                print("\n============================================\n")
                print("adding created ipv4 namedacl at grid dns")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test",grid_vip=config.grid_vip)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                data={"last_queried_acl": [{"_ref": ref}]}
                grid_dns = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                grid_dns=json.loads(grid_dns)[0]['_ref']
                grid_dns=eval(json.dumps(grid_dns))
                print(grid_dns)
                output = ib_NIOS.wapi_request('PUT',ref=grid_dns,fields=json.dumps(data))
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("\nTest Case 80 Execution Completed")

        @pytest.mark.run(order=81)
        def test_081_Validate_Added_Named_ACL_at_Grid_DNS_properties(self):
                print("\n============================================\n")
                print("validating added named acl at grid dns properties")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type='grid:dns?_return_fields=last_queried_acl',grid_vip=config.grid_vip)
                print(response)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test",grid_vip=config.grid_vip)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                if ref in response:
                    assert True
                else:
                    assert False
                print(ref)
                print("\nTest Case 81 Execution Completed")


##############
## A record ##
##############

        @pytest.mark.run(order=82)
        def test_082_Add_ALL_records(self):
                print("\n============================================\n")
                print("Adding A record")
                print("\n============================================\n")
		data = {"ipv4addr": "10.0.0.7","name": "g.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created A record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding AAAA record")
                print("\n============================================\n")
		data = {"ipv6addr": "2620:10a:6000:2400::7","name": "aaaa6.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:aaaa",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created AAAA record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding CNAME record")
                print("\n============================================\n")
		data = {"canonical": "test6.com","name": "caa6.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:cname",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created CNAME record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding DNAME record")
                print("\n============================================\n")
		data = {"name": "dname6.test.com","target": "www.infoblox6.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:dname",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created DNAME record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding MX record")
                print("\n============================================\n")
		data = {"mail_exchanger": "test.com","name": "mx6.test.com","preference": 10,"view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:mx",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created MX record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding NAPTR record")
                print("\n============================================\n")
		data = {"name": "naptr6.test.com","order": 10,"preference": 10,"regexp": "","replacement": "naptr.com","services": "http+E2U","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:naptr",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created NAPTR record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding SRV record")
                print("\n============================================\n")
		data = {"name": "srv6.test.com","port": 22,"priority": 0,"target": "test.com","view": "default","weight": 0}
                response = ib_NIOS.wapi_request('POST', object_type="record:srv",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created SRV record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding PTR record")
                print("\n============================================\n")
		data = {"ptrdname": "www.infoblox6.com","name": "ptr6.test.com","view": "default"}
                output = ib_NIOS.wapi_request('POST', object_type="record:ptr",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                print("\n============================================\n")
                print("Successfully created PTR record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding TXT record")
                print("\n============================================\n")
		data = {"name": "txt6.test.com","text": "txt.com","view": "default"}
                response = ib_NIOS.wapi_request('POST',object_type="record:txt",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created TXT record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding UNKNOWN AFSDB record")
                print("\n============================================\n")
		data={"name": "afsdb6.test.com","record_type": "AFSDB","subfield_values": [{"field_type": "S","field_value": "10","include_length": "NONE"},{"field_type": "N","field_value": "www.exmple3000.com","include_length": "NONE"}],"view": "default","extattrs": { "IB Discovery Owned": {"value": "100"},"Site": { "value": "200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN AFSDB record")
                print("\n============================================\n")
		print("Test Case 82 Executuion Completed")

        @pytest.mark.run(order=83)
        def test_083_Validate_ALL_created_records(self):
                print("\n============================================\n")
                print("Validating created A record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:a?name=g.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "g.test.com"','"ipv4addr": "10.0.0.7"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("\n============================================\n")
                print("Validating created AAAA record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa6.test.com&_return_fields=name,view,ipv6addr&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "aaaa6.test.com"','"ipv6addr": "2620:10a:6000:2400::7"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
                print("\n============================================\n")
                print("Validating created CNAME record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa6.test.com&_return_fields=name,canonical,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "caa6.test.com"','"canonical": "test6.com"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created DNAME record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:dname?name=dname6.test.com&_return_fields=name,target,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "dname6.test.com"','"target": "www.infoblox6.com"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created MX record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:mx?name=mx6.test.com&_return_fields%2B=preference,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['mx6.test.com','"preference": 10','"view": "default"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("\n============================================\n")
                print("Validating created NAPTR record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:naptr?name=naptr6.test.com&_return_fields=name,order,preference,regexp,replacement,services,view",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "naptr6.test.com"','"order": 10','"preference": 10','"regexp": ""','"replacement": "naptr.com"','"services": "http+E2U"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created PTR record ")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:ptr?name=ptr6.test.com&_return_fields=name,ptrdname&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                result = ['"name": "ptr6.test.com"','"ptrdname": "www.infoblox6.com"']
                for i in result:
                            if i in response:
                                assert True
                            else:
                                assert False
                print(result)
                print("\n============================================\n")
                print("Validating created SRV record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:srv?name=srv6.test.com&_return_fields=name,port,priority,target,view,weight&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "srv6.test.com"','"port": 22','"priority": 0','"target": "test.com"','"view": "default"','"weight": 0']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created TXT record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:txt?name=txt6.test.com&_return_fields=name,text,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "txt6.test.com"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating UNKNOWN AFSDB record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=afsdb6.test.com&_return_fields=name,display_rdata",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "afsdb6.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
		print("Test Case 83 Executuion Completed")


        @pytest.mark.run(order=84)
        def test_084_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all records to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["g.test.com A\n","aaaa6.test.com AAAA\n","ptr6.test.com PTR\n","caa6.test.com CNAME\n","dname6.test.com DNAME\n","mx6.test.com MX\n","srv6.test.com SRV\n","naptr6.test.com NAPTR\n","txt6.test.com TXT\n"])
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 84 Execution Completed")

        @pytest.mark.run(order=85)
        def test_085_dig_afsdb_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig AFSDB Record to get last queried timestamp")
                print("\n============================================\n")
                dig_cmd = ('dig @'+str(config.grid_vip)+' afsdb6.test.com AFSDB' )
                print(dig_cmd)
                f = open(r'response.txt','w');
                for i in range(1,3000):
                       data = os.popen(dig_cmd).read()
                       f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 85 Execution Completed")

        @pytest.mark.run(order=86)
        def test_086_Validate_all_created_records_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validate A record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:a?name=g.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("A record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate AAAA record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa6.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("AAAA record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate CNAME record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa6.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("CNAME record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate DNAME record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:dname?name=dname6.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("DNAME record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate PTR record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:ptr?name=ptr6.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("PTR record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate MX record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:mx?name=mx6.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("MX record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate SRV record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:srv?name=srv6.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("SRV record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate NAPTR record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:naptr?name=naptr6.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("NAPTR record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate TXT record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:txt?name=txt6.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("TXT record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN AFSDB record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=afsdb6.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("Test Case 87 Executuion Completed")


####################################################
## IPv4 Address with DENY Permission at Named ACL ##
####################################################

        @pytest.mark.run(order=88)
        def test_088_Update_Named_ACL_with_IPv4_Address_DENY_Permission_in_Named_ACls(self):
                print("\n============================================\n")
                print("Changing the IPv4 Address Named ACL Permission from ALLOW to DENY")
                print("\n============================================\n")
                #response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list&_return_as_object=1",grid_vip=config.grid_vip)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"name": "test","access_list": [{"_struct": "addressac","address": config.client_v4,"permission": "DENY"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 88 Executuion Completed")

	
        @pytest.mark.run(order=89)
        def test_089_Validate_modified_IPv4_Address_Named_ACL(self):
                print("\n============================================\n")
                print("validating modified IPv4 Address named acl")
                print("\n============================================\n")
                data = ('"name": "test"','"_struct": "addressac"','"address": "'+config.client_v4+'"','"permission": "DENY"')
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 89 Executuion Completed")


##############
## A record ##
##############

        @pytest.mark.run(order=90)
        def test_090_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all records to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["g.test.com A\n","aaaa6.test.com AAAA\n","ptr6.test.com PTR\n","caa6.test.com CNAME\n","dname6.test.com DNAME\n","mx6.test.com MX\n","srv6.test.com SRV\n","naptr6.test.com NAPTR\n","txt6.test.com TXT\n"])
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 90 Execution Completed")

        @pytest.mark.run(order=91)
        def test_091_dig_afsdb_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig AFSDB Record to get last queried timestamp")
                print("\n============================================\n")
                dig_cmd = ('dig @'+str(config.grid_vip)+' afsdb6.test.com AFSDB' )
                print(dig_cmd)
                f = open(r'response.txt','w');
                for i in range(1,3000):
                       data = os.popen(dig_cmd).read()
                       f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 91 Execution Completed")


        @pytest.mark.run(order=92)
        def test_092_Validate_Updated_ALL_records_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:a?name=g.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("A record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated AAAA record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa6.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("AAAA record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated CNAME record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa6.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("CNAME record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated DNAME record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:dname?name=dname6.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("DNAME record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated PTR record last queried timestamp with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:ptr?name=ptr6.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("PTR record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated MX record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:mx?name=mx6.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("MX record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated SRV record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:srv?name=srv6.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("SRV record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated NAPTR record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:naptr?name=naptr6.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("NAPTR record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated TXT record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:txt?name=txt6.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("TXT record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN AFSDB record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=afsdb6.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
		print("\n============================================\n")
                print("UNKNOWN AFSDB record updated with current grid date")
                print("\n============================================\n")
		print("Test Case 92 Execution Completed")

####################################################
## IPv4 Network with Allow Permission at Named ACL##
####################################################

        @pytest.mark.run(order=93)
        def test_093_Update_Named_ACL_with_IPv4_NETWORK_Alow_Permission_in_Named_ACLS(self):
                print("\n============================================\n")
                print("Updating the named acl with ipv4 network allow permission ")
                print("\n============================================\n")
                #response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list&_return_as_object=1",grid_vip=config.grid_vip)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"name": "test","access_list": [{"_struct": "addressac","address": "10.0.0.0/8","permission": "ALLOW"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 93 Executuion Completed")

        @pytest.mark.run(order=94)
        def test_094_Validate_Updated_Named_ACL(self):
                print("\n============================================\n")
                print("validating the updated named acl")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ('"name": "test"','"_struct": "addressac"','"address": "10.0.0.0/8"','"permission": "ALLOW"')
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 94 Executuion Completed")

	

##############
## A record ##
##############


        @pytest.mark.run(order=95)
        def test_095_Add_ALL_records(self):
                print("\n============================================\n")
                print("Adding A record")
                print("\n============================================\n")
		data = {"ipv4addr": "10.0.0.8","name": "h.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created A record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding AAAA record")
                print("\n============================================\n")
		data = {"ipv6addr": "2620:10a:6000:2400::8","name": "aaaa7.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:aaaa",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created AAAA record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding CNAME record")
                print("\n============================================\n")
		data = {"canonical": "test7.com","name": "caa7.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:cname",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created CNAME record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding DNAME record")
                print("\n============================================\n")
		data = {"name": "dname7.test.com","target": "www.infoblox7.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:dname",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created DNAME record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding MX record")
                print("\n============================================\n")
		data = {"mail_exchanger": "test.com","name": "mx7.test.com","preference": 10,"view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:mx",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created MX record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding NAPTR record")
                print("\n============================================\n")
		data = {"name": "naptr7.test.com","order": 10,"preference": 10,"regexp": "","replacement": "naptr.com","services": "http+E2U","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:naptr",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created NAPTR record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding SRV record")
                print("\n============================================\n")
		data = {"name": "srv7.test.com","port": 22,"priority": 0,"target": "test.com","view": "default","weight": 0}
                response = ib_NIOS.wapi_request('POST', object_type="record:srv",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created SRV record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding PTR record")
                print("\n============================================\n")
		data = {"ptrdname": "www.infoblox7.com","name": "ptr7.test.com","view": "default"}
                output = ib_NIOS.wapi_request('POST', object_type="record:ptr",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                print("\n============================================\n")
                print("Successfully created PTR record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding TXT record")
                print("\n============================================\n")
		data = {"name": "txt7.test.com","text": "txt.com","view": "default"}
                response = ib_NIOS.wapi_request('POST',object_type="record:txt",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created TXT record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding UNKNOWN AFSDB record")
                print("\n============================================\n")
		data={"name": "afsdb7.test.com","record_type": "AFSDB","subfield_values": [{"field_type": "S","field_value": "10","include_length": "NONE"},{"field_type": "N","field_value": "www.exmple3000.com","include_length": "NONE"}],"view": "default","extattrs": { "IB Discovery Owned": {"value": "100"},"Site": { "value": "200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN AFSDB record")
                print("\n============================================\n")
		print("Test Case 95 Executuion Completed")

        @pytest.mark.run(order=96)
        def test_096_Validate_ALL_created_records(self):
                print("\n============================================\n")
                print("Validating created A record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:a?name=h.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "h.test.com"','"ipv4addr": "10.0.0.8"']
                for i in result:
                    if i in output:
                        print(i)
                        assert True
                    else:
                        assert False
                print(result)
                print("\n============================================\n")
                print("Validating created AAAA record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa7.test.com&_return_fields=name,view,ipv6addr&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "aaaa7.test.com"','"ipv6addr": "2620:10a:6000:2400::8"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
                print("\n============================================\n")
                print("Validating created CNAME record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa7.test.com&_return_fields=name,canonical,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "caa7.test.com"','"canonical": "test7.com"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created DNAME record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:dname?name=dname7.test.com&_return_fields=name,target,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "dname7.test.com"','"target": "www.infoblox7.com"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created MX record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:mx?name=mx7.test.com&_return_fields%2B=preference,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['mx7.test.com','"preference": 10','"view": "default"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("\n============================================\n")
                print("Validating created NAPTR record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:naptr?name=naptr7.test.com&_return_fields=name,order,preference,regexp,replacement,services,view",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "naptr7.test.com"','"order": 10','"preference": 10','"regexp": ""','"replacement": "naptr.com"','"services": "http+E2U"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created PTR record ")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:ptr?name=ptr7.test.com&_return_fields=name,ptrdname&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                result = ['"name": "ptr7.test.com"','"ptrdname": "www.infoblox7.com"']
                for i in result:
                    if i in response:
                        assert True
                    else:
                        assert False
                print(result)
                print("\n============================================\n")
                print("Validating created SRV record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:srv?name=srv7.test.com&_return_fields=name,port,priority,target,view,weight&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "srv7.test.com"','"port": 22','"priority": 0','"target": "test.com"','"view": "default"','"weight": 0']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created TXT record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:txt?name=txt7.test.com&_return_fields=name,text,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "txt7.test.com"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating UNKNOWN AFSDB record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=afsdb7.test.com&_return_fields=name,display_rdata",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "afsdb7.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
		print("Test Case 96 Executuion Completed")



        @pytest.mark.run(order=97)
        def test_097_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all records to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["h.test.com A\n","aaaa7.test.com AAAA\n","ptr7.test.com PTR\n","caa7.test.com CNAME\n","dname7.test.com DNAME\n","mx7.test.com MX\n","srv7.test.com SRV\n","naptr7.test.com NAPTR\n","txt7.test.com TXT\n"])
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 97 Execution Completed")

        @pytest.mark.run(order=98)
        def test_098_dig_afsdb_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig AFSDB Record to get last queried timestamp")
                print("\n============================================\n")
                dig_cmd = ('dig @'+str(config.grid_vip)+' afsdb7.test.com AFSDB' )
                print(dig_cmd)
                f = open(r'response.txt','w');
                for i in range(1,3000):
                       data = os.popen(dig_cmd).read()
                       f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 98 Execution Completed")

        @pytest.mark.run(order=99)
        def test_099_Validate_all_created_records_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validate A record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:a?name=h.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("A record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate AAAA record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa7.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("AAAA record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate CNAME record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa7.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("CNAME record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate DNAME record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:mx?name=mx7.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("DNAME record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate PTR record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:ptr?name=ptr7.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("PTR record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate MX record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:mx?name=mx7.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("MX record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate SRV record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:srv?name=srv7.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("SRV record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate NAPTR record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:naptr?name=naptr7.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("NAPTR record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate TXT record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:txt?name=txt7.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("TXT record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN AFSDB record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=afsdb7.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("Text Case 99 Execution Completed")


####################################################
## IPv4 NETWORK with DENY Permission at Named ACL ##
####################################################

        @pytest.mark.run(order=100)
        def test_100_Update_Named_ACL_with_IPv4_NETWORK_DENY_Permission(self):
                print("\n============================================\n")
                print("Updating named acl with ipv4 network deny permission")
                print("\n============================================\n")
                #response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list&_return_as_object=1",grid_vip=config.grid_vip)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"name": "test","access_list": [{"_struct": "addressac","address": "10.0.0.0/8","permission": "DENY"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 100 Executuion Completed")

        @pytest.mark.run(order=101)
        def test_101_Validate_updated_Named_ACL(self):
                print("\n============================================\n")
                print("validating updated namedacl")
                print("\n============================================\n")
                data = ('"name": "test"','"_struct": "addressac"','"address": "10.0.0.0/8"','"permission": "DENY"')
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 101 Executuion Completed")

##############
## A record ##
##############



        @pytest.mark.run(order=102)
        def test_102_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all records to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["h.test.com A\n","aaaa7.test.com AAAA\n","ptr7.test.com PTR\n","caa7.test.com CNAME\n","dname7.test.com DNAME\n","mx7.test.com MX\n","srv7.test.com SRV\n","naptr7.test.com NAPTR\n","txt7.test.com TXT\n"])
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 97 Execution Completed")

        @pytest.mark.run(order=103)
        def test_103_dig_afsdb_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig AFSDB Record to get last queried timestamp")
                print("\n============================================\n")
                dig_cmd = ('dig @'+str(config.grid_vip)+' afsdb7.test.com AFSDB' )
                print(dig_cmd)
                f = open(r'response.txt','w');
                for i in range(1,3000):
                       data = os.popen(dig_cmd).read()
                       f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 103 Execution Completed")


        @pytest.mark.run(order=104)
        def test_104_Validate_Updated_ALL_records_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:a?name=h.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("A record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated AAAA record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa7.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("AAAA record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated CNAME record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa7.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("CNAME record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated DNAME record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:dname?name=dname7.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("DNAME record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated PTR record last queried timestamp with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:ptr?name=ptr7.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("PTR record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated MX record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:mx?name=mx7.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("MX record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated SRV record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:srv?name=srv7.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("SRV record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated NAPTR record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:naptr?name=naptr7.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("NAPTR record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated TXT record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:txt?name=txt7.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("TXT record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN AFSDB record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=afsdb7.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN AFSDB record updated with current grid date")
                print("\n============================================\n")
		print("Test Case 104 Execution Completed")

                
####################################################
## IPv6 Address with Allow Permission at Named ACL##
####################################################

        @pytest.mark.run(order=105)
        def test_105_Update_Named_ACL_with_IPv6_Address_ALLOW_Permission(self):
                print("\n============================================\n")
                print("Updating named acl with ipv6 address allow permission")
                print("\n============================================\n")
                #response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list&_return_as_object=1",grid_vip=config.grid_vip)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"name": "test","access_list": [{"_struct": "addressac","address": config.client_v6,"permission": "ALLOW"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 105 Executuion Completed")

        @pytest.mark.run(order=106)
        def test_106_Validate_updated_IPv6_Address_Named_ACL(self):
                print("\n============================================\n")
                print("validating updated ipv6 address named acl ")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ('"name": "test"','"_struct": "addressac"','"address": "'+config.client_v6+'"','"permission": "ALLOW"')
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 106 Executuion Completed")



##############
## A record ##
##############


        @pytest.mark.run(order=107)
        def test_107_Add_ALL_records(self):
                print("\n============================================\n")
                print("Adding A record")
                print("\n============================================\n")
		data = {"ipv4addr": "10.0.0.9","name": "i.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created A record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding AAAA record")
                print("\n============================================\n")
		data = {"ipv6addr": "2620:10a:6000:2400::9","name": "aaaa8.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:aaaa",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created AAAA record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding CNAME record")
                print("\n============================================\n")
		data = {"canonical": "test8.com","name": "caa8.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:cname",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created CNAME record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding DNAME record")
                print("\n============================================\n")
		data = {"name": "dname8.test.com","target": "www.infoblox8.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:dname",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created DNAME record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding MX record")
                print("\n============================================\n")
		data = {"mail_exchanger": "test.com","name": "mx8.test.com","preference": 10,"view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:mx",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created MX record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding NAPTR record")
                print("\n============================================\n")
		data = {"name": "naptr8.test.com","order": 10,"preference": 10,"regexp": "","replacement": ".","services": "http+E2U","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:naptr",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created NAPTR record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding SRV record")
                print("\n============================================\n")
		data = {"name": "srv8.test.com","port": 22,"priority": 0,"target": "test.com","view": "default","weight": 0}
                response = ib_NIOS.wapi_request('POST', object_type="record:srv",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created SRV record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding PTR record")
                print("\n============================================\n")
		data = {"ptrdname": "www.infoblox8.com","name": "ptr8.test.com","view": "default"}
                output = ib_NIOS.wapi_request('POST', object_type="record:ptr",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                print("\n============================================\n")
                print("Successfully created PTR record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding TXT record")
                print("\n============================================\n")
		data = {"name": "txt8.test.com","text": "txt.com","view": "default"}
                response = ib_NIOS.wapi_request('POST',object_type="record:txt",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created TXT record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding UNKNOWN AFSDB record")
                print("\n============================================\n")
		data={"name": "afsdb8.test.com","record_type": "AFSDB","subfield_values": [{"field_type": "S","field_value": "10","include_length": "NONE"},{"field_type": "N","field_value": "www.exmple3000.com","include_length": "NONE"}],"view": "default","extattrs": { "IB Discovery Owned": {"value": "100"},"Site": { "value": "200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN AFSDB record")
                print("\n============================================\n")
		print("Test Case 107 Executuion Completed")


        @pytest.mark.run(order=108)
        def test_108_Validate_ALL_created_records(self):
                print("\n============================================\n")
                print("Validating created A record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:a?name=i.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "i.test.com"','"ipv4addr": "10.0.0.9"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("\n============================================\n")
                print("Validating created AAAA record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa8.test.com&_return_fields=name,view,ipv6addr&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "aaaa8.test.com"','"ipv6addr": "2620:10a:6000:2400::9"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
                print("\n============================================\n")
                print("Validating created CNAME record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa8.test.com&_return_fields=name,canonical,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "caa8.test.com"','"canonical": "test8.com"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created DNAME record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:dname?name=dname8.test.com&_return_fields=name,target,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "dname8.test.com"','"target": "www.infoblox8.com"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created MX record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:mx?name=mx8.test.com&_return_fields%2B=preference,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['mx8.test.com','"preference": 10','"view": "default"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("\n============================================\n")
                print("Validating created NAPTR record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:naptr?name=naptr8.test.com&_return_fields=name,order,preference,regexp,replacement,services,view",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "naptr8.test.com"','"order": 10','"preference": 10','"regexp": ""','"replacement": "."','"services": "http+E2U"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created PTR record ")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:ptr?name=ptr8.test.com&_return_fields=name,ptrdname&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                result = ['"name": "ptr8.test.com"','"ptrdname": "www.infoblox8.com"']
                for i in result:
                    if i in response:
                        assert True
                    else:
                        assert False
                print(result)
                print("\n============================================\n")
                print("Validating created SRV record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:srv?name=srv8.test.com&_return_fields=name,port,priority,target,view,weight&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "srv8.test.com"','"port": 22','"priority": 0','"target": "test.com"','"view": "default"','"weight": 0']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created TXT record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:txt?name=txt8.test.com&_return_fields=name,text,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "txt8.test.com"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating UNKNOWN AFSDB record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=afsdb8.test.com&_return_fields=name,display_rdata",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "afsdb8.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
		print("Test Case 108 Executuion Completed")

        @pytest.mark.run(order=109)
        def test_109_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all records to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["i.test.com A\n","aaaa8.test.com AAAA\n","ptr8.test.com PTR\n","caa8.test.com CNAME\n","dname8.test.com DNAME\n","mx8.test.com MX\n","srv8.test.com SRV\n","naptr8.test.com NAPTR\n","txt8.test.com TXT\n"])
                f.close()
		dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 109 Execution Completed")

        @pytest.mark.run(order=110)
        def test_110_dig_afsdb_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig AFSDB Record to get last queried timestamp")
                print("\n============================================\n")
		dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' afsdb8.test.com AFSDB' )
                print(dig_cmd)
                f = open(r'response.txt','w');
                for i in range(1,3000):
                       data = os.popen(dig_cmd).read()
                       f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 110 Execution Completed")

        @pytest.mark.run(order=111)
        def test_111_Validate_all_created_records_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validate A record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:a?name=i.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("A record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate AAAA record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa8.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("AAAA record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate CNAME record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa8.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("CNAME record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate DNAME record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:dname?name=dname8.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("DNAME record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate PTR record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:ptr?name=ptr8.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("PTR record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate MX record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:mx?name=mx8.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("MX record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate SRV record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:srv?name=srv8.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("SRV record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate NAPTR record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:naptr?name=naptr8.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("NAPTR record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate TXT record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:txt?name=txt8.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("TXT record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN AFSDB record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=afsdb8.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("Test Case 111 Execution Completed")

####################################################
## IPv6 Address with DENY Permission at Named ACL ##
####################################################

        @pytest.mark.run(order=112)
        def test_112_Update_Named_ACL_with_IPv6_Address_DENY_Permission(self):
                print("\n============================================\n")
                print("updating named acl with ipv6 address deny permission")
                print("\n============================================\n")
                #response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list&_return_as_object=1",grid_vip=config.grid_vip)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"name": "test","access_list": [{"_struct": "addressac","address": config.client_v6,"permission": "DENY"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 112 Executuion Completed")
	
        @pytest.mark.run(order=113)
        def test_113_Validate_updated_IPv6_Address_Named_ACL(self):
                print("\n============================================\n")
                print("validating updated ipv6 address named acl")
                print("\n============================================\n")
                data = ('"name": "test"','"_struct": "addressac"','"address": "'+config.client_v6+'"','"permission": "DENY"')
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 113 Executuion Completed")

##############
## A record ##
##############

        @pytest.mark.run(order=114)
        def test_114_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all records to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["i.test.com A\n","aaaa8.test.com AAAA\n","ptr8.test.com PTR\n","caa8.test.com CNAME\n","dname8.test.com DNAME\n","mx8.test.com MX\n","srv8.test.com SRV\n","naptr8.test.com NAPTR\n","txt8.test.com TXT\n"])
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 114 Execution Completed")

        @pytest.mark.run(order=115)
        def test_115_dig_afsdb_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig AFSDB Record to get last queried timestamp")
                print("\n============================================\n")
		dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' afsdb8.test.com AFSDB' )
                print(dig_cmd)
                f = open(r'response.txt','w');
                for i in range(1,3000):
                       data = os.popen(dig_cmd).read()
                       f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 115 Execution Completed")

        @pytest.mark.run(order=116)
        def test_116_Validate_Updated_ALL_records_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:a?name=i.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("A record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated AAAA record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa8.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("AAAA record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated CNAME record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa8.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("CNAME record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated DNAME record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:dname?name=dname8.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("DNAME record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated PTR record last queried timestamp with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:ptr?name=ptr8.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("PTR record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated MX record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:mx?name=mx8.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("MX record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated SRV record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:srv?name=srv8.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("SRV record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated NAPTR record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:naptr?name=naptr8.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("NAPTR record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated TXT record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:txt?name=txt8.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("TXT record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN AFSDB record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=afsdb8.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN AFSDB record updated with current grid date")
                print("\n============================================\n")
		print("Test Case 116 Execution Completed")

####################################################
## IPv6 Network with Allow Permission at Named ACL##
####################################################

        @pytest.mark.run(order=117)
        def test_117_UPDATE_Named_ACL_with_IPv6_Network_Alow_Permission(self):
                print("\n============================================\n")
                print("updating named acl with ipv6 network allow permission")
                print("\n============================================\n")
                #response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list&_return_as_object=1",grid_vip=config.grid_vip)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"name": "test","access_list": [{"_struct": "addressac","address": config.client_v6_network+'::/64',"permission": "ALLOW"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 117 Executuion Completed")

        @pytest.mark.run(order=118)
        def test_118_Validate_updated_Named_ACL(self):
                print("\n============================================\n")
                print("validating updated named acl")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ('"name": "test"','"_struct": "addressac"','"address": "'+config.client_v6_network+'::/64"','"permission": "ALLOW"')
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 118 Executuion Completed")
	
##############
## A record ##
##############


        @pytest.mark.run(order=119)
        def test_119_Add_ALL_records(self):
                print("\n============================================\n")
                print("Adding A record")
                print("\n============================================\n")
		data = {"ipv4addr": "10.0.0.10","name": "j.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created A record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding AAAA record")
                print("\n============================================\n")
		data = {"ipv6addr": "2620:10a:6000:2400::10","name": "aaaa9.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:aaaa",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created AAAA record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding CNAME record")
                print("\n============================================\n")
		data = {"canonical": "test9.com","name": "caa9.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:cname",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created CNAME record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding DNAME record")
                print("\n============================================\n")
		data = {"name": "dname9.test.com","target": "www.infoblox9.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:dname",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created DNAME record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding MX record")
                print("\n============================================\n")
		data = {"mail_exchanger": "test.com","name": "mx9.test.com","preference": 10,"view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:mx",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created MX record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding NAPTR record")
                print("\n============================================\n")
		data = {"name": "naptr9.test.com","order": 10,"preference": 10,"regexp": "","replacement": "naptr.com","services": "http+E2U","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:naptr",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created NAPTR record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding SRV record")
                print("\n============================================\n")
		data = {"name": "srv9.test.com","port": 22,"priority": 0,"target": "test.com","view": "default","weight": 0}
                response = ib_NIOS.wapi_request('POST', object_type="record:srv",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created SRV record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding PTR record")
                print("\n============================================\n")
		data = {"ptrdname": "www.infoblox9.com","name": "ptr9.test.com","view": "default"}
                output = ib_NIOS.wapi_request('POST', object_type="record:ptr",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                print("\n============================================\n")
                print("Successfully created PTR record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding TXT record")
                print("\n============================================\n")
		data = {"name": "txt9.test.com","text": "txt.com","view": "default"}
                response = ib_NIOS.wapi_request('POST',object_type="record:txt",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created TXT record")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("Adding UNKNOWN AFSDB record")
                print("\n============================================\n")
		data={"name": "afsdb9.test.com","record_type": "AFSDB","subfield_values": [{"field_type": "S","field_value": "10","include_length": "NONE"},{"field_type": "N","field_value": "www.exmple3000.com","include_length": "NONE"}],"view": "default","extattrs": { "IB Discovery Owned": {"value": "100"},"Site": { "value": "200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN AFSDB record")
                print("\n============================================\n")
		print("Test Case 119 Executuion Completed")


        @pytest.mark.run(order=120)
        def test_120_Validate_ALL_created_records(self):
                print("\n============================================\n")
                print("Validating created A record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:a?name=j.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "j.test.com"','"ipv4addr": "10.0.0.10"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("\n============================================\n")
                print("Validating created AAAA record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa9.test.com&_return_fields=name,view,ipv6addr&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "aaaa9.test.com"','"ipv6addr": "2620:10a:6000:2400::10"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
                print("\n============================================\n")
                print("Validating created CNAME record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa9.test.com&_return_fields=name,canonical,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "caa9.test.com"','"canonical": "test9.com"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created DNAME record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:dname?name=dname9.test.com&_return_fields=name,target,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "dname9.test.com"','"target": "www.infoblox9.com"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created MX record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:mx?name=mx9.test.com&_return_fields%2B=preference,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['mx9.test.com','"preference": 10','"view": "default"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("\n============================================\n")
                print("Validating created NAPTR record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:naptr?name=naptr9.test.com&_return_fields=name,order,preference,regexp,replacement,services,view",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "naptr9.test.com"','"order": 10','"preference": 10','"regexp": ""','"replacement": "naptr.com"','"services": "http+E2U"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created PTR record ")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:ptr?name=ptr9.test.com&_return_fields=name,ptrdname&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                result = ['"name": "ptr9.test.com"','"ptrdname": "www.infoblox9.com"']
                for i in result:
                    if i in response:
                        assert True
                    else:
                        assert False
                print(result)
                print("\n============================================\n")
                print("Validating created SRV record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:srv?name=srv9.test.com&_return_fields=name,port,priority,target,view,weight&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "srv9.test.com"','"port": 22','"priority": 0','"target": "test.com"','"view": "default"','"weight": 0']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating created TXT record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:txt?name=txt9.test.com&_return_fields=name,text,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "txt9.test.com"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
                print("\n============================================\n")
                print("Validating UNKNOWN AFSDB record ")
                print("\n============================================\n")
                output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=afsdb9.test.com&_return_fields=name,display_rdata",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "afsdb9.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
                print("Test Case 120 Execution Completed")

        @pytest.mark.run(order=121)
        def test_121_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all records to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["j.test.com A\n","aaaa9.test.com AAAA\n","ptr9.test.com PTR\n","caa9.test.com CNAME\n","dname9.test.com DNAME\n","mx9.test.com MX\n","srv9.test.com SRV\n","naptr9.test.com NAPTR\n","txt9.test.com TXT\n"])
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 121 Execution Completed")

        @pytest.mark.run(order=122)
        def test_122_dig_afsdb_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig AFSDB Record to get last queried timestamp")
                print("\n============================================\n")
		dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' afsdb9.test.com AFSDB' )
                print(dig_cmd)
                f = open(r'response.txt','w');
                for i in range(1,3000):
                       data = os.popen(dig_cmd).read()
                       f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 122 Execution Completed")

        @pytest.mark.run(order=123)
        def test_123_Validate_all_created_records_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validate A record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:a?name=j.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("A record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate AAAA record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa9.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("AAAA record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate CNAME record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa9.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("CNAME record not updated with current grid date")
                print("\n============================================\n")
                print("Test Case 123 Execution Completed")

        @pytest.mark.run(order=124)
        def test_124_Validate_all_created_records_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validate DNAME record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:dname?name=dname9.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("DNAME record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate PTR record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:ptr?name=ptr9.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("PTR record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate MX record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:mx?name=mx9.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("MX record not updated with current grid date")
                print("\n============================================\n")
                print("Test Case 124 Execution Completed")

        @pytest.mark.run(order=125)
        def test_125_Validate_all_created_records_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validate SRV record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:srv?name=srv9.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("SRV record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate NAPTR record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:naptr?name=naptr9.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("NAPTR record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate TXT record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:txt?name=txt9.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("TXT record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN AFSDB record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=afsdb9.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
		print("Test Case 125 Executuion Completed")


####################################################
## IPv6 NETWORK with DENY Permission at Named ACL ##
####################################################

        @pytest.mark.run(order=126)
        def test_126_Update_Named_ACL_with_IPv6_NETWORK_DENY_Permission(self):
                print("\n============================================\n")
                print("updating named acl with ipv6 network deny permission")
                print("\n============================================\n")
                #response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list&_return_as_object=1",grid_vip=config.grid_vip)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"access_list": [{"_struct": "addressac","address": config.client_v6_network+'::/64',"permission": "DENY"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 126 Executuion Completed")

        @pytest.mark.run(order=127)
        def test_127_Validate_updated_Named_ACL(self):
                print("\n============================================\n")
                print("validating updated named acl")
                print("\n============================================\n")
                data = ('"name": "test"','"_struct": "addressac"','"address": "'+config.client_v6_network+'::/64"','"permission": "DENY"')
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 127 Executuion Completed")

##############
## A record ##
##############

        @pytest.mark.run(order=128)
        def test_128_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all records to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["j.test.com A\n","aaaa9.test.com AAAA\n","ptr9.test.com PTR\n","caa9.test.com CNAME\n","dname9.test.com DNAME\n","mx9.test.com MX\n","srv9.test.com SRV\n","naptr9.test.com NAPTR\n","txt9.test.com TXT\n"])
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 128 Execution Completed")

        @pytest.mark.run(order=129)
        def test_129_dig_afsdb_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig AFSDB Record to get last queried timestamp")
                print("\n============================================\n")
		dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' afsdb9.test.com AFSDB' )
                print(dig_cmd)
                f = open(r'response.txt','w');
                for i in range(1,3000):
                       data = os.popen(dig_cmd).read()
                       f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 129 Execution Completed")

        @pytest.mark.run(order=130)
        def test_130_Validate_Updated_ALL_records_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:a?name=j.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("A record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated AAAA record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa9.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("AAAA record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated CNAME record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa9.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("CNAME record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated DNAME record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:dname?name=dname9.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("DNAME record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated PTR record last queried timestamp with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:ptr?name=ptr9.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("PTR record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated MX record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:mx?name=mx9.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("MX record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated SRV record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:srv?name=srv9.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("SRV record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated NAPTR record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:naptr?name=naptr9.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("NAPTR record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated TXT record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:txt?name=txt9.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("TXT record updated with current grid date")
                print("\n============================================\n")
		print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN AFSDB record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=afsdb9.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN AFSDB record updated with current grid date")
                print("\n============================================\n")
		print("Test Case 130 Execution Completed")


####################################################
## ANY Address with Allow Permission at Named ACL##
####################################################


        @pytest.mark.run(order=131)
        def test_131_Update_Named_ACL_with_ANY_Address_ALLOW_Permission(self):
                print("\n============================================\n")
                print("updating named acl with ANY address ALLoW permission")
                print("\n============================================\n")
                #response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list&_return_as_object=1",grid_vip=config.grid_vip)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"access_list": [{"_struct": "addressac","address": "Any","permission": "ALLOW"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 131 Executuion Completed")

        @pytest.mark.run(order=132)
        def test_132_Validate_updated_named_acl(self):
                print("\n============================================\n")
                print("validating updated named acl")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ('"name": "test"','"_struct": "addressac"','"address": "Any"','"permission": "ALLOW"')
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 132 Executuion Completed")

	

##############
## A record ##
##############


        @pytest.mark.run(order=133)
        def test_133_Add_ALL_records(self):
                print("\n============================================\n")
                print("Adding A record")
                print("\n============================================\n")
		data = {"ipv4addr": "10.0.0.61","name": "k.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created A record")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("Adding AAAA record")
                print("\n============================================\n")
		data = {"ipv6addr": "2620:10a:6000:2400::11","name": "aaaa10.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:aaaa",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created AAAA record")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("Adding CNAME record")
                print("\n============================================\n")
		data = {"canonical": "test10.com","name": "caa10.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:cname",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created CNAME record")
                print("\n============================================\n")
                print("\n")
		print("\n============================================\n")
                print("Adding UNKNOWN AFSDB record")
                print("\n============================================\n")
		data={"name": "afsdb10.test.com","record_type": "AFSDB","subfield_values": [{"field_type": "S","field_value": "10","include_length": "NONE"},{"field_type": "N","field_value": "www.exmple3000.com","include_length": "NONE"}],"view": "default","extattrs": { "IB Discovery Owned": {"value": "100"},"Site": { "value": "200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
		print("\n============================================\n")
                print("Successfully created UNKNOWN AFSDB record")
                print("\n============================================\n")
		print("\n")
		print("\n============================================\n")
                print("Validating created A record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:a?name=k.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "k.test.com"','"ipv4addr": "10.0.0.61"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("\n============================================\n")
                print("Validating created AAAA record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa10.test.com&_return_fields=name,view,ipv6addr&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "aaaa10.test.com"','"ipv6addr": "2620:10a:6000:2400::11"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
                print("\n============================================\n")
                print("Validating created CNAME record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa10.test.com&_return_fields=name,canonical,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "caa10.test.com"','"canonical": "test10.com"','"view": "default"']
                for i in result:
                    if i in output:
                            assert True
                    else:
                            assert False
                print(result)
		print("\n============================================\n")
                print("Validating created CNAME record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=afsdb10.test.com&_return_fields=name,display_rdata",grid_vip=config.grid_vip)
                print(output)
                data = ['"display_rdata": "10 www.exmple3000.com."','"name": "afsdb10.test.com"']
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
		print("Test Case 133 Executuion Completed")


        @pytest.mark.run(order=134)
        def test_134_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all records to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["k.test.com A\n","aaaa10.test.com AAAA\n","caa10.test.com CNAME\n"])
                f.close()
		dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 134 Execution Completed")

        @pytest.mark.run(order=135)
        def test_135_dig_afsdb_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig AFSDB Record to get last queried timestamp")
                print("\n============================================\n")
		dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' afsdb10.test.com AFSDB' )
                print(dig_cmd)
                f = open(r'response.txt','w');
                for i in range(1,3000):
                       data = os.popen(dig_cmd).read()
                       f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 135 Execution Completed")

        @pytest.mark.run(order=136)
        def test_136_Validate_all_created_records_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validate A record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:a?name=k.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("A record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate AAAA record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa10.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("AAAA record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate CNAME record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa10.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("CNAME record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
		print("\n============================================\n")
                print("validate UNKNOWN AFSDB record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=afsdb10.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert1(response)
		print("\n============================================\n")
                print("UNKNOWN AFSDB record not updated with current grid date")
                print("\n============================================\n")
		print("Test Case 136 Execution Completed")

####################################################
## ANY Address with DENY Permission at Named ACL ##
####################################################

        @pytest.mark.run(order=137)
        def test_137_Update_Named_ACL_with_ANY_Address_DENY_Permission(self):
                print("\n============================================\n")
                print("updating named acl with ANY address DENY permission")
                print("\n============================================\n")
                #response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list&_return_as_object=1",grid_vip=config.grid_vip)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"access_list": [{"_struct": "addressac","address": "Any","permission": "DENY"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 137 Executuion Completed")

        @pytest.mark.run(order=138)
        def test_138_Validate_updated_Named_ACL(self):
                print("\n============================================\n")
                print("validating updated_ named acl")
                print("\n============================================\n")
                data = ('"name": "test"','"_struct": "addressac"','"address": "Any"','"permission": "DENY"')
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 138 Executuion Completed")
	
##############
## A record ##
##############

        @pytest.mark.run(order=139)
        def test_139_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all records to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["k.test.com A\n","aaaa10.test.com AAAA\n","caa10.test.com CNAME\n"])
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 139 Execution Completed")

        @pytest.mark.run(order=140)
        def test_140_dig_afsdb_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig AFSDB Record to get last queried timestamp")
                print("\n============================================\n")
                dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' afsdb10.test.com AFSDB' )
                print(dig_cmd)
                f = open(r'response.txt','w');
                for i in range(1,3000):
                       data = os.popen(dig_cmd).read()
                       f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 140 Execution Completed")

        @pytest.mark.run(order=141)
        def test_141_Validate_Updated_ALL_records_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:a?name=k.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert(response)
                print("\n============================================\n")
                print("A record updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validating updated AAAA record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa10.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("AAAA record updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validating updated CNAME record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa10.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("CNAME record updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN AFSDB record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=afsdb10.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN AFSDB record updated with current grid date")
                print("\n============================================\n")
		print("Test Case 141 Execution Completed")


#####################################################################################################################################               
################################################### DNSVIEW : Cases #################################################################
#####################################################################################################################################   


############################################################
## Setting "NONE" option at DNS scavenging grid dns level ##
############################################################

        @pytest.mark.run(order=142)
        def test_142_Configuring_and_validating_last_queried_acl_at_grid_dns_level(self):
                print("\n============================================\n")
                print("removing all ACL's at grid dns ")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET', object_type="grid:dns")
                ref = json.loads(get_ref)[0]['_ref']
                print(ref)
                data = {"last_queried_acl": []}
                response = ib_NIOS.wapi_request('PUT',ref= ref,fields=json.dumps(data))
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                #output = ib_NIOS.wapi_request('GET',object_type="grid:dns",params="?_inheritance=True&_return_fields=scavenging_settings",grid_vip=config.grid_vip)
		output = ib_NIOS.wapi_request('GET',object_type="grid:dns",params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(output)
                data = ('"last_queried_acl": []')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
                print("\n")
                print("Test Case 142 Execution Completed")
            

############################################################
### at dns view, dns scavenging setting to "NONE" option ###
############################################################
            
            
        @pytest.mark.run(order=143)
        def test_143_Enable_enable_rr_last_queried_and_enable_zone_last_queried_at_default_dns_view(self):
                print("\n============================================\n")
                print("enabling last query monitor for RRs and Zones at default DNS view")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET', object_type="view")
                ref = json.loads(get_ref)[0]['_ref']
                print(ref)
                data = {"use_scavenging_settings": True}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                get_ref = ib_NIOS.wapi_request('GET', object_type="view")
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT',ref= ref1,fields=json.dumps(data))
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("Test Case 143 Execution Completed")

	
        @pytest.mark.run(order=144)
        def test_144_validate_enabled_RR_last_queried_and_zone_last_queried_time_monitor_at_default_dns_view(self):
                print("\n============================================\n")
                print(" validating enabled RR and zone query time monitoring at default dns view ")
                print("\n============================================\n")
                output = ib_NIOS.wapi_request('GET',object_type="grid:dns",params="?_inheritance=True&_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(output)
                data = ['"enable_rr_last_queried": true','"enable_zone_last_queried": true']
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
                print("\n")
                print("Test Case 144 Execution Completed")
            
##############
## A record ##
##############

        @pytest.mark.run(order=145)
        def test_145_Add_ALL_records(self):
                print("\n============================================\n")
                print("Adding A record")
                print("\n============================================\n")
		data = {"ipv4addr": "10.0.0.11","name": "l.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created A record")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("Adding CNAME record")
                print("\n============================================\n")
		data = {"canonical": "test.com","name": "caa11.test.com","view": "default"}
            	response = ib_NIOS.wapi_request('POST', object_type="record:cname",fields=json.dumps(data),grid_vip=config.grid_vip)
            	print(response)
                print("\n============================================\n")
                print("Successfully created CNAME record")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("Adding UNKNOWN AFSDB record")
                print("\n============================================\n")
		data={"name": "afsdb11.test.com","record_type": "AFSDB","subfield_values": [{"field_type": "S","field_value": "10","include_length": "NONE"},{"field_type": "N","field_value": "www.exmple3000.com","include_length": "NONE"}],"view": "default","extattrs": { "IB Discovery Owned": {"value": "100"},"Site": { "value": "200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN AFSDB record")
                print("\n============================================\n")
		print("Test Case 145 Execution Completed")


        @pytest.mark.run(order=146)
        def test_146_Validate_ALL_created_records(self):
                print("\n============================================\n")
                print("Validating created A record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:a?name=l.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "l.test.com"','"ipv4addr": "10.0.0.11"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("\n============================================\n")
                print("Validating created CNAME record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:cname",grid_vip=config.grid_vip)
	        print(output)
            	result = '"name": "caa11.test.com"'
            	if result in output:
                 	assert True
            	else:
                     	assert False
            	print(result)
		print("\n============================================\n")
                print("Validating UNKNOWN AFSDB record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=afsdb11.test.com&_return_fields=name,display_rdata",grid_vip=config.grid_vip)
                print(output)
                data = ['"display_rdata": "10 www.exmple3000.com."','"name": "afsdb11.test.com"']
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
                print("Test Case 146 Executuion Completed")


        @pytest.mark.run(order=147)
        def test_147_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all records to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["l.test.com A\n","caa11.test.com CNAME\n"])
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 147 Execution Completed")

        @pytest.mark.run(order=148)
        def test_148_dig_afsdb_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig AFSDB Record to get last queried timestamp")
                print("\n============================================\n")
		dig_cmd = ('dig @'+str(config.grid_vip)+' afsdb11.test.com AFSDB' )
                print(dig_cmd)
                f = open(r'response.txt','w');
                for i in range(1,3000):
                       data = os.popen(dig_cmd).read()
                       f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 148 Execution Completed")

        @pytest.mark.run(order=149)
        def test_149_Validate_Updated_ALL_records_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:a?name=l.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert(response)
                print("\n============================================\n")
                print("A record updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validating updated CNAME record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:cname?name=caa11.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("CNAME record updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN AFSDB record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=afsdb11.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN AFSDB record updated with current grid date")
                print("\n============================================\n")
		print("Test Case 149 Execution Completed")

        
#######################################################
############### SET of ACES at DNS View ###############
#######################################################

##################################################################################################################
### Test Cases : Adding IPv4 Address to the DENY LIST and Blocking the client from updating the "LAST Queried" ###
##################################################################################################################

        @pytest.mark.run(order=150)
        def test_150_Add_IPV4_Address_to_the_DENY_List_at_default_dns_view_level(self):
                print("\n============================================\n")
                print("adding ipv4 address to the DENy List at default dns view level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(50) #wait for 40 secs for the member to get started
                print("\nTest Case 150 Execution Completed")
                
        @pytest.mark.run(order=151)
        def test_151_Validate_Added_IPV4_Address_in_the_DENY_List_at_default_dns_view_level(self):
                print("\n============================================\n")
                print("validating IPv4 address in the DENY LIST at default dns view ")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "'+config.client_v4+'"','"permission": "ALLOW"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 151 Execution Completed")
                
                
##############
## A record ##
##############


        @pytest.mark.run(order=152)
        def test_152_Adding_and_validating_the_records(self):
                print("\n============================================\n")
                print("Adding A record")
                print("\n============================================\n")
		data = {"ipv4addr": "10.0.0.12","name": "m.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created A record")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("Adding CNAME record")
                print("\n============================================\n")
		data = {"canonical": "test.com","name": "caa12.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:cname",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("\n============================================\n")
                print("Successfully created CNAME record")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("Adding UNKNOWN AFSDB record")
                print("\n============================================\n")
		data={"name": "afsdb12.test.com","record_type": "AFSDB","subfield_values": [{"field_type": "S","field_value": "10","include_length": "NONE"},{"field_type": "N","field_value": "www.exmple3000.com","include_length": "NONE"}],"view": "default","extattrs": { "IB Discovery Owned": {"value": "100"},"Site": { "value": "200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                print("\n============================================\n")
                print("Successfully created UNKNOWN AFSDB record")
                print("\n============================================\n")
		print("\n============================================\n")
		print("\n=======Validation===========================\n")
		print("\n============================================\n")
                print("\n============================================\n")
                print("Validating created A record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:a?name=m.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "m.test.com"','"ipv4addr": "10.0.0.12"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
                print("\n============================================\n")
                print("Validating created CNAME record ")
                print("\n============================================\n")
		output = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa12.test.com&_return_fields=name,canonical,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "caa12.test.com"','"canonical": "test.com"','"view": "default"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
		print("\n============================================\n")
                print("Validating UNKNOWN AFSDB record ")
                print("\n============================================\n")		
		output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=afsdb12.test.com&_return_fields=name,display_rdata",grid_vip=config.grid_vip)
                print(output)
                data = ['"display_rdata": "10 www.exmple3000.com."','"name": "afsdb12.test.com"']
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
		print("Test Case 152 Execution Completed")

        @pytest.mark.run(order=153)
        def test_153_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all records to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["m.test.com A\n","caa12.test.com CNAME\n"])
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 153 Execution Completed")

        @pytest.mark.run(order=154)
        def test_154_dig_afsdb_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig AFSDB Record to get last queried timestamp")
                print("\n============================================\n")
                dig_cmd = ('dig @'+str(config.grid_vip)+' afsdb12.test.com AFSDB' )
                print(dig_cmd)
                f = open(r'response.txt','w');
                for i in range(1,3000):
                       data = os.popen(dig_cmd).read()
                       f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 154 Execution Completed")

        @pytest.mark.run(order=155)
        def test_155_Validate_all_created_records_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validate A record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:a?name=m.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("A record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate CNAME record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa12.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("CNAME record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
		print("\n============================================\n")
                print("validate UNKNOWN AFSDB record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=afsdb12.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("UNKNOWN AFSDB not record updated with current grid date")
                print("\n============================================\n")
		print("Test Case 155 Execution Completed")
            
###################################################################################################################
##### Test Cases : Excluding IPv4 Address from DENY LIST and Allowing the client to update the "LAST Queried" #####
###################################################################################################################

        @pytest.mark.run(order=156)
        def test_156_Excluding_IPV4_Address_from_LAST_QUERIED_DENY_List_at_default_dns_view(self):
                print("\n============================================\n")
                print("excluding IPv4 address from LAST Queried DENY LIST")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 156 Execution Completed")
                
        @pytest.mark.run(order=157)
        def test_157_Validate_excluded_IPV4_address_in_the_DENY_List_at_default_dns_view(self):
                print("\n============================================\n")
                print("validating excluded IPv4 address in last queried deny list ")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = (config.client_v4,'"permission": "DENY"')
                for i in data:
                    if i in response:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 157 Execution Completed")            



##############
## A record ##
##############


        @pytest.mark.run(order=158)
        def test_158_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all records to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["m.test.com A\n","caa12.test.com CNAME\n"])
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 158 Execution Completed")

        @pytest.mark.run(order=159)
        def test_159_dig_afsdb_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig AFSDB Record to get last queried timestamp")
                print("\n============================================\n")
                dig_cmd = ('dig @'+str(config.grid_vip)+' afsdb12.test.com AFSDB' )
                print(dig_cmd)
                f = open(r'response.txt','w');
                for i in range(1,3000):
                       data = os.popen(dig_cmd).read()
                       f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 159 Execution Completed")

        @pytest.mark.run(order=160)
        def test_160_Validate_Updated_ALL_records_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:a?name=m.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
		output=convert(response)
                print("\n============================================\n")
                print("A record updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validating updated CNAME record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa12.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("CNAME record updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN AFSDB record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=afsdb12.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN AFSDB record updated with current grid date")
                print("\n============================================\n")
		print("Test Case 160 Execution Completed")


##################################################################################################################
### Test Cases : Adding IPv4 NETWORK to the DENY LIST and Blocking the clients from updating the "LAST Queried" ###
##################################################################################################################

        @pytest.mark.run(order=161)
        def test_161_Add_IPV4_NETWORK_to_the_Last_Queried_DENY_List_at_default_dns_view(self):
                print("\n============================================\n")
                print("adding IPv4 network to the last queried deny list ")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": "10.0.0.0/8", "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 161 Execution Completed")
               
	 
        @pytest.mark.run(order=162)
        def test_162_Validate_Added_IPV4_NETWORK_in_the_DENY_List_at_default_dns_view(self):
                print("\n============================================\n")
                print("validating added IPv4 network in the last queried deny list")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "10.0.0.0/8"','"permission": "ALLOW"']
		for i in data:
                	if i in response:
                    		assert True
                	else:
                    		assert False
                print(data)
                print("\nTest Case 162 Execution Completed")
               
##############
## A record ##
##############

        @pytest.mark.run(order=163)
        def test_163_Adding_and_Validating_records(self):
                print("\n============================================\n")
                print("Adding and validating A record")
                print("\n============================================\n")
		data = {"ipv4addr": "10.0.0.13","name": "n.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
		output = ib_NIOS.wapi_request('GET',object_type="record:a?name=n.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "n.test.com"','"ipv4addr": "10.0.0.13"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
                print("\n============================================\n")
                print("Successfully created A record")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("Adding CNAME record")
                print("\n============================================\n")
		data = {"canonical": "test.com","name": "caa13.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:cname",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa13.test.com&_return_fields=name,canonical,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "caa13.test.com"','"canonical": "test.com"','"view": "default"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
                print("\n============================================\n")
                print("Successfully created CNAME record")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("Adding UNKNOWN AFSDB record")
                print("\n============================================\n")
		data={"name": "afsdb13.test.com","record_type": "AFSDB","subfield_values": [{"field_type": "S","field_value": "10","include_length": "NONE"},{"field_type": "N","field_value": "www.exmple3000.com","include_length": "NONE"}],"view": "default","extattrs": { "IB Discovery Owned": {"value": "100"},"Site": { "value": "200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=afsdb13.test.com&_return_fields=name,display_rdata",grid_vip=config.grid_vip)
                print(output)
                data = ['"display_rdata": "10 www.exmple3000.com."','"name": "afsdb13.test.com"']
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Successfully created UNKNOWN AFSDB record")
                print("\n============================================\n")
                print("Test Case 163 Execution Completed")

        @pytest.mark.run(order=164)
        def test_164_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all records to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["n.test.com A\n","caa13.test.com CNAME\n"])
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 164 Execution Completed")

        @pytest.mark.run(order=165)
        def test_165_dig_afsdb_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig AFSDB Record to get last queried timestamp")
                print("\n============================================\n")
                dig_cmd = ('dig @'+str(config.grid_vip)+' afsdb13.test.com AFSDB' )
                print(dig_cmd)
                f = open(r'response.txt','w');
                for i in range(1,3000):
                       data = os.popen(dig_cmd).read()
                       f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 165 Execution Completed")


        @pytest.mark.run(order=166)
        def test_166_Validate_all_created_records_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validate A record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:a?name=n.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("A record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate CNAME record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa13.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("CNAME record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN AFSDB record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=afsdb13.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("UNKNOWN AFSDB not record updated with current grid date")
                print("\n============================================\n")
                print("Test Case 166 Execution Completed")

            
###################################################################################################################
##### Test Cases : Excluding IPv4 NETWORK from DENY LIST and Allowing the client to update the "LAST Queried" #####
###################################################################################################################

        @pytest.mark.run(order=167)
        def test_167_Exclude_IPV4_NETWORK_from_the_last_queried_DENY_LIST_at_default_dns_view_level(self):
                print("\n============================================\n")
                print("excluding ipv4 network from last queried deny list")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": "10.0.0.0/8", "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 167 Execution Completed")
                
        @pytest.mark.run(order=168)
        def test_168_Validate_Added_IPV4_NETWORK_in_the_DENY_List_at_default_dns_view(self):
                print("\n============================================\n")
                print("validating excluded ipv4 network from last queried deny list at default dns view")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "10.0.0.0/8"','"permission": "DENY"']
                for i in data:
                    if i in response:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 168 Execution Completed")            



##############
## A record ##
##############

        @pytest.mark.run(order=169)
        def test_169_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all records to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["n.test.com A\n","caa13.test.com CNAME\n"])
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 169 Execution Completed")

        @pytest.mark.run(order=170)
        def test_170_dig_afsdb_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig AFSDB Record to get last queried timestamp")
                print("\n============================================\n")
                dig_cmd = ('dig @'+str(config.grid_vip)+' afsdb13.test.com AFSDB' )
                print(dig_cmd)
                f = open(r'response.txt','w');
                for i in range(1,3000):
                       data = os.popen(dig_cmd).read()
                       f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 170 Execution Completed")

        @pytest.mark.run(order=171)
        def test_171_Validate_Updated_ALL_records_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:a?name=n.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("A record updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validating updated CNAME record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa13.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("CNAME record updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN AFSDB record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=afsdb13.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN AFSDB record updated with current grid date")
                print("\n============================================\n")
                print("Test Case 171 Execution Completed")

##################################################################################################################
### Test Cases : Adding IPv6 Address to the DENY LIST and Blocking the client from updating the "LAST Queried" ###
##################################################################################################################

        @pytest.mark.run(order=172)
        def test_172_Add_IPv6_Address_to_the_last_queried_DENY_List_at_default_dns_view_level(self):
                print("\n============================================\n")
                print("adding ipv6 address to the last queried deny list at default dns view level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v6, "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 172 Execution Completed")
	                
        @pytest.mark.run(order=173)
        def test_173_Validate_Added_IPv6_Address_in_the_last_queried_DENY_List_at_default_dns_view_level(self):
                print("\n============================================\n")
                print("validating added ipv6 address in the last queried deny list at default dns view level ")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "'+config.client_v6+'"','"permission": "ALLOW"']
                for i in data:
                	if i in response:
                    		assert True
                	else:
                    		assert False
                print(data)
                print("\nTest Case 173 Execution Completed")
                
                
##############
## A record ##
##############


        @pytest.mark.run(order=174)
        def test_174_Adding_and_validating_the_records(self):
                print("\n============================================\n")
                print("Adding A record")
                print("\n============================================\n")
		data = {"ipv4addr": "10.0.0.14","name": "o.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=o.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "o.test.com"','"ipv4addr": "10.0.0.14"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
                print("\n============================================\n")
                print("Successfully created A record")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("Adding CNAME record")
                print("\n============================================\n")
		data = {"canonical": "test.com","name": "caa14.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:cname",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa14.test.com&_return_fields=name,canonical,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "caa14.test.com"','"canonical": "test.com"','"view": "default"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
                print("\n============================================\n")
                print("Successfully created CNAME record")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("Adding UNKNOWN AFSDB record")
                print("\n============================================\n")
		data={"name": "afsdb14.test.com","record_type": "AFSDB","subfield_values": [{"field_type": "S","field_value": "10","include_length": "NONE"},{"field_type": "N","field_value": "www.exmple3000.com","include_length": "NONE"}],"view": "default","extattrs": { "IB Discovery Owned": {"value": "100"},"Site": { "value": "200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=afsdb14.test.com&_return_fields=name,display_rdata",grid_vip=config.grid_vip)
                print(output)
                data = ('"name": "afsdb14.test.com"')
                if data in output:
                        assert True
                else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Successfully created UNKNOWN AFSDB record")
                print("\n============================================\n")
                print("Test Case 174 Execution Completed")


        @pytest.mark.run(order=175)
        def test_175_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all records to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["o.test.com A\n","caa14.test.com CNAME\n"])
                f.close()
                #dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
		dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 175 Execution Completed")

        @pytest.mark.run(order=176)
        def test_176_dig_afsdb_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig AFSDB Record to get last queried timestamp")
                print("\n============================================\n")
                dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' afsdb14.test.com AFSDB' )
                print(dig_cmd)
                f = open(r'response.txt','w');
                for i in range(1,3000):
                       data = os.popen(dig_cmd).read()
                       f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 176 Execution Completed")

        @pytest.mark.run(order=177)
        def test_177_Validate_all_created_records_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validate A record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:a?name=o.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("A record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate CNAME record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa14.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("CNAME record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate UNKNOWN AFSDB record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=afsdb14.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("UNKNOWN AFSDB not record updated with current grid date")
                print("\n============================================\n")
                print("Test Case 177 Execution Completed")
            
###################################################################################################################
##### Test Cases : Excluding IPv6 Address from DENY LIST and Allowing the client to update the "LAST Queried" #####
###################################################################################################################

        @pytest.mark.run(order=178)
        def test_178_Exclude_IPv6_Address_from_the_last_queried_DENY_List_at_default_dns_view(self):
                print("\n============================================\n")
                print("excluding ipv6 address from last queried deny list ")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v6, "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 178 Execution Completed")
	                
        @pytest.mark.run(order=179)
        def test_179_Validate_excluded_IPv6_Address_in_the_last_queried_DENY_List_at_dns_default_dns_view(self):
                print("\n============================================\n")
                print("validating excluded IPv6 address in the last queried deny list at default dns view ")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "'+config.client_v6+'"','"permission": "DENY"']
                for i in data:
                    if i in response:
			print(i)
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 179 Execution Completed")            



##############
## A record ##
##############
	
        @pytest.mark.run(order=180)
        def test_180_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all records to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["o.test.com A\n","caa14.test.com CNAME\n"])
                f.close()
                #dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
		dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 180 Execution Completed")

        @pytest.mark.run(order=181)
        def test_181_dig_afsdb_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig AFSDB Record to get last queried timestamp")
                print("\n============================================\n")
                dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' afsdb14.test.com AFSDB' )
                print(dig_cmd)
                f = open(r'response.txt','w');
                for i in range(1,3000):
                       data = os.popen(dig_cmd).read()
                       f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 181 Execution Completed")

        @pytest.mark.run(order=182)
        def test_182_Validate_Updated_ALL_records_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
		response =ib_NIOS.wapi_request('GET',object_type="record:a?name=o.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("A record updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validating updated CNAME record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa14.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("CNAME record updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validating updated UNKNOWN AFSDB record last queried timestamp with grid current date")
                print("\n============================================\n")
		response = ib_NIOS.wapi_request('GET',"record:unknown?name=afsdb14.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN AFSDB record updated with current grid date")
                print("\n============================================\n")
                print("Test Case 182 Execution Completed")


###############################################################################################################################
### Test Cases : Adding IPv6 NETWORK to the Last Queried DENY LIST and Blocking the client from updating the "LAST Queried" ###
###############################################################################################################################

        @pytest.mark.run(order=183)
        def test_183_Add_IPv6_Network_to_the_Last_Queried_DENY_List_at_default_dns_view_level(self):
                print("\n============================================\n")
                print("adding IPv6 network to the last queried deny list at default DNS view level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v6_network+'::/64', "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 183 Execution Completed")

        @pytest.mark.run(order=184)
        def test_184_Validate_Added_IPv6_NETWORK_in_the_DENY_List_at_default_dns_view_level(self):
                print("\n============================================\n")
                print("validating added ipv6 network in the last queried deny list at default dns view")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "'+config.client_v6_network+'::/64','"permission": "ALLOW"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 184 Execution Completed")


##############
## A record ##
##############


        @pytest.mark.run(order=185)
        def test_185_Adding_and_validating_the_records(self):
                print("\n============================================\n")
                print("Adding A record")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.15","name": "p.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=p.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "p.test.com"','"ipv4addr": "10.0.0.15"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
                print("\n============================================\n")
                print("Successfully created A record")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("Adding CNAME record")
                print("\n============================================\n")
                data = {"canonical": "test.com","name": "caa15.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:cname",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa15.test.com&_return_fields=name,canonical,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "caa15.test.com"','"canonical": "test.com"','"view": "default"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
                print("\n============================================\n")
                print("Successfully created CNAME record")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("Adding UNKNOWN AFSDB record")
                print("\n============================================\n")
		data={"name": "afsdb15.test.com","record_type": "AFSDB","subfield_values": [{"field_type": "S","field_value": "10","include_length": "NONE"},{"field_type": "N","field_value": "www.exmple3000.com","include_length": "NONE"}],"view": "default","extattrs": { "IB Discovery Owned": {"value": "100"},"Site": { "value": "200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=afsdb15.test.com&_return_fields=name,display_rdata",grid_vip=config.grid_vip)
                print(output)
                data = ['"display_rdata": "10 www.exmple3000.com."','"name": "afsdb15.test.com"']
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Successfully created UNKNOWN AFSDB record")
                print("\n============================================\n")
                print("Test Case 185 Execution Completed")


        @pytest.mark.run(order=186)
        def test_186_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all records to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["p.test.com A\n","caa15.test.com CNAME\n"])
                f.close()
		dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 186 Execution Completed")

        @pytest.mark.run(order=187)
        def test_187_dig_afsdb_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig AFSDB Record to get last queried timestamp")
                print("\n============================================\n")
		dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' afsdb15.test.com AFSDB' )
                print(dig_cmd)
                f = open(r'response.txt','w');
                for i in range(1,3000):
                       data = os.popen(dig_cmd).read()
                       f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 187 Execution Completed")



        @pytest.mark.run(order=188)
        def test_188_Validate_all_created_records_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validate A record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=p.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("A record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("\n============================================\n")
                print("validate CNAME record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa15.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("CNAME record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("Test Case 188 Execution Completed")


        @pytest.mark.run(order=189)
        def test_189_Validate_UNKNOWN_AFSDB_records_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validate UNKNOWN AFSDB record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',"record:unknown?name=afsdb15.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("UNKNOWN AFSDB not record updated with current grid date")
                print("\n============================================\n")
                print("Test Case 189 Execution Completed")




##############################################################################################################################
### Test Cases : Excluding the IPv6 NETWORK from the DENY LIST and allowing client to update the "LAST Queried" time stamp ###
##############################################################################################################################

        @pytest.mark.run(order=190)
        def test_190_Exclude_IPv6_NETWORK_from_Last_queried_DENY_LIST_at_Default_DNS_view(self):
                print("\n============================================\n")
                print("Excluding IPv6 NETWORK from the last queried deny lsit ")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v6_network+'::/64', "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 190 Execution Completed")

        @pytest.mark.run(order=191)
        def test_191_Validate_Excluded_IPv6_NETWORK_in_the_DENY_List_at_Default_DNS_view(self):
                print("\n============================================\n")
                print("Validating excluded ipv6 network in last queried deny list at default dns view ")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "'+config.client_v6_network+'::/64','"permission": "DENY"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 191 Execution Completed")


        @pytest.mark.run(order=192)
        def test_192_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all records to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["p.test.com A\n","caa15.test.com CNAME\n"])
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 192 Execution Completed")

        @pytest.mark.run(order=193)
        def test_193_dig_afsdb_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig AFSDB Record to get last queried timestamp")
                print("\n============================================\n")
                dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' afsdb15.test.com AFSDB' )
                print(dig_cmd)
                f = open(r'response.txt','w');
                for i in range(1,3000):
                       data = os.popen(dig_cmd).read()
                       f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 193 Execution Completed")

        @pytest.mark.run(order=194)
        def test_194_Validate_Updated_ALL_records_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=p.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("A record updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("Test Case 194 Execution Completed")

        @pytest.mark.run(order=195)
        def test_195_Validate_Updated_CNAME_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating updated CNAME record last queried timestamp with grid current date")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa15.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("CNAME record updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("Test Case 195 Execution Completed")

        @pytest.mark.run(order=196)
        def test_196_Validate_Updated_UNKNOWN_AFSDB_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating updated UNKNOWN AFSDB record last queried timestamp with grid current date")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',"record:unknown?name=afsdb15.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN AFSDB record updated with current grid date")
                print("\n============================================\n")
                print("Test Case 196 Execution Completed")

##################################################################################################################
### Test Cases : Adding "ANY Address" to the DENY LIST and Blocking the client from updating the "LAST Queried" ###
##################################################################################################################

        @pytest.mark.run(order=197)
        def test_197_Add_ANY_Address_to_Last_Queried_DENY_List_at_default_DNS_view(self):
                print("\n============================================\n")
                print("adding ANY address to the last queried deny list at default dns view level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl": [{"address": "Any","permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 197 Execution Completed")


        @pytest.mark.run(order=198)
        def test_198_Validate_Added_ANY_Address_in_the_Last_Queried_DENY_List_at_Default_DNS_view_level(self):
                print("\n============================================\n")
                print("validating added ANY address in the last queried deny list at default dns view level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "Any"','"permission": "ALLOW"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 198 Execution Completed")



        @pytest.mark.run(order=199)
        def test_199_Adding_and_validating_A_record(self):
                print("\n============================================\n")
                print("Adding A record")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.16","name": "q.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=q.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "q.test.com"','"ipv4addr": "10.0.0.16"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
                print("\n============================================\n")
                print("Successfully created A record")
                print("\n============================================\n")
                print("\nTest Case 199 Execution Completed")

        @pytest.mark.run(order=200)
        def test_200_Adding_and_validating_CNAME_record(self):
                print("\n============================================\n")
                print("Adding CNAME record")
                print("\n============================================\n")
                data = {"canonical": "test.com","name": "caa16.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:cname",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa16.test.com&_return_fields=name,canonical,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "caa16.test.com"','"canonical": "test.com"','"view": "default"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
                print("\n============================================\n")
                print("Successfully created CNAME record")
                print("\n============================================\n")
                print("\n")
                print("\nTest Case 200 Execution Completed")

        @pytest.mark.run(order=201)
        def test_201_Adding_and_validating_the_records(self):
                print("\n============================================\n")
                print("Adding UNKNOWN AFSDB record")
                print("\n============================================\n")
                data={"name": "afsdb16.test.com","record_type": "AFSDB","subfield_values": [{"field_type": "S","field_value": "10","include_length": "NONE"},{"field_type": "N","field_value": "www.exmple3000.com","include_length": "NONE"}],"view": "default","extattrs": { "IB Discovery Owned": {"value": "100"},"Site": { "value": "200"}}}
                response = ib_NIOS.wapi_request('POST', object_type="record:unknown",fields=json.dumps(data))
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:unknown?name=afsdb16.test.com&_return_fields=name,display_rdata",grid_vip=config.grid_vip)
                print(output)
                data = ['"display_rdata": "10 www.exmple3000.com."','"name": "afsdb16.test.com"']
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
                print("\n============================================\n")
                print("Successfully created UNKNOWN AFSDB record")
                print("\n============================================\n")
                print("Test Case 201 Execution Completed")

        @pytest.mark.run(order=202)
        def test_202_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all records to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["q.test.com A\n","caa16.test.com CNAME\n"])
                f.close()
                digv4 = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(digv4)
                digv6 = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(digv6)
                cmd1 = os.system(digv4)
                cmd2 = os.system(digv6)
                print("Test Case 202 Execution Completed")


        @pytest.mark.run(order=203)
        def test_203_dig_afsdb_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig AFSDB Record to get last queried timestamp")
                print("\n============================================\n")
                dig_cmd = ('dig @'+str(config.grid_vip)+' afsdb16.test.com AFSDB' )
                print(dig_cmd)
                f = open(r'response.txt','w');
                for i in range(1,3000):
                       data = os.popen(dig_cmd).read()
                       f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 203 Execution Completed")


        @pytest.mark.run(order=204)
        def test_204_dig_afsdb_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig AFSDB Record to get last queried timestamp")
                print("\n============================================\n")
                dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' afsdb16.test.com AFSDB' )
                print(dig_cmd)
                f = open(r'response.txt','w');
                for i in range(1,3000):
                       data = os.popen(dig_cmd).read()
                       f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 204 Execution Completed")

        @pytest.mark.run(order=205)
        def test_205_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validate A record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=q.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("A record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("Test Case 205 Execution Completed")

        @pytest.mark.run(order=206)
        def test_206_Validate_CNAME_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validate CNAME record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa16.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("CNAME record not updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("Test Case 206 Execution Completed")

        @pytest.mark.run(order=207)
        def test_207_Validate_UNKNOWN_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validate UNKNOWN AFSDB record last queried timestamp should not update with grid current date")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',"record:unknown?name=afsdb16.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("\n============================================\n")
                print("UNKNOWN AFSDB not record updated with current grid date")
                print("\n============================================\n")
                print("Test Case 207 Execution Completed")

##############################################################################################################################
### Test Cases : Excluding "ANY ADDRESS" from the DENY LIST and allowing client to update the "LAST Queried" time stamp ###
##############################################################################################################################

        @pytest.mark.run(order=208)
        def test_208_Exclude_ANY_Address_from_Last_Queried_DENY_List_at_default_DNS_view(self):
                print("\n============================================\n")
                print("Excluding ANY Address from Last Queried DENY LIST")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl": [{"address": "Any","permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 208 Execution Completed")

        @pytest.mark.run(order=209)
        def test_209_Validate_excluded_ANY_Address_in_the_Last_Queried_DENY_LIST_at_default_DNS_VIEW(self):
                print("\n============================================\n")
                print("Validating excluded ANY Address in the last queried deny list at default dns view")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "Any"','"permission": "DENY"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 209 Execution Completed")


        @pytest.mark.run(order=210)
        def test_210_dig_all_created_records_in_above_case_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig all records to get last queried timestamp")
                print("\n============================================\n")
                f= open("7933.txt","w+")
                f.writelines(["q.test.com A\n","caa16.test.com CNAME\n"])
                f.close()
                digv4 = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(digv4)
                cmd1 = os.system(digv4)
                print("Test Case 210 Execution Completed")

        @pytest.mark.run(order=211)
        def test_211_dig_afsdb_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig AFSDB Record to get last queried timestamp")
                print("\n============================================\n")
                dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' afsdb16.test.com AFSDB' )
                print(dig_cmd)
                f = open(r'response.txt','w');
                for i in range(1,3000):
                       data = os.popen(dig_cmd).read()
                       f.write(data)
                f.close()
                textfile = open('response.txt', 'r')
                log_validation = textfile.read()
                textfile.close()
                if 'ANSWER: 1' in log_validation:
                        assert True
                else:
                        assert False
                print("Test Case 211 Execution Completed")

        @pytest.mark.run(order=212)
        def test_212_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=q.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("A record updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("Test Case 212 Execution Completed")



        @pytest.mark.run(order=213)
        def test_213_Validate_Updated_CNAME_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating updated CNAME record last queried timestamp with grid current date")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="record:cname?name=caa16.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("CNAME record updated with current grid date")
                print("\n============================================\n")
                print("\n")
                print("Test Case 213 Execution Completed")

        @pytest.mark.run(order=214)
        def test_214_Validate_Updated_UNKNOWN_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating updated UNKNOWN AFSDB record last queried timestamp with grid current date")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',"record:unknown?name=afsdb16.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("\n============================================\n")
                print("UNKNOWN AFSDB record updated with current grid date")
                print("\n============================================\n")
                print("Test Case 214 Execution Completed")


#####################################
####### Named ACLs at DNS View ######
#####################################

#########################################
### IPv4 Address with Allow permission ##
#########################################


        @pytest.mark.run(order=215)
        def test_215_Add_IPv4_Address_Named_ACL_with_Alow_Permission_in_Named_ACLs(self):
                print("\n============================================\n")
                print("Adding IPv4 Address Nam ACL with Allow Permission")
                print("\n============================================\n")
                data = {"name": "test1","access_list": [{"_struct": "addressac","address": config.client_v4,"permission": "ALLOW"}]}
                response = ib_NIOS.wapi_request('POST', object_type="namedacl",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                print("Test Case 215 Executuion Completed")


        @pytest.mark.run(order=216)
        def test_216_Validate_Created_IPv4_Address_Named_ACL(self):
                print("\n============================================\n")
                print("Validating created IPv4 Address Named ACL")
                print("\n============================================\n")
                data = ('"name": "test1"','"_struct": "addressac"','"address": "'+config.client_v4+'"','"permission": "ALLOW"')
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test1&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 216 Executuion Completed")

        @pytest.mark.run(order=217)
        def test_217_Associate_Created_IPv4_Address_Named_ACL_at_Default_DNS_VIEW(self):
                print("\n============================================\n")
                print("Associating created IPv4 Named ACL at default DNS VIEW")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test1",grid_vip=config.grid_vip)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                data={"last_queried_acl": [{"_ref": ref}]}
                view = ib_NIOS.wapi_request('GET', object_type="view",grid_vip=config.grid_vip)
                view=json.loads(view)[0]['_ref']
                view=eval(json.dumps(view))
                print(view)
                output = ib_NIOS.wapi_request('PUT',ref=view,fields=json.dumps(data))
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("\nTest Case 217 Execution Completed")

        @pytest.mark.run(order=218)
        def test_218_Validate_Associated_Named_ACL_at_Default_DNS_VIEW(self):
                print("\n============================================\n")
                print("Validating associated named acl at default dns view")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type='view?_return_fields=last_queried_acl',grid_vip=config.grid_vip)
                print(response)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test1",grid_vip=config.grid_vip)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                if ref in response:
                        assert True
                else:
                        assert False
                print(ref)
                print("\nTest Case 218 Execution Completed")


        @pytest.mark.run(order=219)
        def test_219_Add_and_Validate_A_record(self):
                print("\n============================================\n")
                print("Adding and validating A record for added zone")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.17","name": "r.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=r.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "r.test.com"','"ipv4addr": "10.0.0.17"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
                print("Test Case 219 Executuion Completed")


        @pytest.mark.run(order=220)
        def test_220_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' r.test.com A' )
                f= open("7933.txt","w+")
                f.write("r.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 220 Execution Completed")

        @pytest.mark.run(order=221)
        def test_221_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=r.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("Test Case 221 Execution Completed")


######################################################################
### IPv4 Address Named ACL with DENY permission at Default DNS VIEW ##
######################################################################

        @pytest.mark.run(order=222)
        def test_222_Change_IPv4_Address_Named_ACL_Permission_from_ALLOW_to_DENY_in_Named_ACLs(self):
                print("\n============================================\n")
                print("Changing the IPv4 Address Named ACL Permission from ALLOW to DENY")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test1",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"name": "test1","access_list": [{"_struct": "addressac","address": config.client_v4,"permission": "DENY"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 222 Executuion Completed")

        @pytest.mark.run(order=223)
        def test_223_Validate_modified_IPv4_Address_Named_ACL(self):
                print("\n============================================\n")
                print("Validating modified IPv4 Address named acl")
                print("\n============================================\n")
                data = ('"name": "test1"','"_struct": "addressac"','"address": "'+config.client_v4+'"','"permission": "DENY"')
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test1&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 223 Executuion Completed")

        @pytest.mark.run(order=224)
        def test_224_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' r.test.com A' )
                f= open("7933.txt","w+")
                f.write("r.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 224 Execution Completed")


        @pytest.mark.run(order=225)
        def test_225_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=r.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 225 Execution Completed")



############################################################
## IPv4 Network with Allow Permission at Default DNS VIEW ##
############################################################

        @pytest.mark.run(order=226)
        def test_226_Update_Named_ACL_with_IPv4_NETWORK_Alow_Permission(self):
                print("\n============================================\n")
                print("Updating the named acl with ipv4 network allow permission")
                print("\n============================================\n")
                #response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list&_return_as_object=1",grid_vip=config.grid_vip)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test1",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"name": "test1","access_list": [{"_struct": "addressac","address": "10.0.0.0/8","permission": "ALLOW"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 226 Executuion Completed")

        @pytest.mark.run(order=227)
        def test_227_Validate_Updated_Named_ACL(self):
                print("\n============================================\n")
                print("Validating the updated named acl")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test1&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ('"name": "test1"','"_struct": "addressac"','"address": "10.0.0.0/8"','"permission": "ALLOW"')
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 227 Executuion Completed")


        @pytest.mark.run(order=228)
        def test_228_Add_and_Validate_A_record(self):
                print("\n============================================\n")
                print("Adding and validating A record for added zone")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.18","name": "s.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=s.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "s.test.com"','"ipv4addr": "10.0.0.18"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("Test Case 228 Executuion Completed")


        @pytest.mark.run(order=229)
        def test_229_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' s.test.com A' )
                f= open("7933.txt","w+")
                f.write("s.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 229 Execution Completed")

        @pytest.mark.run(order=230)
        def test_230_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=s.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("Test Case 230 Execution Completed")



########################################################################
## Named ACL :  IPv4 NETWORK with DENY Permission at default DNS VIEW ##
########################################################################

        @pytest.mark.run(order=231)
        def test_231_Update_Named_ACL_with_IPv4_NETWORK_DENY_Permission(self):
                print("\n============================================\n")
                print("Updating named acl with ipv4 network deny permission")
                print("\n============================================\n")
                #response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list&_return_as_object=1",grid_vip=config.grid_vip)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test1",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"name": "test1","access_list": [{"_struct": "addressac","address": "10.0.0.0/8","permission": "DENY"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 231 Executuion Completed")

        @pytest.mark.run(order=232)
        def test_232_Validate_updated_Named_ACL(self):
                print("\n============================================\n")
                print("Validating updated namedacl")
                print("\n============================================\n")
                data = ('"name": "test1"','"_struct": "addressac"','"address": "10.0.0.0/8"','"permission": "DENY"')
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test1&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 232 Executuion Completed")

        @pytest.mark.run(order=233)
        def test_233_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' s.test.com A' )
                f= open("7933.txt","w+")
                f.write("s.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 233 Execution Completed")

        @pytest.mark.run(order=234)
        def test_234_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=s.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 234 Execution Completed")

########################################################################
## Named ACL : IPv6 Address with Allow Permission at Default DNS VIEW ##
########################################################################


        @pytest.mark.run(order=235)
        def test_235_Update_Named_ACL_with_IPv6_Address_ALLOW_Permission(self):
                print("\n============================================\n")
                print("Updating named acl with ipv6 address allow permission")
                print("\n============================================\n")
                #response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list&_return_as_object=1",grid_vip=config.grid_vip)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test1",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"name": "test1","access_list": [{"_struct": "addressac","address": config.client_v6,"permission": "ALLOW"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 235 Executuion Completed")

        @pytest.mark.run(order=236)
        def test_236_Validate_updated_IPv6_Address_Named_ACL(self):
                print("\n============================================\n")
                print("Validating updated ipv6 address named acl")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test1&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ('"name": "test1"','"_struct": "addressac"','"address": "'+config.client_v6+'"','"permission": "ALLOW"')
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 236 Executuion Completed")

        @pytest.mark.run(order=237)
        def test_237_Add_and_Validate_A_record(self):
                print("\n============================================\n")
                print("Adding and validating A record for added zone")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.19","name": "t.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=t.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "t.test.com"','"ipv4addr": "10.0.0.19"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("Test Case 237 Executuion Completed")


        @pytest.mark.run(order=238)
        def test_238_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' t.test.com A' )
                f= open("7933.txt","w+")
                f.write("t.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 238 Execution Completed")

        @pytest.mark.run(order=239)
        def test_239_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=t.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("Test Case 239 Execution Completed")


########################################################################
## Named ACL : IPv6 ADDRESS with DENY Permission at Default DNS VIEW  ##
########################################################################

        @pytest.mark.run(order=240)
        def test_240_Update_Named_ACL_with_IPv6_Address_DENY_Permission(self):
                print("\n============================================\n")
                print("Updating named acl with ipv6 address deny permission")
                print("\n============================================\n")
                #response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list&_return_as_object=1",grid_vip=config.grid_vip)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test1",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"name": "test1","access_list": [{"_struct": "addressac","address": config.client_v6,"permission": "DENY"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 240 Executuion Completed")

        @pytest.mark.run(order=241)
        def test_241_Validate_updated_IPv6_Address_Named_ACL(self):
                print("\n============================================\n")
                print("validating updated ipv6 address named acl")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test1&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ('"name": "test1"','"_struct": "addressac"','"address": "'+config.client_v6+'"','"permission": "DENY"')
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 241 Executuion Completed")

        @pytest.mark.run(order=242)
        def test_242_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' t.test.com A' )
                f= open("7933.txt","w+")
                f.write("t.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 242 Execution Completed")

        @pytest.mark.run(order=243)
        def test_243_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=t.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 243 Execution Completed")


########################################################################
## Named ACL : IPv6 Network with Allow Permission at Default DNS VIEW ##
########################################################################


        @pytest.mark.run(order=244)
        def test_244_UPDATE_Named_ACL_with_IPv6_Network_Alow_Permission(self):
                print("\n============================================\n")
                print("Updating named acl with ipv6 network allow permission")
                print("\n============================================\n")
                #response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list&_return_as_object=1",grid_vip=config.grid_vip)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test1",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"name": "test1","access_list": [{"_struct": "addressac","address": config.client_v6_network+'::/64',"permission": "ALLOW"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 244 Executuion Completed")

        @pytest.mark.run(order=245)
        def test_245_Validate_updated_Named_ACL(self):
                print("\n============================================\n")
                print("validating updated named acl")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test1&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ('"name": "test1"','"_struct": "addressac"','"address": "'+config.client_v6_network+'::/64"','"permission": "ALLOW"')
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 245 Executuion Completed")


        @pytest.mark.run(order=246)
        def test_246_Add_and_Validate_A_record(self):
                print("\n============================================\n")
                print("Adding and validating A record for added zone")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.20","name": "u.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=u.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "u.test.com"','"ipv4addr": "10.0.0.20"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("Test Case 246 Executuion Completed")


        @pytest.mark.run(order=247)
        def test_247_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' u.test.com A' )
                f= open("7933.txt","w+")
                f.write("u.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 247 Execution Completed")

        @pytest.mark.run(order=248)
        def test_248_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' u.test.com A' )
                f= open("7933.txt","w+")
                f.write("u.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 248 Execution Completed")

        @pytest.mark.run(order=249)
        def test_249_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=u.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("Test Case 249 Execution Completed")

#######################################################################
## Named ACL : IPv6 Network with DENY Permission at Default DNS VIEW ##
#######################################################################


        @pytest.mark.run(order=250)
        def test_250_Update_Named_ACL_with_IPv6_NETWORK_DENY_Permission(self):
                print("\n============================================\n")
                print("Updating named acl with ipv6 network deny permission")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test1",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"name": "test1","access_list": [{"_struct": "addressac","address": config.client_v6_network+'::/64',"permission": "DENY"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 250 Executuion Completed")

        @pytest.mark.run(order=251)
        def test_251_Validate_updated_Named_ACL(self):
                print("\n============================================\n")
                print("validating updated named acl")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test1&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ('"name": "test1"','"_struct": "addressac"','"address": "'+config.client_v6_network+'::/64"','"permission": "DENY"')
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 251 Executuion Completed")


##############
## A record ##
##############

        @pytest.mark.run(order=252)
        def test_252_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' u.test.com A' )
                f= open("7933.txt","w+")
                f.write("u.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 252 Execution Completed")

        @pytest.mark.run(order=253)
        def test_253_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=u.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 253 Execution Completed")


#######################################################################
## Named ACL : ANY Address with Allow Permission at Default DNS VIEW ##
#######################################################################


        @pytest.mark.run(order=254)
        def test_254_Update_Named_ACL_with_ANY_Address_ALLOW_Permission(self):
                print("\n============================================\n")
                print("Updating named acl with ANY address ALLoW permission")
                print("\n============================================\n")
                #response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list&_return_as_object=1",grid_vip=config.grid_vip)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test1",grid_vip=config.grid_vip)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"access_list": [{"_struct": "addressac","address": "Any","permission": "ALLOW"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 254 Executuion Completed")

        @pytest.mark.run(order=255)
        def test_255_Validate_updated_named_acl(self):
                print("\n============================================\n")
                print("validating updated named acl")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test1&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ('"name": "test1"','"_struct": "addressac"','"address": "Any"','"permission": "ALLOW"')
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 255 Executuion Completed")
	
##############
## A record ##
##############

        @pytest.mark.run(order=256)
        def test_256_Add_and_Validate_A_record(self):
                print("\n============================================\n")
                print("Adding and validating A record for added zone")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.21","name": "u1.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=u1.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "u1.test.com"','"ipv4addr": "10.0.0.21"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
                print("Test Case 256 Executuion Completed")

	
        @pytest.mark.run(order=257)
        def test_257_Dig_and_validate_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' u1.test.com A' )
                f= open("7933.txt","w+")
                f.write("u1.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=u1.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("Test Case 257 Execution Completed")
	
        @pytest.mark.run(order=258)
        def test_258_Dig_from_IPv6_IP_and_validate_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record from IPv6 to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' u1.test.com A' )
                f= open("7933.txt","w+")
                f.write("u1.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=u1.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 258 Execution Completed")

	
#########################################################################
### Named ACL  : ANY Address with DENY Permission at Default DNS VIEW ###
#########################################################################

        @pytest.mark.run(order=259)
        def test_259_Update_Named_ACL_with_ANY_Address_DENY_Permission(self):
                print("\n============================================\n")
                print("Updating named acl with ANY address DENY permission")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test1",grid_vip=config.grid_vip)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                #data = {"last_queried_acl": [{"address": "Any","permission": "DENY"}]}
		data = {"access_list": [{"_struct": "addressac","address": "Any","permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 259 Execution Completed")

        @pytest.mark.run(order=260)
        def test_260_Validate_updated_Named_ACL(self):
                print("\n============================================\n")
                print("validating updated_ named acl")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test1&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "Any"','"permission": "DENY"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 260 Execution Completed")

	
##############
## A record ##
##############

        @pytest.mark.run(order=261)
        def test_261_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' u1.test.com A' )
                f= open("7933.txt","w+")
                f.write("u1.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 261 Execution Completed")


        @pytest.mark.run(order=262)
        def test_262_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=u1.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 262 Execution Completed")




##############################################               
########## Authoritative Zone Scenarios ######
##############################################   


#######################################################
## At DNS view Last Queried setting to "NONE" option ##
#######################################################

        @pytest.mark.run(order=263)
        def test_263_Last_Queried_ACL_setting_to_NONE_at_Default_DNS_VIEW(self):
                print("\n============================================\n")
                print("Last Queried ACL setting to NONE at default DNS VIEW")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET', object_type="view")
                ref = json.loads(get_ref)[0]['_ref']
                print(ref)
                data = {"last_queried_acl": []}
                response = ib_NIOS.wapi_request('PUT',ref= ref,fields=json.dumps(data))
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("Test Case 263 Execution Completed")
            

############################################################
### At Authoritative zone DNS scavenging setting to "NONE" option ###
############################################################
            
	            
        @pytest.mark.run(order=264)
        def test_264_Enable_enable_rr_last_queried_and_enable_zone_last_queried_at_Authoritative_zone(self):
                print("\n============================================\n")
                print("Enabling RR last queried and zone last queried monitor at authoritative zone")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"use_scavenging_settings": True}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                get_ref = ib_NIOS.wapi_request('GET', object_type="zone_auth?fqdn=test.com")
                ref1 = json.loads(get_ref)[0]['_ref']
                print ref1
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT',ref= ref1,fields=json.dumps(data))
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("Test Case 264 Execution Completed")

	
        @pytest.mark.run(order=265)
        def test_265_Validate_enabled_timestamp_monitor_RR_and_zone_at_Authoritative_zone(self):
                print("\n============================================\n")
                print("Validating enabled timestamp monitor for RR and zone at authoritative zone")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                #print(ref)
                output = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(output)
                data = ['"enable_rr_last_queried": true','"enable_zone_last_queried": true']
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
                print("\n")
                print("Test Case 265 Execution Completed")
	
            
##############
## A record ##
##############
	
        @pytest.mark.run(order=266)
        def test_266_Add_and_Validate_and_Dig_operation_for_A_record(self):
                print("\n============================================\n")
                print("Adding and validating and doing dig operation for A record")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.22","name": "v.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=v.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "v.test.com"','"ipv4addr": "10.0.0.22"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                #dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' v.test.com A' )
                f= open("7933.txt","w+")
                f.write("v.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 266 Executuion Completed")
	
        @pytest.mark.run(order=267)
        def test_267_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=v.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 267 Execution Completed")


#################
## aaaa record ##
#################

        @pytest.mark.run(order=268)
        def test_268_Add_and_validate_AAAA_record(self):
                print("\n============================================\n")
                print("Adding and validating aaaa record")
                print("\n============================================\n")
                print ("Creating  aaaa Record for added Zone")
                data = {"ipv6addr": "2620:10a:6000:2400::12","name": "aaaa11.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:aaaa",fields=json.dumps(data))
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:aaaa?name=aaaa11.test.com",grid_vip=config.grid_vip)
                print(output)
                result = ['"ipv6addr": "2620:10a:6000:2400::12"','"name": "aaaa11.test.com"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
                print("Test Case 268 Execution Completed")

        @pytest.mark.run(order=269)
        def test_269_dig_AAAA_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig aaaa Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' aaaa11.test.com AAAA' )
                f= open("7933.txt","w+")
                f.write("aaaa11.test.com AAAA")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 269 Execution Completed")

        @pytest.mark.run(order=270)
        def test_270_Validate_Updated_AAAA_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated aaaa record last queried timestamp with grid current date")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',"record:aaaa?name=aaaa11.test.com&_return_fields%2B=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert(response)
                print("Test Case 270 Execution Completed")



#############################################################
############### SET of ACES at Authority Zone ###############
#############################################################

##################################################################################################################
###  Adding IPv4 Address to the DENY LIST and Blocking the client from updating the "LAST Queried" ###
##################################################################################################################

        @pytest.mark.run(order=271)
        def test_271_Allow_IPV4_Address_to_the_DENY_List_at_zone_level(self):
                print("\n============================================\n")
                print("Allowing IPv4 address to the DENY list at zone level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 271 Execution Completed")
	
        @pytest.mark.run(order=272)
        def test_272_Validate_Added_IPV4_Address_in_the_DENY_List_at_zone_level(self):
                print("\n============================================\n")
                print("Validating added IPv4 Address in the DENY LIST at zone level")
                print("\n============================================\n")
		get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "'+config.client_v4+'"','"permission": "ALLOW"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 272 Execution Completed")
	
##############
## A record ##
##############

        @pytest.mark.run(order=273)
        def test_273_Add_and_Validate_A_record(self):
                print("\n============================================\n")
                print("Adding and validating A record for added zone")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.23","name": "w.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=w.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "w.test.com"','"ipv4addr": "10.0.0.23"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
                print("Test Case 273 Executuion Completed")


        @pytest.mark.run(order=274)
        def test_274_Dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' w.test.com A' )
                f= open("7933.txt","w+")
                f.write("w.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 274 Execution Completed")

        @pytest.mark.run(order=275)
        def test_275_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=w.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 275 Execution Completed")


##################################################################################################################
##### Test Cases : Excluding IPv4 Address from DENY LIST and Allowing the client to update the "LAST Queried" ####
##################################################################################################################

        @pytest.mark.run(order=276)
        def test_276_Excluding_IPv4_Address_from_the_Last_Queried_DENY_LIST_at_Zone_Level(self):
                print("\n============================================\n")
                print("Exception IPv4 Address from the last queried deny lsit")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 276 Execution Completed")
	
        @pytest.mark.run(order=277)
        def test_277_Validate_excluded_IPV4_Address_in_the_Last_Queried_DENY_List(self):
                print("\n============================================\n")
                print("Validating excluded IPv4 address in the last queried deny list")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "'+config.client_v4+'"','"permission": "DENY"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 277 Execution Completed")
	
##############
## A record ##
##############

        @pytest.mark.run(order=278)
        def test_278_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' w.test.com A' )
                f= open("7933.txt","w+")
                f.write("w.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 278 Executuion Completed")

        @pytest.mark.run(order=279)
        def test_279_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=w.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 279 Execution Completed")




##################################################################################################################
### Test Cases : Adding IPv4 NETWORK to the DENY LIST and Blocking the clients from updating the "LAST Queried" ###
##################################################################################################################

        @pytest.mark.run(order=280)
        def test_280_Adding_IPv4_NETWORK_to_the_LAST_Queried_DENY_LIST_at_Zone_level(self):
                print("\n============================================\n")
                print("Adding IPv4 Network to the last queried deny list at zone level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": "10.0.0.0/8", "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 280 Execution Completed")
	
        @pytest.mark.run(order=281)
        def test_281_Validate_Added_IPV4_NETWORK_in_the_Last_Queried_DENY_List_at_Zone_level(self):
                print("\n============================================\n")
                print("validating IPv4 Network in the last queried deny list")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "10.0.0.0/8"','"permission": "ALLOW"']
                for i in data:
                	if i in response:
                    		assert True
                	else:
                    		assert False
                print(data)
                print("\nTest Case 281 Execution Completed")


##############
## A record ##
##############

        @pytest.mark.run(order=282)
        def test_282_Add_and_Validate_A_record(self):
                print("\n============================================\n")
                print("Adding and validating A record for added zone")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.24","name": "x.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=x.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "x.test.com"','"ipv4addr": "10.0.0.24"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
                print("Test Case 282 Executuion Completed")


        @pytest.mark.run(order=283)
        def test_283_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' x.test.com A' )
                f= open("7933.txt","w+")
                f.write("x.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 283 Execution Completed")

        @pytest.mark.run(order=284)
        def test_284_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=x.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 284 Execution Completed")


###################################################################################################################
##### Test Cases : Excluding IPv4 NETWORK from DENY LIST and Allowing the client to update the "LAST Queried" #####
###################################################################################################################

        @pytest.mark.run(order=285)
        def test_285_Excluding_IPv4_NETWORK_from_the_Last_Queried_DENY_List_at_Zone_level(self):
                print("\n============================================\n")
                print("Excluding IPv4 Network from the last queried deny list")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": "10.0.0.0/8", "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 285 Execution Completed")

        @pytest.mark.run(order=286)
        def test_286_Validate_Excluded_IPV4_NETWORK_in_the_Last_Queried_DENY_List_at_zone_level(self):
                print("\n============================================\n")
                print("Validating excluded IPv4 Network in the last queried deny list ")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "10.0.0.0/8"','"permission": "DENY"']
                for i in data:
                    if i in response:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 286 Execution Completed")


##############
## A record ##
##############

        @pytest.mark.run(order=287)
        def test_287_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' x.test.com A' )
                f= open("7933.txt","w+")
                f.write("x.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 287 Execution Completed")


        @pytest.mark.run(order=288)
        def test_288_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=x.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 288 Execution Completed")


##################################################################################################################
### Test Cases : Adding IPv6 Address to the DENY LIST and Blocking the client from updating the "LAST Queried" ###
##################################################################################################################

        @pytest.mark.run(order=289)
        def test_289_Adding_IPv6_Address_to_the_LAST_Queried_DENY_LIST_at_Zone_Level(self):
                print("\n============================================\n")
                print("Adding IPv6 Address to the last queried deny list at zone level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v6, "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 289 Execution Completed")
	
        @pytest.mark.run(order=290)
        def test_290_Validate_Added_IPv6_Address_in_the_lAST_Queried_DENY_LIST_at_Zone_Level(self):
                print("\n============================================\n")
                print("Validating IPv6 address in the Last Queried DENY LIST at ZOne level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "'+config.client_v6+'"','"permission": "ALLOW"']
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print(data)
                print("\nTest Case 290 Execution Completed")


##############
## A record ##
##############

        @pytest.mark.run(order=291)
        def test_291_Add_and_Validate_A_record(self):
                print("\n============================================\n")
                print("Adding and validating A record for added zone")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.25","name": "y.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=y.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "y.test.com"','"ipv4addr": "10.0.0.25"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
                print("Test Case 291 Executuion Completed")


        @pytest.mark.run(order=292)
        def test_292_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' y.test.com A' )
                f= open("7933.txt","w+")
                f.write("y.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 292 Execution Completed")

        @pytest.mark.run(order=293)
        def test_293_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=y.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 293 Execution Completed")



###################################################################################################################
##### Test Cases : Excluding IPv6 Address from DENY LIST and Allowing the client to update the "LAST Queried" #####
###################################################################################################################

        @pytest.mark.run(order=294)
        def test_294_Excluding_IPv6_Address_from_the_Last_Queried_DENY_List_at_Zone_level(self):
                print("\n============================================\n")
                print("Excluding IPv6 Address from the LAst Queried DENY LIST at zone level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v6, "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 294 Execution Completed")
	
        @pytest.mark.run(order=295)
        def test_295_Validate_excluded_IPv6_Address_in_the_DENY_List_at_Zone_Level(self):
                print("\n============================================\n")
                print("validating excluded ipv6 address in the last queried deny list at zone level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "'+config.client_v6+'"','"permission": "DENY"']
                for i in data:
                    if i in response:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 295 Execution Completed")


##############
## A record ##
##############

        @pytest.mark.run(order=296)
        def test_296_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' y.test.com A' )
                f= open("7933.txt","w+")
                f.write("y.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 296 Execution Completed")


        @pytest.mark.run(order=297)
        def test_297_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=y.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 297 Execution Completed")



##################################################################################################################
### Test Cases : Adding IPv6 NETWORK to the DENY LIST and Blocking the client from updating the "LAST Queried" ###
##################################################################################################################

        @pytest.mark.run(order=298)
        def test_298_Adding_IPv6_NETWORK_to_the_LAST_Queried_DENY_LIST_at_Zone_level(self):
                print("\n============================================\n")
                print("Adding IPv6 Network to the LAST Queried DENY LIST at Zone Level ")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v6_network+'::/64', "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 298 Execution Completed")
	
        @pytest.mark.run(order=299)
        def test_299_Validate_added_IPv6_NETWORK_in_the_Last_Queried_DENY_List_at_Zone_Level(self):
                print("\n============================================\n")
                print("validating added IPv6 Network in the LAST Queried DENY List at Zone Level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "'+config.client_v6_network+'::/64"','"permission": "ALLOW"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 299 Execution Completed")



##############
## A record ##
##############

        @pytest.mark.run(order=300)
        def test_300_Add_and_Validate_A_record(self):
                print("\n============================================\n")
                print("Adding and validating A record for added zone")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.26","name": "z.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=z.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "z.test.com"','"ipv4addr": "10.0.0.26"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
                print("Test Case 300 Executuion Completed")


        @pytest.mark.run(order=301)
        def test_301_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' z.test.com A' )
                f= open("7933.txt","w+")
                f.write("z.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 301 Execution Completed")

        @pytest.mark.run(order=302)
        def test_302_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=z.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert1(response)
                print("Test Case 302 Execution Completed")



##############################################################################################################################
### Test Cases : Excluding the IPv6 NETWORK from the DENY LIST and allowing client to update the "LAST Queried" time stamp ###
##############################################################################################################################

        @pytest.mark.run(order=303)
        def test_303_Excluding_IPv6_Network_from_the_Last_queried_DENY_List_at_Zone_level(self):
                print("\n============================================\n")
                print("Excluding IPv6 Network from the last queried deny list at zone level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v6_network+'::', "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 303 Execution Completed")
	
        @pytest.mark.run(order=304)
        def test_304_Validate_Added_IPv6_NETWORK_in_the_Last_Queried_DENY_List_at_Zone_level(self):
                print("\n============================================\n")
                print("Validating added IPv6 Network in the last queried deny list at zone level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "'+config.client_v6_network+'::"','"permission": "DENY"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 304 Execution Completed")


##############
## A record ##
##############

        @pytest.mark.run(order=305)
        def test_305_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' z.test.com A' )
                f= open("7933.txt","w+")
                f.write("z.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 305 Execution Completed")


        @pytest.mark.run(order=306)
        def test_306_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=z.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 306 Execution Completed")



##################################################################################################################
### Test Cases : Adding "ANY Address" to the DENY LIST and Blocking the client from updating the "LAST Queried" ###
##################################################################################################################

        @pytest.mark.run(order=307)
        def test_307_Adding_ANY_Address_to_the_Last_queried_DENY_LIST_at_Zone_level(self):
                print("\n============================================\n")
                print("Adding ANY Address to the last queried denylist at zone level ")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl": [{"address": "Any","permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 307 Execution Completed")

        @pytest.mark.run(order=308)
        def test_308_Validate_Added_ANY_Address_in_the_Last_Queried_DENY_List_at_Zone_level(self):
                print("\n============================================\n")
                print("Validating added ANY address in the last queried denylist at zone level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "Any"','"permission": "ALLOW"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 308 Execution Completed")


##############
## A record ##
##############

        @pytest.mark.run(order=309)
        def test_309_Add_and_Validate_A_record(self):
                print("\n============================================\n")
                print("Adding and validating A record for added zone")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.31","name": "1.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=1.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "1.test.com"','"ipv4addr": "10.0.0.31"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
                print("Test Case 309 Executuion Completed")


        @pytest.mark.run(order=310)
        def test_310_dig_and_validate_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig and validate A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 1.test.com A' )
                f= open("7933.txt","w+")
                f.write("1.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=1.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 310 Execution Completed")

        @pytest.mark.run(order=311)
        def test_311_dig_and_validate_A_record_from_ipv6_ip_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig and validateA Record from  ipv6 ip to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' 1.test.com A' )
                f= open("7933.txt","w+")
                f.write("1.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=1.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 311 Execution Completed")


##############################################################################################################################
### Test Cases : Excluding "ANY ADDRESS" from the DENY LIST and allowing client to update the "LAST Queried" time stamp ###
##############################################################################################################################

        @pytest.mark.run(order=312)
        def test_312_Exclude_ANY_Address_from_the_Last_Queried_DENY_List_at_zone_level(self):
                print("\n============================================\n")
                print("Excluding ANY address from the last queried deny list at zone level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl": [{"address": "Any","permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 312 Execution Completed")
	
        @pytest.mark.run(order=313)
        def test_313_Validate_excluded_ANY_Address_in_the_Last_Queried_DENY_List_at_zone_level(self):
                print("\n============================================\n")
                print("Validating excluded ANY address in the last queried deny list at zone level  ")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "Any"','"permission": "DENY"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 313 Execution Completed")

##############
## A record ##
##############

        @pytest.mark.run(order=314)
        def test_314_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 1.test.com A' )
                f= open("7933.txt","w+")
                f.write("1.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 314 Execution Completed")


        @pytest.mark.run(order=315)
        def test_315_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=1.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 315 Execution Completed")



#################################################
####### Named ACLs Scenarios at zone level ######
#################################################

#############################################################################
### Named ACL : IPv4 Address Named ACL with Allow permission at zone level ##
#############################################################################


        @pytest.mark.run(order=316)
        def test_316_Create_IPv4_Named_ACL_with_ALLOW_permission_in_Named_ACLs(self):
                print("\n============================================\n")
                print("creating IPv4 Address Named ACL with ALLOW permission in Named ACLs")
                print("\n============================================\n")
                data = {"name": "test2","access_list": [{"_struct": "addressac","address": config.client_v4,"permission": "ALLOW"}]}
                response = ib_NIOS.wapi_request('POST', object_type="namedacl",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(30) #wait for 20 secs for the member to get started
                print("Test Case 316 Executuion Completed")

        @pytest.mark.run(order=317)
        def test_317_Validate_Created_IPv4_Address_Named_ACL(self):
                print("\n============================================\n")
                print("Validating created IPv4 Named ACL")
                print("\n============================================\n")
                data = ('"name": "test2"','"_struct": "addressac"','"address": "'+config.client_v4+'"','"permission": "ALLOW"')
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test2&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                for i in data:
                    if i in response:
                        assert True
                    else:
                        assert False
                print(data)
                print("Test Case 317 Executuion Completed")
	
	
        @pytest.mark.run(order=318)
        def test_318_Add_Created_IPv4_Address_Named_ACL_at_zone_level(self):
                print("\n============================================\n")
                print("Adding created IPv4 named acl at zone level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test2",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                data={"last_queried_acl": [{"_ref": ref}]}
                print(data)
                grid_dns = ib_NIOS.wapi_request('GET', object_type='zone_auth?fqdn=test.com',grid_vip=config.grid_vip)
                print(grid_dns)
                grid_dns=json.loads(grid_dns)[0]['_ref']
                grid_dns=eval(json.dumps(grid_dns))
                output = ib_NIOS.wapi_request('PUT',ref=grid_dns,fields=json.dumps(data))
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("\nTest Case 318 Execution Completed")


        @pytest.mark.run(order=319)
        def test_319_Validate_Added_Named_ACL_at_Zone_Level(self):
                print("\n============================================\n")
                print("validating added named acl at zone level")
                print("\n============================================\n")
                output = ib_NIOS.wapi_request('GET', object_type='zone_auth?fqdn=test.com',grid_vip=config.grid_vip)
                ref=json.loads(output)[0]['_ref']
                ref = eval(json.dumps(ref))
                output = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(output)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test2",grid_vip=config.grid_vip)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                if ref in output:
                        assert True
                else:
                        assert False
                print(ref)
                print("\nTest Case 319 Execution Completed")


	

##############
## A record ##
##############

        @pytest.mark.run(order=320)
        def test_320_Add_and_Validate_A_record(self):
                print("\n============================================\n")
                print("Adding and validating A record for added zone")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.32","name": "2.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=2.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "2.test.com"','"ipv4addr": "10.0.0.32"']
                for i in result:
                        if i in output:
                                assert True
                        else:
                                assert False
                print(result)
                print("Test Case 320 Executuion Completed")


        @pytest.mark.run(order=321)
        def test_321_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 2.test.com A' )
                f= open("7933.txt","w+")
                f.write("2.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 321 Execution Completed")

        @pytest.mark.run(order=322)
        def test_322_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=2.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 322 Execution Completed")


############################################################################
## Named ACL  : IPv4 Address Named ACL with DENY Permission at zone level ##
############################################################################

        @pytest.mark.run(order=323)
        def test_323_Update_Named_ACL_with_IPv4_Address_DENY_Permission_in_Named_ACLs(self):
                print("\n============================================\n")
                print("Adding IPv4 address named acl with DENy permission at zone level")
                print("\n============================================\n")
                #response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list&_return_as_object=1",grid_vip=config.grid_vip)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test2",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"name": "test2","access_list": [{"_struct": "addressac","address": config.client_v4,"permission": "DENY"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(30) #wait for 20 secs for the member to get started
                print("Test Case 323 Executuion Completed")

        @pytest.mark.run(order=324)
        def test_324_Validate_added_IPv4_named_ACL_at_Zone_level(self):
                print("\n============================================\n")
                print("validating added ipv4 named acl at zone level")
                print("\n============================================\n")
                data = ('"name": "test2"','"_struct": "addressac"','"address": "'+config.client_v4+'"','"permission": "DENY"')
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test2&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 324 Executuion Completed")


##############
## A record ##
##############

        @pytest.mark.run(order=325)
        def test_325_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 2.test.com A' )
                f= open("7933.txt","w+")
                f.write("2.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 325 Execution Completed")


        @pytest.mark.run(order=326)
        def test_326_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=2.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 326 Execution Completed")


#################################################################
## Named ACL: IPv4 Network with Allow Permission at zone level ##
#################################################################


        @pytest.mark.run(order=327)
        def test_327_Add_IUpdate_Named_ACL_with_IPv4_NETWORK_Alow_Permission_in_Named_ACLs(self):
                print("\n============================================\n")
                print("Updating the named acl with ipv4 network allow permission in named acls ")
                print("\n============================================\n")
                #response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list&_return_as_object=1",grid_vip=config.grid_vip)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test2",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"name": "test2","access_list": [{"_struct": "addressac","address": "10.0.0.0/8","permission": "ALLOW"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 20 secs for the member to get started
                print("Test Case 327 Executuion Completed")

        @pytest.mark.run(order=328)
        def test_328_Validate_Updated_Named_ACL(self):
                print("\n============================================\n")
                print("validating the updated named acl")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test2&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ('"name": "test2"','"_struct": "addressac"','"address": "10.0.0.0/8"','"permission": "ALLOW"')
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 328 Executuion Completed")


##############
## A record ##
##############

        @pytest.mark.run(order=329)
        def test_329_Add_and_Validate_A_record(self):
                print("\n============================================\n")
                print("Adding and validating A record for added zone")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.33","name": "3.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=3.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "3.test.com"','"ipv4addr": "10.0.0.33"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("Test Case 329 Executuion Completed")


        @pytest.mark.run(order=330)
        def test_330_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 3.test.com A' )
                f= open("7933.txt","w+")
                f.write("3.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 330 Execution Completed")

        @pytest.mark.run(order=331)
        def test_331_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=3.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 331 Execution Completed")


####################################################
## IPv4 NETWORK with DENY Permission at Named ACL ##
####################################################

        @pytest.mark.run(order=332)
        def test_332_Update_Named_ACL_with_IPv4_NETWORK_DENY_Permission_in_Named_ACLs(self):
                print("\n============================================\n")
                print("Updating the named acl with ipv4 network allow permission in named acls")
                print("\n============================================\n")
                #response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list&_return_as_object=1",grid_vip=config.grid_vip)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test2",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"name": "test2","access_list": [{"_struct": "addressac","address": "10.0.0.0/8","permission": "DENY"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 20 secs for the member to get started
                print("Test Case 332 Executuion Completed")

        @pytest.mark.run(order=333)
        def test_333_Validate_Updated_Named_ACL(self):
                print("\n============================================\n")
                print("validating the updated named acl")
                print("\n============================================\n")
                data = ('"name": "test2"','"_struct": "addressac"','"address": "10.0.0.0/8"','"permission": "DENY"')
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test2&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 333 Executuion Completed")


##############
## A record ##
##############

        @pytest.mark.run(order=334)
        def test_334_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 3.test.com A' )
                f= open("7933.txt","w+")
                f.write("3.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 334 Execution Completed")


        @pytest.mark.run(order=335)
        def test_335_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("DNS Start ServicesValidating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=3.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 335 Execution Completed")


####################################################
## IPv6 Address with Allow Permission at Named ACL##
####################################################


        @pytest.mark.run(order=336)
        def test_336_Update_Named_ACL_with_IPv6_Address_Alow_Permission_in_Named_ACLs(self):
                print("\n============================================\n")
                print("Updating the named acl with ipv6 address allow permission in named acls")
                print("\n============================================\n")
                #response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list&_return_as_object=1",grid_vip=config.grid_vip)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test2",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"name": "test2","access_list": [{"_struct": "addressac","address": config.client_v6,"permission": "ALLOW"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 20 secs for the member to get started
                print("Test Case 336 Executuion Completed")

        @pytest.mark.run(order=337)
        def test_337_Validate_Updated_Named_ACL(self):
                print("\n============================================\n")
                print("validating the updated named acl")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test2&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ('"name": "test2"','"_struct": "addressac"','"address": "'+config.client_v6+'"','"permission": "ALLOW"')
                for i in data:
                    if i in response:
                        assert True
                    else:
                        assert False
                print(data)
                print("Test Case 337 Executuion Completed")

##############
## A record ##
##############

        @pytest.mark.run(order=338)
        def test_338_Add_and_Validate_A_record(self):
                print("\n============================================\n")
                print("adding and validating A record for added zone")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.34","name": "4.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=4.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "4.test.com"','"ipv4addr": "10.0.0.34"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("Test Case 338 Executuion Completed")


        @pytest.mark.run(order=339)
        def test_339_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' 4.test.com A' )
                f= open("7933.txt","w+")
                f.write("4.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 339 Execution Completed")

        @pytest.mark.run(order=340)
        def test_340_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=4.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 340 Execution Completed")

	

####################################################
## IPv6 Address with DENY Permission at Named ACL ##
####################################################

        @pytest.mark.run(order=341)
        def test_341_Update_Named_ACL_with_IPv6_Address_DENY_Permission_in_Named_ACLs(self):
                print("\n============================================\n")
                print("Updating the named acl with ipv6 address deny permission in named acls")
                print("\n============================================\n")
                #response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list&_return_as_object=1",grid_vip=config.grid_vip)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test2",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"name": "test2","access_list": [{"_struct": "addressac","address": config.client_v6,"permission": "DENY"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 20 secs for the member to get started
                print("Test Case 341 Executuion Completed")

        @pytest.mark.run(order=342)
        def test_342_Validate_Updated_Named_ACL(self):
                print("\n============================================\n")
                print("validating the updated named acl")
                print("\n============================================\n")
                data = ('"name": "test2"','"_struct": "addressac"','"address": "'+config.client_v6+'"','"permission": "DENY"')
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test2&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 342 Executuion Completed")


##############
## A record ##
##############

        @pytest.mark.run(order=343)
        def test_343_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' 4.test.com A' )
                f= open("7933.txt","w+")
                f.write("4.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 343 Execution Completed")
	

        @pytest.mark.run(order=344)
        def test_344_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=4.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 344 Execution Completed")


####################################################
## IPv6 Network with Allow Permission at Named ACL##
####################################################


        @pytest.mark.run(order=345)
        def test_345_Update_Named_ACL_with_IPv6_NETWORK_Alow_Permission_in_Named_ACLs(self):
                print("\n============================================\n")
                print("Updating the named acl with ipv6 network allow permission in named acls")
                print("\n============================================\n")
                #response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list&_return_as_object=1",grid_vip=config.grid_vip)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test2",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"name": "test2","access_list": [{"_struct": "addressac","address": config.client_v6_network+'::/64',"permission": "ALLOW"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 20 secs for the member to get started
                print("Test Case 345 Executuion Completed")

        @pytest.mark.run(order=346)
        def test_346_Validate_Updated_Named_ACL(self):
                print("\n============================================\n")
                print("validating the updated named acl")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test2&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ('"name": "test2"','"_struct": "addressac"','"address": "'+config.client_v6_network+'::/64"','"permission": "ALLOW"')
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 346 Executuion Completed")


##############
## A record ##
##############

        @pytest.mark.run(order=347)
        def test_347_Add_and_Validate_A_record(self):
                print("\n============================================\n")
                print("Adding and validating A record for added zone")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.35","name": "5.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=5.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "5.test.com"','"ipv4addr": "10.0.0.35"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("Test Case 347 Executuion Completed")


        @pytest.mark.run(order=348)
        def test_348_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' 5.test.com A' )
                f= open("7933.txt","w+")
                f.write("5.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 348 Execution Completed")

        @pytest.mark.run(order=349)
        def test_349_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=5.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 349 Execution Completed")


####################################################
## IPv6 NETWORK with DENY Permission at Named ACL ##
####################################################

        @pytest.mark.run(order=350)
        def test_350_Update_Named_ACL_with_IPv6_NETWORK_DENY_Permission_in_Named_ACLs(self):
                print("\n============================================\n")
                print("Updating the named acl with ipv4 network deny permission in named acls")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test2",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                data = {"access_list": [{"_struct": "addressac","address": config.client_v6_network+'::/64',"permission": "DENY"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 20 secs for the member to get started
                print("Test Case 350 Executuion Completed")

        @pytest.mark.run(order=351)
        def test_351_Validate_Updated_Named_ACL(self):
                print("\n============================================\n")
                print("validating the updated named acl")
                print("\n============================================\n")
                data = ('"name": "test2"','"_struct": "addressac"','"address": "'+config.client_v6_network+'::/64"','"permission": "DENY"')
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test2&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 351 Executuion Completed")


##############
## A record ##
##############

        @pytest.mark.run(order=352)
        def test_352_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' 5.test.com A' )
                f= open("7933.txt","w+")
                f.write("5.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 352 Execution Completed")


        @pytest.mark.run(order=353)
        def test_353_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=5.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 353 Execution Completed")


####################################################
## ANY Address with Allow Permission at Named ACL##
####################################################


        @pytest.mark.run(order=354)
        def test_354_Update_Named_ACL_with_ANY_Address_Alow_Permission_in_Named_ACLs(self):
                print("\n============================================\n")
                print("Updating the named acl with ANY Address allow permission in named acls")
                print("\n============================================\n")
                #response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list&_return_as_object=1",grid_vip=config.grid_vip)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test2",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"access_list": [{"_struct": "addressac","address": "Any","permission": "ALLOW"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 20 secs for the member to get started
                print("Test Case 354 Executuion Completed")

        @pytest.mark.run(order=355)
        def test_355_Validate_Updated_Named_ACL(self):
                print("\n============================================\n")
                print("validating the updated named acl")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test2&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ('"name": "test2"','"_struct": "addressac"','"address": "Any"','"permission": "ALLOW"')
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 355 Executuion Completed")


##############
## A record ##
##############

        @pytest.mark.run(order=356)
        def test_356_Add_and_Validate_A_record(self):
                print("\n============================================\n")
                print("Adding and validating A record for added zone")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.36","name": "6.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=6.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "6.test.com"','"ipv4addr": "10.0.0.36"']
                for i in result:
                        if i in output:
                            assert True
                        else:
                            assert False
                print(result)
                print("Test Case 356 Executuion Completed")


        @pytest.mark.run(order=357)
        def test_357_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 6.test.com A' )
                f= open("7933.txt","w+")
                f.write("6.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 357 Execution Completed")

        @pytest.mark.run(order=358)
        def test_358_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=6.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 358 Execution Completed")


####################################################
## ANY NETWORK with DENY Permission at Named ACL ##
####################################################

        @pytest.mark.run(order=359)
        def test_359_Update_Named_ACL_with_IPv4_NETWORK_Alow_Permission_in_Named_ACLs(self):
                print("\n============================================\n")
                print("Updating the named acl with ipv4 network DENY permission in named acls")
                print("\n============================================\n")
                #response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list&_return_as_object=1",grid_vip=config.grid_vip)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test2",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"access_list": [{"_struct": "addressac","address": "Any","permission": "DENY"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 20 secs for the member to get started
                print("Test Case 359 Executuion Completed")

        @pytest.mark.run(order=360)
        def test_360_Validate_Updated_Named_ACL(self):
                print("\n============================================\n")
                print("validating the updated named acl")
                print("\n============================================\n")
                data = ('"name": "test2"','"_struct": "addressac"','"address": "Any"','"permission": "DENY"')
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test2&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 360 Executuion Completed")
##############
## A record ##
##############

        @pytest.mark.run(order=361)
        def test_361_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 6.test.com A' )
                f= open("7933.txt","w+")
                f.write("6.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 361 Execution Completed")


        @pytest.mark.run(order=362)
        def test_362_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=6.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 362 Execution Completed")



########################################################################################################################################################
############################################ 3 Levels are completed and scenarios needs to be covered ##################################################
########################################################################################################################################################






#########################################################################################################################################
## At zone level disabling the monitor for zones and records and also disabling the inheritance and getting the values from grid level ##
#########################################################################################################################################

        @pytest.mark.run(order=363)
        def test_363_Disable_TimeStamp_Monitor_for_RR_and_Zones_at_Zone_Level(self):
                print("\n============================================\n")
                print("Disabling time stamp monitor for RR and zone at Zone level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": False,"enable_scavenging": False,"enable_zone_last_queried": False,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(30) #wait for 20 secs for the member to get started
                print("Test Case 363 Executuion Completed")
	
        @pytest.mark.run(order=364)
        def test_364_Validate_disabled_RR_ZOne_timstamp_monitor_for_RR_and_zone_at_zone_level(self):
                print("\n============================================\n")
                print("validating disabled timestamp monitor for RR and zone at zone level")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com&_return_fields=scavenging_settings&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": false','"enable_zone_last_queried": false'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 364 Execution Completed")
                
                
        @pytest.mark.run(order=365)
        def test_365_Disbale_override_scavenging_settings_at_zone_level(self):
                print("\n============================================\n")
                print("disabling override scavenging settings at zone level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"use_scavenging_settings": False}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(30) #wait for 20 secs for the member to get started
                print("Test Case 365 Executuion Completed")
	
        @pytest.mark.run(order=366)
        def test_366_validate_disabled_scavenging_settings_at_zone_level(self):
                print("\n============================================\n")
                print("validating disbaled scavenging settings at zone level")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com&_return_fields=use_scavenging_settings&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ('"use_scavenging_settings": false')
                if data in response:
                        assert True
                else:
                        assert False
                print("Test Case 366 Execution Completed")

#############################################################################################################################################
## At DNS VIEW level disabling the monitor for zones and records and also disabling the inheritance and getting the values from grid level ##
#############################################################################################################################################

        @pytest.mark.run(order=367)
        def test_367_Disable_TimeStamp_Monitor_for_RR_and_Zones_at_default_DNS_view_Level(self):
                print("\n============================================\n")
                print("Disabling time stampmp monitor for RR and zone at default DNS view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="view",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": False,"enable_scavenging": False,"enable_zone_last_queried": False,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(30) #wait for 20 secs for the member to get started
                print("Test Case 367 Executuion Completed")
	
        @pytest.mark.run(order=368)
        def test_368_Validate_disabled_RR_ZOne_timstamp_monitor_for_RR_and_zone_at_DNS_view_level(self):
                print("\n============================================\n")
                print("validating disabled timestamp monitor for RR and zone at dns view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="view",params="?_inheritance=True&_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": false','"enable_zone_last_queried": false'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 368 Execution Completed")
                

        @pytest.mark.run(order=369)
        def test_369_Disbale_override_scavenging_settings_at_DNS_VIEW_level(self):
                print("\n============================================\n")
                print("disabling override scavenging settings at DNS view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="view",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"use_scavenging_settings": False}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(25) #wait for 20 secs for the member to get started
                print("Test Case 369 Executuion Completed")
	
        @pytest.mark.run(order=370)
        def test_370_validate_disabled_scavenging_settings_at_DNS_view_level(self):
                print("\n============================================\n")
                print("validating disbaled scavenging settings at DNS view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="view?_return_fields=use_scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = ('"use_scavenging_settings": false')
                if data in response:
                        assert True
                else:
                        assert False
                ########################################
                ## Allowing updates at grid dns level ##
                ########################################
                get_ref = ib_NIOS.wapi_request('GET', object_type="grid:dns")
                res = json.loads(get_ref)
                ref2 = json.loads(get_ref)[0]['_ref']
                print(ref2)
                data = {"allow_update": [{"_struct": "addressac","address": "Any","permission": "ALLOW"}]}
                response = ib_NIOS.wapi_request('PUT',ref= ref2,fields=json.dumps(data))
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid")
                ref = json.loads(grid)[0]['_ref']
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=requestrestartservicestatus")
                restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices")
                sleep(20)
                print("Test Case 370 Execution Completed")

##################################################################################################################################################
## At Grid level disabling the monitor for zones and records, so that the created records  through nsupdate will show as not monitor. ############
## Then if we enable the monitor for zones/records, it will show as not queried since. After that we can query and test the functionality. #######
##################################################################################################################################################


        @pytest.mark.run(order=371)
        def test_371_Disable_TimeStamp_Monitor_for_RR_and_Zones_at_Grid_DNS_Level(self):
                print("\n============================================\n")
                print("Disabling time stamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": False,"enable_scavenging": False,"enable_zone_last_queried": False,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 20 secs for the member to get started
                print("Test Case 371 Executuion Completed")

        @pytest.mark.run(order=372)
        def test_372_Validate_disabled_RR_ZOne_timstamp_monitor_for_RR_and_zone_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("validating disabled timestamp monitor for RR and zone at GRID DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": false','"enable_zone_last_queried": false'}
                for i in data:
                	if i in response:
				print(i)
                        	assert True
                	else:
                        	assert False
                print("Test Case 372 Execution Completed")

	
########################
## NSUPDATE Scenarios ##
########################


#################
## NONE Option ##
#################

        @pytest.mark.run(order=373)
        def test_373_Create_A_record_through_nsupdate(self):
		print("\n============================================\n")
		print("creating A record through nsupdate")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.send('nsupdate\n')
                        child.expect('>')
                        child.send('server '+config.grid_vip+'\n')
                        child.expect('>')
                        child.send('update add 7.test.com 10 A 10.0.0.37\n')
                        child.expect('>')
                        child.send('send\n')
                        child.expect('>')
                        print("Record successfully created by nsupdate")
                except:
                        print("Failed to create record by nsupdate")
                        assert False
                finally:
                        child.close()
		print("Test Case 373 Execution Completed")
		
	
        @pytest.mark.run(order=374)
        def test_374_Validate_created_A_record_through_nsupdate(self):
                print("\n============================================\n")
                print("validating created A record through nsupdate")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=7.test.com",grid_vip=config.grid_vip)
                print(response)
                data = {'"ipv4addr": "10.0.0.37"','"name": "7.test.com"'}
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 374 Execution Completed")             

        @pytest.mark.run(order=375)
        def test_375_Enable_TimeStamp_Monitor_for_RR_and_Zones_at_Grid_DNS_Level(self):
                print("\n============================================\n")
                print("Enabling time stamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 375 Executuion Completed")

        @pytest.mark.run(order=376)
        def test_376_Validate_enabled_RR_ZOne_timstamp_monitor_for_RR_and_zone_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("validating enabled timestamp monitor for RR and zone at grid dns level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": true','"enable_zone_last_queried": true'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 376 Execution Completed")

################################
## named.conf file validation ##
################################
	
               
        @pytest.mark.run(order=377)
        def test_377_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory ")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -o StrictHostKeyChecking=no -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                except:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -o StrictHostKeyChecking=no -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')

                finally:
                        child.close()
                print("Test Case 377 Execution Completed")

 
        @pytest.mark.run(order=378)
        def test_378_Validate_last_queried_denylist_shoud_not_present_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last-queried-denylist shoudn't present in named.com file ")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                data = 'infoblox-last-queried-denylist'
                if data in log_validation:
                    assert False
                else:
                    assert True
                print(data)
                print("Test Case 378 Execution Completed")


        @pytest.mark.run(order=379)
        def test_379_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 7.test.com A' )
                f= open("7933.txt","w+")
                f.write("7.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 379 Execution Completed")
	
        @pytest.mark.run(order=380)
        def test_380_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=7.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 380 Execution Completed")
                
                


#######################################################
############### SET of ACES at Grid DNS ###############
#######################################################

##################################################################################################################
### Test Cases : Adding IPv4 Address to the DENY LIST and Blocking the client from updating the "LAST Queried" ###
##################################################################################################################


####################################
## Disabling monitor for rr/zones ##
####################################

        @pytest.mark.run(order=381)
        def test_381_Disable_TimeStamp_Monitor_for_RR_and_Zones_at_Grid_DNS_Level(self):
                print("\n============================================\n")
                print("Disabling time stamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": False,"enable_scavenging": False,"enable_zone_last_queried": False,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 381 Executuion Completed")

        @pytest.mark.run(order=382)
        def test_382_Validate_disabled_RR_ZOne_timstamp_monitor_for_RR_and_zone_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("validating disabled timestamp monitor for RR and zone at GRID DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": false','"enable_zone_last_queried": false'}
                for i in data:
                	if i in response:
                        	assert True
               		else:
                        	assert False
                print("Test Case 382 Execution Completed")
                

##############
## A record ##
##############


        @pytest.mark.run(order=383)
        def test_383_Create_A_record_through_nsupdate(self):
                print("\n============================================\n")
		print("creating A record through nsupdate")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.send('nsupdate\n')
                        child.expect('>')
                        child.send('server '+config.grid_vip+'\n')
                        child.expect('>')
                        child.send('update add 8.test.com 10 A 10.0.0.38\n')
                        child.expect('>')
                        child.send('send\n')
                        child.expect('>')
                        print("Record successfully created by nsupdate")
                except:
                        print("Failed to create record by nsupdate")
                        assert False
                finally:
                        child.close()
                print("Test Case 383 Execution Completed")
	                
        @pytest.mark.run(order=384)
        def test_384_Validate_created_A_record_through_nsupdate(self):
                print("\n============================================\n")
                print("validating created A record through nsupdate")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=8.test.com",grid_vip=config.grid_vip)
                print(response)
                data = ['"ipv4addr": "10.0.0.38"','"name": "8.test.com"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 384 Execution Completed")

###################################
## Enabling monitor for rr/zones ##
###################################

        @pytest.mark.run(order=385)
        def test_385_Enable_TimeStamp_Monitor_for_RR_and_Zones_at_Grid_DNS_Level(self):
                print("\n============================================\n")
                print("Enabling time stamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 385 Executuion Completed")
	
        @pytest.mark.run(order=386)
        def test_386_Validate_enabled_RR_ZOne_timstamp_monitor_for_RR_and_zone_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("validating enabled timestamp monitor for RR and zone at grid dns level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": true','"enable_zone_last_queried": true'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 386 Execution Completed")

                
        @pytest.mark.run(order=387)
        def test_387_Add_IPV4_Address_to_the_DENY_List_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Adding IPv4 address to the DENY List at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 387 Execution Completed")

        @pytest.mark.run(order=388)
        def test_388_Validate_IPV4_Address_to_the_DENY_List_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Validating IPv4 address to the DENY List at grid dns level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "'+config.client_v4+'"','"permission": "ALLOW"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 388 Execution Completed")

    
################################
## named.conf file validation ##
################################

        @pytest.mark.run(order=389)
        def test_389_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
			child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                        print("data stored in a variable")
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 389 Execution Completed")
        
        @pytest.mark.run(order=390)
        def test_390_Validate_last_queried_denylist_shoud_update_with_include_IPv4_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last-queried-denylist should update with IPv4 address allow permission in named.conf file ")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                print("log validation data is",log_validation)
                textfile.close()
                data = ("infoblox-last-queried-denylist { "+config.client_v4+"; }")
                print("data is",data)
                if data in log_validation:
                    assert True
                else:
                    assert False
                print(data)
                print("Test Case 390 Execution Completed")

        @pytest.mark.run(order=391)
        def test_391_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 8.test.com A' )
                f= open("7933.txt","w+")
                f.write("8.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 391 Execution Completed")
                
        @pytest.mark.run(order=392)
        def test_392_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=8.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 392 Execution Completed")

##############################################################################################################################
### Test Cases : Excluding the IPv4 Address from the DENY LIST and allowing client to update the "LAST Queried" time stamp ###
##############################################################################################################################

        @pytest.mark.run(order=393)
        def test_393_Excluding_IPv4_Address_from_last_queried_deny_list(self):
                print("\n============================================\n")
                print("Excluding IPv4 address in last queried denylist")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 393 Execution Completed")
                
	
        @pytest.mark.run(order=394)
        def test_394_Validate_IPv4_address_in_last_queried_denylist(self):
                print("\n============================================\n")
                print("validating IPv4 address in last queried deny list")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "'+config.client_v4+'"','"permission": "DENY"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 394 Execution Completed")

################################
## named.conf file validation ##
################################

        @pytest.mark.run(order=395)
        def test_395_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                        print("data stored in a variable")
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 395 Execution Completed")
                
        @pytest.mark.run(order=396)
        def test_396_Validate_last_queried_denylist_shoud_update_with_excluded_IPv4_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last-queried-denylist should update with IPv4 address DENY permission in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                data = ("infoblox-last-queried-denylist { !"+config.client_v4+"; }")
                if data in log_validation:
                    assert True
                else:
                    assert False
                print(data)
                print("Test Case 396 Execution Completed")


##############
## A record ##
##############


        @pytest.mark.run(order=397)
        def test_397_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 8.test.com A' )
                f= open("7933.txt","w+")
                f.write("8.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 397 Execution Completed")


        @pytest.mark.run(order=398)
        def test_398_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=8.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 398 Execution Completed")
                
                
####################################################################################################################
### Test Cases :  Adding IPv4 NETWORK to the DENY LIST and prevente the clients from updating the "LAST Queried" ###
####################################################################################################################

####################################
## Disabling monitor for rr/zones ##
####################################

        @pytest.mark.run(order=399)
        def test_399_Disable_TimeStamp_Monitor_for_RR_and_Zones_at_Grid_DNS_Level(self):
                print("\n============================================\n")
                print("Disabling time stamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": False,"enable_scavenging": False,"enable_zone_last_queried": False,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 399 Executuion Completed")

        @pytest.mark.run(order=400)
        def test_400_Validate_disabled_RR_ZOne_timstamp_monitor_for_RR_and_zone_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("validating disabled timestamp monitor for RR and zone at GRID DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": false','"enable_zone_last_queried": false'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 400 Execution Completed")
        
    
##############
## A record ##
##############

        @pytest.mark.run(order=401)
        def test_401_Create_A_record_through_nsupdate(self):
                print("\n============================================\n")
                print("creating A record through nsupdate")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.send('nsupdate\n')
                        child.expect('>')
                        child.send('server '+config.grid_vip+'\n')
                        child.expect('>')
                        child.send('update add 9.test.com 10 A 10.0.0.39\n')
                        child.expect('>')
                        child.send('send\n')
                        child.expect('>')
                        print("Record successfully created by nsupdate")
                except:
                        print("Failed to create record by nsupdate")
                        assert False
                finally:
                        child.close()
                print("\nTest Case 401 Execution Completed")

        @pytest.mark.run(order=402)
        def test_402_Validate_created_A_record_through_nsupdate(self):
                print("\n============================================\n")
                print("validating created A record through nsupdate")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=9.test.com",grid_vip=config.grid_vip)
                print(response)
                data = ['"ipv4addr": "10.0.0.39"','"name": "9.test.com"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 402 Execution Completed")

####################################
## Enabling monitor for rr/zones ##
####################################

        @pytest.mark.run(order=403)
        def test_403_Enable_TimeStamp_Monitor_for_RR_and_Zones_at_Grid_DNS_Level(self):
                print("\n============================================\n")
                print("Enabling time stamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 20 secs for the member to get started
                print("Test Case 403 Executuion Completed")

        @pytest.mark.run(order=404)
        def test_404_Validate_enabled_RR_ZOne_timstamp_monitor_for_RR_and_zone_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("validating enabled timestamp monitor for RR and zone at grid dns level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": true','"enable_zone_last_queried": true'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 404 Execution Completed")


        @pytest.mark.run(order=405)
        def test_405_Adding_IPv4_NETWORK_to_the_LAST_Queried_DENY_LIST_at_GRID_level(self):
                print("\n============================================\n")
                print("Adding IPv4 NETWORK to the last queried DENY LIST at GRID DNS level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl": [{"address": "10.0.0.0/8","permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 405 Execution Completed")


        @pytest.mark.run(order=406)
        def test_406_Validate_Added_IPV4_NETWORK_in_the_Last_Queried_DENY_List(self):
                print("\n============================================\n")
                print("validating added IPv4 network in the last queried denylist")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "10.0.0.0/8"','"permission": "ALLOW"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 406 Execution Completed")


################################
## named.conf file validation ##
################################

        @pytest.mark.run(order=407)
        def test_407_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 407 Execution Completed")
                
        @pytest.mark.run(order=408)
        def test_408_Validate_last_queried_denylist_shoud_update_with_include_IPv4_Network_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last queried denylist should update with include IPv4 Network in named.conf file ")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                data = ("infoblox-last-queried-denylist { 10.0.0.0/8; }")
                if data in log_validation:
                    assert True
                else:
                    assert False
                print(data)
                print("Test Case 408 Execution Completed")
            
    
###################
## Dig operation ##
###################

        @pytest.mark.run(order=409)
        def test_409_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 9.test.com A' )
                f= open("7933.txt","w+")
                f.write("9.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 409 Execution Completed")

        @pytest.mark.run(order=410)
        def test_410_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=9.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 410 Execution Completed")


#############################################################################################################
### Test Cases :  Excluding IPv4 NETWORK from  DENY LIST and allowing client to update the "LAST Queried" ###
#############################################################################################################

        @pytest.mark.run(order=411)
        def test_411_Excluding_IPv4_NETWORK_from_the_Last_Queried_DENY_List_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("Excluding IPv4 Network to the Last Queried DENY LIST at Grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl": [{"address": "10.0.0.0/8","permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 411 Execution Completed")


        @pytest.mark.run(order=412)
        def test_412_Validate_Added_IPV4_NETWORK_in_the_Last_Queried_DENY_List(self):
                print("\n============================================\n")
                print("Validating added IPv4 Network in the Last Queried DENY LIST")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "10.0.0.0/8"','"permission": "DENY"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 412 Execution Completed")


################################
## named.conf file validation ##
################################

        @pytest.mark.run(order=413)
        def test_413_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                        print("data stored in a variable")
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 413 Execution Completed")
                
        @pytest.mark.run(order=414)
        def test_414_Validate_last_queried_denylist_shoud_update_with_excluded_IPv4_Network_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last queried denylist should update with excluded IPv4 Network in named.conf file ")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { !10.0.0.0/8; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 414 Execution Completed")

##############
## A record ##
##############
	

        @pytest.mark.run(order=415)
        def test_415_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 9.test.com A' )
                f= open("7933.txt","w+")
                f.write("9.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 415 Execution Completed")

	
        @pytest.mark.run(order=416)
        def test_416_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=9.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 416 Execution Completed")
                

##################################################################################################################
### Test Cases : Adding IPv6 Address to the DENY LIST and Blocking the client from updating the "LAST Queried" ###
##################################################################################################################


####################################
## Disabling monitor for rr/zones ##
####################################

        @pytest.mark.run(order=417)
        def test_417_Disable_TimeStamp_Monitor_for_RR_and_Zones_at_Grid_DNS_Level(self):
                print("\n============================================\n")
                print("Disabling time stamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": False,"enable_scavenging": False,"enable_zone_last_queried": False,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 417 Executuion Completed")

        @pytest.mark.run(order=418)
        def test_418_Validate_disabled_RR_Zone_timstamp_monitor_for_RR_and_zone_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("validating disabled timestamp monitor for RR and zone at GRID DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": false','"enable_zone_last_queried": false'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 418 Execution Completed")
                

##############
## A record ##
##############
	

        @pytest.mark.run(order=419)
        def test_419_Create_A_record_through_nsupdate(self):
                print("\n============================================\n")
                print("creating A record through nsupdate")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.send('nsupdate\n')
                        child.expect('>')
                        child.send('server '+config.grid_vip+'\n')
                        child.expect('>')
                        child.send('update add 10.test.com 10 A 10.0.0.40\n')
                        child.expect('>')
                        child.send('send\n')
                        child.expect('>')
                        print("Record successfully created by nsupdate")
                except:
                        print("Failed to create record by nsupdate")
                        assert False
                finally:
                        child.close()
                print("Test Case 419 Execution Completed")
            
	    
        @pytest.mark.run(order=420)
        def test_420_Validate_created_A_record_through_nsupdate(self):
                print("\n============================================\n")
                print("validating created A record through nsupdate")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=10.test.com",grid_vip=config.grid_vip)
                print(response)
                data = ['"ipv4addr": "10.0.0.40"','"name": "10.test.com"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 420 Execution Completed")

###################################
## Enabling monitor for rr/zones ##
###################################

        @pytest.mark.run(order=421)
        def test_421_Enable_TimeStamp_Monitor_for_RR_and_Zones_at_Grid_DNS_Level(self):
                print("\n============================================\n")
                print("Enabling time stamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 421 Executuion Completed")
	
        @pytest.mark.run(order=422)
        def test_422_Validate_enabled_RR_ZOne_timstamp_monitor_for_RR_and_zone_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("validating enabled timestamp monitor for RR and zone at grid dns level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": true','"enable_zone_last_queried": true'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 422 Execution Completed")

                
        @pytest.mark.run(order=423)
        def test_423_Add_IPV6_Address_to_the_DENY_List_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Adding IPv6 address to the DENY List at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v6, "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 423 Execution Completed")

        @pytest.mark.run(order=424)
        def test_424_Validate_added_IPV6_Address_in_the_DENY_List_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Validating IPv4 address to the DENY List at grid dns level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "'+config.client_v6+'"','"permission": "ALLOW"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 424 Execution Completed")

    
################################
## named.conf file validation ##
################################

        @pytest.mark.run(order=425)
        def test_425_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                        print("data stored in a variable")
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 425 Execution Completed")
                
        @pytest.mark.run(order=426)
        def test_426_Validate_last_queried_denylist_shoud_update_with_include_IPv6_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last-queried-denylist should update with include IPv6 address in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { "+config.client_v6+"; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 426 Execution Completed")
	
        @pytest.mark.run(order=427)
        def test_427_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' 10.test.com A' )
                f= open("7933.txt","w+")
                f.write("10.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 427 Execution Completed")
                
        @pytest.mark.run(order=428)
        def test_428_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=10.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 428 Execution Completed")

##############################################################################################################################
### Test Cases : Excluding the IPv6 Address from the DENY LIST and allowing client to update the "LAST Queried" time stamp ###
##############################################################################################################################

        @pytest.mark.run(order=429)
        def test_429_Excluding_IPv6_NETWORK_from_the_Last_Queried_DENY_List_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("Excluding IPv4 Network to the Last Queried DENY LIST at Grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v6, "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 429 Execution Completed")
                

        @pytest.mark.run(order=430)
        def test_430_Validate_Added_IPV6_NETWORK_in_the_Last_Queried_DENY_List(self):
                print("\n============================================\n")
                print("Validating added IPv4 Network in the Last Queried DENY LIST")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "'+config.client_v6+'"','"permission": "DENY"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 430 Execution Completed")

################################
## named.conf file validation ##
################################

        @pytest.mark.run(order=431)
        def test_431_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                        print("data stored in a variable")
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 431 Execution Completed")
                
        @pytest.mark.run(order=432)
        def test_432_Validate_last_queried_denylist_shoud_update_with_exclude_IPv4_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last-queried-denylist should update with IPv4 address exclude  permission in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { !"+config.client_v6+"; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 432 Execution Completed")


##############
## A record ##
##############


        @pytest.mark.run(order=433)
        def test_433_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 10.test.com A' )
                f= open("7933.txt","w+")
                f.write("10.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 433 Execution Completed")


        @pytest.mark.run(order=434)
        def test_434_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=10.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 434 Execution Completed")
                
                
####################################################################################################################
### Test Cases :  Adding IPv6 NETWORK to the DENY LIST and prevente the clients from updating the "LAST Queried" ###
####################################################################################################################

####################################
## Disabling monitor for rr/zones ##
####################################

        @pytest.mark.run(order=435)
        def test_435_Disable_TimeStamp_Monitor_for_RR_and_Zones_at_Grid_DNS_Level(self):
                print("\n============================================\n")
                print("Disabling time stamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": False,"enable_scavenging": False,"enable_zone_last_queried": False,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 435 Executuion Completed")

        @pytest.mark.run(order=436)
        def test_436_Validate_disabled_RR_ZOne_timstamp_monitor_for_RR_and_zone_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("validating disabled timestamp monitor for RR and zone at GRID DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": false','"enable_zone_last_queried": false'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 436 Execution Completed")
        
    
##############
## A record ##
##############

        @pytest.mark.run(order=437)
        def test_437_Create_A_record_through_nsupdate(self):
                print("\n============================================\n")
                print("creating A record through nsupdate")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.send('nsupdate\n')
                        child.expect('>')
                        child.send('server '+config.grid_vip+'\n')
                        child.expect('>')
                        child.send('update add 11.test.com 10 A 10.0.0.41\n')
                        child.expect('>')
                        child.send('send\n')
                        child.expect('>')
                        print("Record successfully created by nsupdate")
                except:
                        print("Failed to create record by nsupdate")
                        assert False
                finally:
                        child.close()
                print("\nTest Case 437 Execution Completed")
	
        @pytest.mark.run(order=438)
        def test_438_Validate_created_A_record_through_nsupdate(self):
                print("\n============================================\n")
                print("Validating created A record through nsupdate")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=11.test.com",grid_vip=config.grid_vip)
                print(response)
                data = ['"ipv4addr": "10.0.0.41"','"name": "11.test.com"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 438 Execution Completed")

####################################
## Enabling monitor for rr/zones ##
####################################

        @pytest.mark.run(order=439)
        def test_439_Enable_TimeStamp_Monitor_for_RR_and_Zones_at_Grid_DNS_Level(self):
                print("\n============================================\n")
                print("Enabling time stamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 439 Executuion Completed")
	
        @pytest.mark.run(order=440)
        def test_440_Validate_enabled_RR_ZOne_timstamp_monitor_for_RR_and_zone_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("validating enabled timestamp monitor for RR and zone at grid dns level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": true','"enable_zone_last_queried": true'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 440 Execution Completed")


        @pytest.mark.run(order=441)
        def test_441_Add_IPv6_Network_to_the_DENY_List_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Adding IPv4 address to the DENY List at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl": [{"address": config.client_v6_network+'::/64',"permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 441 Execution Completed")

	
        @pytest.mark.run(order=442)
        def test_442_Validate_added_IPv6_Network_in_DENY_List_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Validating IPv6 Network to the DENY List at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "'+config.client_v6_network+'::/64','"permission": "ALLOW"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 442 Execution Completed")


################################
## named.conf file validation ##
################################

        @pytest.mark.run(order=443)
        def test_443_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                        print("data stored in a variable")
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 443 Execution Completed")
                
        @pytest.mark.run(order=444)
        def test_444_Validate_last_queried_denylist_shoud_update_with_include_IPv6_Network_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last queried denylist should update with include IPv6 network in named.conf file ")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { "+config.client_v6_network+"::/64"+"; }")
                print(error_logs)
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 444 Execution Completed")
            
	    
###################
## Dig operation ##
###################
	
        @pytest.mark.run(order=445)
        def test_445_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' 11.test.com A' )
                f= open("7933.txt","w+")
                f.write("11.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 445 Execution Completed")

        @pytest.mark.run(order=446)
        def test_446_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=11.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 446 Execution Completed")


#############################################################################################################
### Test Cases :  Excluding IPv6 NETWORK from  DENY LIST and allowing client to update the "LAST Queried" ###
#############################################################################################################

        @pytest.mark.run(order=447)
        def test_447_Excluding_IPv6_NETWORK_from_last_queried_deny_list_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Excluding IPv6 network in last queried denylist")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl": [{"address": config.client_v6_network+'::/64',"permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 447 Execution Completed")


        @pytest.mark.run(order=448)
        def test_448_Validate_excluded_IPv6_NETWORK_in_the_DENY_List_at_grid_dns_level(self):
                print("\n============================================\n")
                print("validating excluded IPv6 network in last queried deny list at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "'+config.client_v6_network+'::/64','"permission": "DENY"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 448 Execution Completed")


################################
## named.conf file validation ##
################################

        @pytest.mark.run(order=449)
        def test_449_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                        print("data stored in a variable")
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 449 Execution Completed")
        
        @pytest.mark.run(order=450)
        def test_450_Validate_last_queried_denylist_shoud_update_with_include_IPv6_NETWORK_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last-queried-denylist should update with IPv6 network allow permission in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { !"+config.client_v6_network+'::/64'+"; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 450 Execution Completed")

##############
## A record ##
##############


        @pytest.mark.run(order=451)
        def test_451_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 11.test.com A' )
                f= open("7933.txt","w+")
                f.write("11.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 451 Execution Completed")


        @pytest.mark.run(order=452)
        def test_452_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=11.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 452 Execution Completed")
                
####################################################################################################################
### Test Cases :  Adding ANY Address to the DENY LIST and prevente the clients from updating the "LAST Queried" ###
####################################################################################################################

####################################
## Disabling monitor for rr/zones ##
####################################

        @pytest.mark.run(order=453)
        def test_453_Disable_TimeStamp_Monitor_for_RR_and_Zones_at_Grid_DNS_Level(self):
                print("\n============================================\n")
                print("Disabling time stamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": False,"enable_scavenging": False,"enable_zone_last_queried": False,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 453 Executuion Completed")

        @pytest.mark.run(order=454)
        def test_454_Validate_disabled_RR_Zone_timstamp_monitor_for_RR_and_zone_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("validating disabled timestamp monitor for RR and zone at GRID DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": false','"enable_zone_last_queried": false'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 454 Execution Completed")
        
    
##############
## A record ##
##############

        @pytest.mark.run(order=455)
        def test_455_Create_A_record_through_nsupdate(self):
                print("\n============================================\n")
                print("creating A record through nsupdate")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.send('nsupdate\n')
                        child.expect('>')
                        child.send('server '+config.grid_vip+'\n')
                        child.expect('>')
                        child.send('update add 12.test.com 10 A 10.0.0.42\n')
                        child.expect('>')
                        child.send('send\n')
                        child.expect('>')
                        print("Record successfully created by nsupdate")
                except:
                        print("Failed to create record by nsupdate")
                        assert False
                finally:
                        child.close()
                print("\nContinuing validation")
                print("\n============================================\n")
                print("validating created A record through nsupdate")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=12.test.com",grid_vip=config.grid_vip)
                print(response)
                data = ['"ipv4addr": "10.0.0.42"','"name": "12.test.com"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 455 Execution Completed")
                

####################################
## Enabling monitor for rr/zones ##
####################################

        @pytest.mark.run(order=456)
        def test_456_Enable_TimeStamp_Monitor_for_RR_and_Zones_at_Grid_DNS_Level(self):
                print("\n============================================\n")
                print("Enabling time stamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 456 Executuion Completed")
	
        @pytest.mark.run(order=457)
        def test_457_Validate_enabled_Last_queried_timstamp_monitor_for_RR_and_zone_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("validating enabled timestamp monitor for RR and zone at grid dns level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": true','"enable_zone_last_queried": true'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 457 Execution Completed")


        @pytest.mark.run(order=458)
        def test_458_Add_ANY_Address_to_the_DENY_List_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Adding ANY Address to the Last queried denylist at frid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl": [{"address": "Any","permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 458 Execution Completed")


        @pytest.mark.run(order=459)
        def test_459_Validate_added_ANY_Address_in_last_queried_DENY_List_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Validating added ANY address in lastcqueried DENY List at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "Any"','"permission": "ALLOW"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 459 Execution Completed")


################################
## named.conf file validation ##
################################

        @pytest.mark.run(order=460)
        def test_460_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                        print("data stored in a variable")
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 460 Execution Completed")
        
        @pytest.mark.run(order=461)
        def test_461_Validate_last_queried_denylist_shoud_update_with_include_ANY_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last-queried-denylist should update with IPv4 address allow permission in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                data = ("infoblox-last-queried-denylist { any; }")
                if data in log_validation:
                    assert True
                else:
                    assert False
                print(data)
                print("Test Case 461 Execution Completed")
            
	    	
###################
## Dig operation ##
###################

        @pytest.mark.run(order=462)
        def test_462_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 12.test.com A' )
                f= open("7933.txt","w+")
                f.write("12.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 462 Execution Completed")

        @pytest.mark.run(order=463)
        def test_463_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=12.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 463 Execution Completed")


#############################################################################################################
### Test Cases :  Excluding ANY Address from  DENY LIST and allowing client to update the "LAST Queried" ####
#############################################################################################################

        @pytest.mark.run(order=464)
        def test_464_Exclude_ANY_Address_to_the_Last_queried_DENY_List_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Excluding ANY address to the Last Queried DENY List at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl": [{"address": "Any","permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 464 Execution Completed")


        @pytest.mark.run(order=465)
        def test_465_Validate_excluded_ANY_Address_in_the_Last_Queried_DENY_List_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Validating excluded ANY address in teh last queried DENY List at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "Any"','"permission": "DENY"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 465 Execution Completed")


################################
## named.conf file validation ##
################################

        @pytest.mark.run(order=466)
        def test_466_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                        print("data stored in a variable")
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 466 Execution Completed")
                
        @pytest.mark.run(order=467)
        def test_467_Validate_last_queried_denylist_shoud_update_with_exclude_ANY_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last queried denylist should update with exclude ANY address in named.conf file")
                print("\n============================================\n")
                namedconf = open('/tmp/named.conf', 'r')
                log_validation = namedconf.read()
                namedconf.close()
                data = ("infoblox-last-queried-denylist { any; }")
                if data in log_validation:
                    assert False
                else:
                    assert True
                print(data)
                print("Test Case 467 Execution Completed")

##############
## A record ##
##############

	
        @pytest.mark.run(order=468)
        def test_468_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 12.test.com A' )
                f= open("7933.txt","w+")
                f.write("12.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 468 Execution Completed")
	

        @pytest.mark.run(order=469)
        def test_469_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=12.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 469 Execution Completed")
                

####################################################################################################################
### Named ACL :  Adding ANY Address to the DENY LIST and prevente the clients from updating the "LAST Queried" ###
####################################################################################################################

####################################
## Disabling monitor for rr/zones ##
####################################

        @pytest.mark.run(order=470)
        def test_470_Disable_TimeStamp_Monitor_for_RR_and_Zones_at_Grid_DNS_Level(self):
                print("\n============================================\n")
                print("Disabling time stamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": False,"enable_scavenging": False,"enable_zone_last_queried": False,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 470 Executuion Completed")

        @pytest.mark.run(order=471)
        def test_471_Validate_disabled_RR_ZOne_timstamp_monitor_for_RR_and_zone_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("validating disabled timestamp monitor for RR and zone at GRID DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": false','"enable_zone_last_queried": false'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 471 Execution Completed")
        
    
##############
## A record ##
##############

        @pytest.mark.run(order=472)
        def test_472_Create_A_record_through_nsupdate(self):
                print("\n============================================\n")
                print("creating A record through nsupdate")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.send('nsupdate\n')
                        child.expect('>')
                        child.send('server '+config.grid_vip+'\n')
                        child.expect('>')
                        child.send('update add 13.test.com 10 A 10.0.0.43\n')
                        child.expect('>')
                        child.send('send\n')
                        child.expect('>')
                        print("Record successfully created by nsupdate")
                except:
                        print("Failed to create record by nsupdate")
                        assert False
                finally:
                        child.close()
                print("\nTest Case 472 Execution Completed")

        @pytest.mark.run(order=473)
        def test_473_Validate_created_A_record_through_nsupdate(self):
                print("\n============================================\n")
                print("validating created A record through nsupdate")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=13.test.com",grid_vip=config.grid_vip)
                print(response)
                data = ['"ipv4addr": "10.0.0.43"','"name": "13.test.com"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 473 Execution Completed")

####################################
## Enabling monitor for rr/zones ##
####################################

        @pytest.mark.run(order=474)
        def test_474_Enable_TimeStamp_Monitor_for_RR_and_Zones_at_Grid_DNS_Level(self):
                print("\n============================================\n")
                print("Enabling time stamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 474 Executuion Completed")

        @pytest.mark.run(order=475)
        def test_475_Validate_enabled_RR_ZOne_timstamp_monitor_for_RR_and_zone_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("validating enabled timestamp monitor for RR and zone at grid dns level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": true','"enable_zone_last_queried": true'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 475 Execution Completed")


        @pytest.mark.run(order=476)
        def test_476_Create_IPv4_Named_ACL_with_allow_permission_in_NamedACLS(self):
                print("\n============================================\n")
                print("creating IPv4 named acl  with allow permission in namedacls")
                print("\n============================================\n")
                data = {"name": "test3","access_list": [{"_struct": "addressac","address": config.client_v4,"permission": "ALLOW"}]}
                response = ib_NIOS.wapi_request('POST', object_type="namedacl",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                sleep(30)
                print("Test Case 476 Executuion Completed")
	
        @pytest.mark.run(order=477)
        def test_477_Validate_Created_IPv4_Address_Named_ACL(self):
                print("\n============================================\n")
                print("Validating created IPv4 Address Named ACL")
                print("\n============================================\n")
                data = ('"name": "test3"','"_struct": "addressac"','"address": "'+config.client_v4+'"','"permission": "ALLOW"')
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test3&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 477 Executuion Completed")

        @pytest.mark.run(order=478)
        def test_478_Add_Created_IPv4_Address_Named_ACL_at_Grid_DNS_properties(self):
                print("\n============================================\n")
                print("Adding created IPv4 Address Named ACL at grid dns level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test3",grid_vip=config.grid_vip)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                data={"last_queried_acl": [{"_ref": ref}]}
                griddns = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                ref=json.loads(griddns)[0]['_ref']
                ref=eval(json.dumps(ref))
                print(ref)
                output = ib_NIOS.wapi_request('PUT',ref=ref,fields=json.dumps(data))
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 20 secs for the member to get started
                print("\nTest Case 478 Execution Completed")

        @pytest.mark.run(order=479)
        def test_479_Validate_Added_Named_ACL_at_Grid_DNS_properties(self):
                print("\n============================================\n")
                print("validating added named acl at grid dns properties")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type='grid:dns?_return_fields=last_queried_acl',grid_vip=config.grid_vip)
                print(response)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test3",grid_vip=config.grid_vip)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                if ref in response:
                        assert True
                else:
                        assert False
                print(ref)
                print("\nTest Case 479 Execution Completed")
                                                                                             


################################
## named.conf file validation ##
################################

        @pytest.mark.run(order=480)
        def test_480_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
			child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                        print("data stored in a variable")
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 480 Execution Completed")
                
        @pytest.mark.run(order=481)
        def test_481_Validate_last_queried_denylist_shoud_update_with_include_IPv4_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last queried denylist should update with allow IPv4 address in named.conf file")
                print("\n============================================\n")
                namedconf = open('/tmp/named.conf', 'r')
                log_validation = namedconf.read()
                namedconf.close()
                data = ("infoblox-last-queried-denylist { "+config.client_v4+"; }")
                if data in log_validation:
                    assert True
                else:
                    assert False
                print(data)
                print("Test Case 481 Execution Completed")
            
    
###################
## Dig operation ##
###################

        @pytest.mark.run(order=482)
        def test_482_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 13.test.com A' )
                f= open("7933.txt","w+")
                f.write("13.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 482 Execution Completed")

        @pytest.mark.run(order=483)
        def test_483_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=13.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 483 Execution Completed")


#############################################################################################################
### Named ACL :  Excluding IPv4 Address from  DENY LIST and allowing client to update the "LAST Queried" ####
#############################################################################################################
	
        @pytest.mark.run(order=484)
        def test_484_Update_Named_ACL_with_IPv4_Address_DENY_Permission_in_Named_ACLs(self):
                print("\n============================================\n")
                print("Updating the named acl with ANY Address allow permission in named acls")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test3",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"name": "test3","access_list": [{"_struct": "addressac","address": config.client_v4,"permission": "DENY"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 484 Executuion Completed")
	
        @pytest.mark.run(order=485)
        def test_485_Validate_Updated_Named_ACL(self):
                print("\n============================================\n")
                print("validating the updated named acl")
                print("\n============================================\n")
                data = ('"name": "test3"','"_struct": "addressac"','"address": "'+config.client_v4+'"','"permission": "DENY"')
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test3&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 485 Executuion Completed")


################################
## named.conf file validation ##
################################
	
        @pytest.mark.run(order=486)
        def test_486_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                        print("data stored in a variable")
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 486 Execution Completed")
                
        @pytest.mark.run(order=487)
        def test_487_Validate_last_queried_denylist_should_update_with_include_IPv4_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last queried denylist should update with include IPv4 address in named.conf file")
                print("\n============================================\n")
                namedconf = open('/tmp/named.conf', 'r')
                log_validation = namedconf.read()
                namedconf.close()
                data = ("infoblox-last-queried-denylist { !"+config.client_v4+"; }")
                if data in log_validation:
                    assert True
                else:
                    assert False
                print(data)
                print("Test Case 487 Execution Completed")

##############
## A record ##
##############

	
        @pytest.mark.run(order=488)
        def test_488_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 13.test.com A' )
                f= open("7933.txt","w+")
                f.write("13.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 488 Execution Completed")

	
        @pytest.mark.run(order=489)
        def test_489_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=13.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert(response)
                print("Test Case 489 Execution Completed")
                
	
##############################################################################################################################
### NSUPDATE at DNS VIEW :  Adding IPv4 NETWORK to the DENY LIST and prevente the clients from updating the "LAST Queried" ###
##############################################################################################################################

######################################################
## Disabling monitor for rr/zones at grid:dns level ##
######################################################

        @pytest.mark.run(order=490)
        def test_490_Disable_TimeStamp_Monitor_for_RR_and_Zones_at_Default_DNS_VIEW_Level(self):
                print("\n============================================\n")
                print("Disabling time stamp monitor for RR and zone at Default DNS VIEW level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": False,"enable_scavenging": False,"enable_zone_last_queried": False,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 490 Executuion Completed")

        @pytest.mark.run(order=491)
        def test_491_Validate_disabled_RR_ZOne_timstamp_monitor_for_RR_and_zone_at_DNS_VIEW_level(self):
                print("\n============================================\n")
                print("validating disabled timestamp monitor for RR and zone at DNS VIEW level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": false','"enable_zone_last_queried": false'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 491 Execution Completed")
        
    
##############
## A record ##
##############

        @pytest.mark.run(order=492)
        def test_492_Create_A_record_through_nsupdate(self):
                print("\n============================================\n")
                print("creating A record through nsupdate")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.send('nsupdate\n')
                        child.expect('>')
                        child.send('server '+config.grid_vip+'\n')
                        child.expect('>')
                        child.send('update add 14.test.com 10 A 10.0.0.44\n')
                        child.expect('>')
                        child.send('send\n')
                        child.expect('>')
                        print("Record successfully created by nsupdate")
                except:
                        print("Failed to create record by nsupdate")
                        assert False
                finally:
                        child.close()
                print("\nTest Case 492 Execution Completed")
	
        @pytest.mark.run(order=493)
        def test_493_Validate_created_A_record_through_nsupdate(self):
                print("\n============================================\n")
                print("validating created A record through nsupdate")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=14.test.com",grid_vip=config.grid_vip)
                print(response)
                data = ['"ipv4addr": "10.0.0.44"','"name": "14.test.com"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 493 Execution Completed")

#################################################
## Enabling monitor for rr/zones at view level ##
#################################################

        @pytest.mark.run(order=494)
        def test_494_Enable_TimeStamp_Monitor_for_RR_and_Zones_at_DNS_VIEW_Level(self):
                print("\n============================================\n")
                print("Enabling time stamp monitor for RR and zone at DNS VIEW level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="view",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 20 secs for the member to get started
                print("Test Case 494 Executuion Completed")

        @pytest.mark.run(order=495)
        def test_495_Validate_enabled_RR_ZOne_timstamp_monitor_for_RR_and_zone_at_DNS_VIEW_level(self):
                print("\n============================================\n")
                print("validating enabled timestamp monitor for RR and zone at grid dns level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="view?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": true','"enable_zone_last_queried": true'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 495 Execution Completed")


        @pytest.mark.run(order=496)
        def test_496_Add_IPV4_Address_to_the_DENY_List_at_default_dns_view_level(self):
                print("\n============================================\n")
                print("Adding IPv4 address to the DENY List at default dns view level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 496 Execution Completed")

        @pytest.mark.run(order=497)
        def test_497_Validate_IPV4_Address_to_the_DENY_List_at_dns_view_level(self):
                print("\n============================================\n")
                print("Validating IPv4 address to the DENY List at default dns view level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = (config.client_v4)
                if data in response:
                    assert True
                else:
                    assert False
                print(data)
                print("\nTest Case 497 Execution Completed")


################################
## named.conf file validation ##
################################

        @pytest.mark.run(order=498)
        def test_498_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 498 Execution Completed")
                
        @pytest.mark.run(order=499)
        def test_499_Validate_last_queried_denylist_shoud_update_with_include_IPv4_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last-queried-denylist should update with IPv4 address allow permission in named.conf file ")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { "+config.client_v4+"; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 499 Execution Completed")
            
    
###################
## Dig operation ##
###################

        @pytest.mark.run(order=500)
        def test_500_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 14.test.com A' )
                f= open("7933.txt","w+")
                f.write("14.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 500 Execution Completed")

        @pytest.mark.run(order=501)
        def test_501_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=14.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 501 Execution Completed")


#############################################################################################################
### Test Cases :  Excluding IPv4 Address from  DENY LIST and allowing client to update the "LAST Queried" ###
#############################################################################################################

        @pytest.mark.run(order=502)
        def test_502_Excluding_IPv4_Address_from_last_queried_deny_list_at_dns_view_level(self):
                print("\n============================================\n")
                print("Excluding IPv4 address in last queried denylist at dns view level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 502 Execution Completed")

        @pytest.mark.run(order=503)
        def test_503_Validate_excluded_IPv4_address_in_last_queried_denylist_at_dns_view_level(self):
                print("\n============================================\n")
                print("validating excluded IPv4 address in last queried deny list at dns view level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "'+config.client_v4+'"','"permission": "DENY"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                sleep(60)
                print("\nTest Case 503 Execution Completed")



################################
## named.conf file validation ##
################################

        @pytest.mark.run(order=504)
        def test_504_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                        print("data stored in a variable")
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 504 Execution Completed")
                
        @pytest.mark.run(order=505)
        def test_505_Validate_last_queried_denylist_shoud_update_with_excluded_IPv4_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last-queried-denylist should update with exclude IPv4 address in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { !"+config.client_v4+"; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 505 Execution Completed")

##############
## A record ##
##############


        @pytest.mark.run(order=506)
        def test_506_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 14.test.com A' )
                f= open("7933.txt","w+")
                f.write("14.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 506 Execution Completed")


        @pytest.mark.run(order=507)
        def test_507_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=14.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 507 Execution Completed")
                

####################################################################################################################
### NSUPDATE at Zone :  Adding IPv4 NETWORK to the DENY LIST and prevente the clients from updating the "LAST Queried" ###
####################################################################################################################

##################################################
## Disabling monitor for rr/zones at view level ##
##################################################

        @pytest.mark.run(order=508)
        def test_508_Disable_TimeStamp_Monitor_for_RR_and_Zones_at_DNS_VIEW_Level(self):
                print("\n============================================\n")
                print("Disabling time stamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="view",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": False,"enable_scavenging": False,"enable_zone_last_queried": False,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 508 Executuion Completed")

        @pytest.mark.run(order=509)
        def test_509_Validate_disabled_RR_ZOne_timstamp_monitor_for_RR_and_zone_at_DNS_View_level(self):
                print("\n============================================\n")
                print("validating disabled timestamp monitor for RR and zone at DNS VIEW level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="view?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": false','"enable_zone_last_queried": false'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 509 Execution Completed")
        
    
##############
## A record ##
##############
	
        @pytest.mark.run(order=510)
        def test_510_Create_A_record_through_nsupdate(self):
                print("\n============================================\n")
                print("creating A record through nsupdate")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
     	                child.logfile=sys.stdout
                        child.expect('#')
                        child.send('nsupdate\n')
                        child.expect('>')
                        child.send('server '+config.grid_vip+'\n')
                        child.expect('>')
                        child.send('update add 15.test.com 10 A 10.0.0.45\n')
                        child.expect('>')
                        child.send('send\n')
                        child.expect('>')
                        print("Record successfully created by nsupdate")
                except:
                        print("Failed to create record by nsupdate")
                        assert False
                finally:
                        child.close()
                print("\nTest Case 510 Execution Completed")
	
        @pytest.mark.run(order=511)
        def test_511_Validate_created_A_record_through_nsupdate(self):
                print("\n============================================\n")
                print("validating created A record through nsupdate")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=15.test.com",grid_vip=config.grid_vip)
                print(response)
                data = ['"ipv4addr": "10.0.0.45"','"name": "15.test.com"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 511 Execution Completed")

####################################
## Enabling monitor for rr/zones ##
####################################

        @pytest.mark.run(order=512)
        def test_512_Enable_TimeStamp_Monitor_for_RR_and_Zones_at_Zone_Level(self):
                print("\n============================================\n")
                print("Enabling time stamp monitor for RR and zone at ZONE level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 512 Executuion Completed")
	
        @pytest.mark.run(order=513)
        def test_513_Validate_enabled_RR_Zone_timstamp_monitor_for_RR_and_zone_at_ZONE_level(self):
                print("\n============================================\n")
                print("validating enabled timestamp monitor for RR and zone at zone level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                #print(ref)
                output = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(output)
                data = {'"enable_rr_last_queried": true','"enable_zone_last_queried": true'}
                for i in data:
                	if i in output:
                        	assert True
                	else:
                        	assert False
                print("Test Case 513 Execution Completed")


        @pytest.mark.run(order=514)
        def test_514_Add_IPV4_Address_to_the_Last_Queried_DENY_List_at_zone_level(self):
                print("\n============================================\n")
                print("Adding IPv4 address to the last queried DENY List at zone level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 514 Execution Completed")

        @pytest.mark.run(order=515)
        def test_515_Validate_IPV4_Address_to_the_DENY_List_at_zone_level(self):
                print("\n============================================\n")
                print("Validating IPv4 address to the last queried DENY List at zone level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = (config.client_v4)
                if data in response:
                    assert True
                else:
                    assert False
                print(data)
                print("\nTest Case 515 Execution Completed")


################################
## named.conf file validation ##
################################

        @pytest.mark.run(order=516)
        def test_516_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 516 Execution Completed")
                
        @pytest.mark.run(order=517)
        def test_517_Validate_last_queried_denylist_shoud_update_with_include_IPv4_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last-queried-denylist should update with IPv4 address allow permission in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { "+config.client_v4+"; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 517 Execution Completed")
            
    
###################
## Dig operation ##
###################

        @pytest.mark.run(order=518)
        def test_518_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 15.test.com A' )
                f= open("7933.txt","w+")
                f.write("15.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 518 Execution Completed")

        @pytest.mark.run(order=519)
        def test_519_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=15.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 519 Execution Completed")


#############################################################################################################
### Test Cases :  Excluding IPv4 Address from  DENY LIST and allowing client to update the "LAST Queried" ###
#############################################################################################################

        @pytest.mark.run(order=520)
        def test_520_Excluding_IPv4_Address_from_last_queried_deny_list_at_zone_level(self):
                print("\n============================================\n")
                print("Excluding IPv4 address in last queried denylist at zone level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 520 Execution Completed")

        @pytest.mark.run(order=521)
        def test_521_Validate_excluded_IPv4_address_in_last_queried_denylist_at_zone_level(self):
                print("\n============================================\n")
                print("validating excluded IPv4 address in last queried deny list at zone level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref = json.loads(get_ref)[0]['_ref']
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "'+config.client_v4+'"','"permission": "DENY"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 521 Execution Completed")



################################
## named.conf file validation ##
################################

        @pytest.mark.run(order=522)
        def test_522_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                        print("data stored in a variable")
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 522 Execution Completed")
                
        @pytest.mark.run(order=523)
        def test_523_Validate_last_queried_denylist_shoud_update_with_exclude_IPv4_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last-queried-denylist should update with exclude IPv4 address in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { !"+config.client_v4+"; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 523 Execution Completed")

##############
## A record ##
##############


        @pytest.mark.run(order=524)
        def test_524_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 15.test.com A' )
                f= open("7933.txt","w+")
                f.write("15.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 524 Execution Completed")


        @pytest.mark.run(order=525)
        def test_525_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=15.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 525 Execution Completed")
                
##################################################
## Disabling monitor for rr/zones at zone level ##
##################################################
	
        @pytest.mark.run(order=526)
        def test_526_Disable_TimeStamp_Monitor_for_RR_and_Zones_at_zone_Level(self):
                print("\n============================================\n")
                print("Disabling time stamp monitor for RR and zone at zone level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": False,"enable_scavenging": False,"enable_zone_last_queried": False,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                data1 = {"use_scavenging_settings": False}
                response1 = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data1),grid_vip=config.grid_vip)
                print(response1)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 526 Executuion Completed")

        @pytest.mark.run(order=527)
        def test_527_Validate_disabled_RR_Zone_timstamp_monitor_for_RR_and_zone_at_zone_level(self):
                print("\n============================================\n")
                print("validating disabled timestamp monitor for RR and zone at zone level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                output = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(output)
                data = {'"enable_rr_last_queried": false','"enable_zone_last_queried": false'}
                for i in data:
                	if i in output:
                        	assert True
                            	print(i)
                	else:
                        	assert False
                output2 = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=use_scavenging_settings",grid_vip=config.grid_vip)
                print(output2)
                data1 = ('"use_scavenging_settings": false')
                if data1 in output2:
                    assert True
                    print(data1)
                else:
                    assert False
                print("Test Case 527 Execution Completed")
    
    
##################################################
## Disabling monitor for rr/zones at view level ##
##################################################

        @pytest.mark.run(order=528)
        def test_528_Disable_TimeStamp_Monitor_for_RR_and_Zones_at_view_Level(self):
                print("\n============================================\n")
                print("Disabling time stamp monitor for RR and zone at view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="view",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": False,"enable_scavenging": False,"enable_zone_last_queried": False,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                data1 = {"use_scavenging_settings": False}
                response1 = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data1),grid_vip=config.grid_vip)
                print(response1)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 528 Executuion Completed")
	
        @pytest.mark.run(order=529)
        def test_529_Validate_disabled_RR_Zone_timstamp_monitor_for_RR_and_zone_at_view_level(self):
                print("\n============================================\n")
                print("validating disabled timestamp monitor for RR and zone at view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="view?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": false','"enable_zone_last_queried": false'}
                for i in data:
                	if i in response:
                        	assert True
                            	print(i)
                	else:
                        	assert False
                output2 = ib_NIOS.wapi_request('GET',object_type="view?_return_fields=use_scavenging_settings",grid_vip=config.grid_vip)
                print(output2)
                data1 = ('"use_scavenging_settings": false')
                if data1 in output2:
                        assert True
                        print(data1)
                else:
                        assert False
                print("Test Case 529 Execution Completed")
    



##############################
## Scenario :  DDNS UPDATES ##
##############################

######################################################
## Disabling monitor for rr/zones at grid:dns level ##
######################################################
	
        @pytest.mark.run(order=530)
        def test_530_Disable_TimeStamp_Monitor_for_RR_and_Zones_at_Grid_DNS_Level(self):
                print("\n============================================\n")
                print("Disabling time stamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": False,"enable_scavenging": False,"enable_zone_last_queried": False,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 530 Executuion Completed")

        @pytest.mark.run(order=531)
        def test_531_Validate_disabled_RR_ZOne_timstamp_monitor_for_RR_and_zone_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("validating disabled timestamp monitor for RR and zone at GRID DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": false','"enable_zone_last_queried": false'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 531 Execution Completed")

        @pytest.mark.run(order=532)
        def test_532_Start_DHCP_Service_on_both_members(self):
                print("\n============================================\n")
                print("Enabling DHCP Service")
                print("\n============================================\n")
                for i in range(0,2):
                        res = ib_NIOS.wapi_request('GET', object_type="member:dhcpproperties")
                        ref1 = json.loads(res)[i]["_ref"]
                        data = {"enable_dhcp": True}
                        response = ib_NIOS.wapi_request('PUT', ref=ref1, fields=json.dumps(data))
                        print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 532 Execution Completed")

        @pytest.mark.run(order=533)
        def test_533_Validate_enabled_DHCP_service_on_both_members(self):
                print("\n============================================\n")
                print("Validate enabled DHCP Service ")
                print("\n============================================\n")
                data = ('"enable_dhcp": true')
                for i in range(0,2):
                        member = ib_NIOS.wapi_request('GET', object_type="member:dhcpproperties")
                        ref = json.loads(member)[i]["_ref"]
                        member = ib_NIOS.wapi_request('GET', object_type=ref+"?_return_fields=enable_dhcp")
                        print(member)
                        if data in member:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 533 Execution Completed")



        @pytest.mark.run(order=534)
        def test_534_Add_DHCP_Network_and_range_to_start_DDNS_updates(self):
                print("\n============================================\n")
                print("Add DHCP network and range to start DDNS updates")
                print("\n============================================\n")
                net_obj = {"members":[{"_struct": "dhcpmember", "ipv4addr":config.grid_vip ,"name":config.grid_fqdn}],"network": "10.0.0.0/8", "network_view": "default"}
                network = ib_NIOS.wapi_request('POST', object_type="network", fields=json.dumps(net_obj))
                print(network)
                range_obj = {"start_addr":"10.0.0.10","end_addr":"10.0.0.200","member":{"_struct": "dhcpmember","ipv4addr":config.grid_vip,"name": config.grid_fqdn}}
                range = ib_NIOS.wapi_request('POST', object_type="range", fields=json.dumps(range_obj))
                print(range)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid")
                ref = json.loads(grid)[0]['_ref']
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=requestrestartservicestatus")
                restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices")
                sleep(10)                
                print("Test Case 534 Execution Completed")

        @pytest.mark.run(order=535)
        def test_535_Validate_addition_of_DHCP_network(self):
                print("\n============================================\n")
                print("Validating addition of DHCP network ")
                print("\n============================================\n")
                network = ib_NIOS.wapi_request('GET', object_type="network?network=10.0.0.0",grid_vip=config.grid_vip)
                print(network)
                data = ('"network": "10.0.0.0/8"')
                if data in network:
                        assert True
                else:
                        assert False
                print("Test Case 535 Execution Completed")

        @pytest.mark.run(order=536)
        def test_536_Validate_addition_of_DHCP_range(self):
                print("\n============================================\n")
                print("Validating addition of DHCP range")
                print("\n============================================\n")
                range = ib_NIOS.wapi_request('GET', object_type="range?network=10.0.0.0",grid_vip=config.grid_vip)
                print(range)
                data = ['"start_addr": "10.0.0.10"','"end_addr": "10.0.0.200"']
                for i in data:
                    if i in range:
                        assert True
                    else:
                        assert False
                print("Test Case 536 Execution Completed")
	
        @pytest.mark.run(order=537)
        def test_537_Enable_DDNS_updates_to_create_dynamic_records_and_allow_grid_dns_updates_to_ANY(self):
                print("\n============================================\n")
                print("Enabling DDNS updates to create autocreated records")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET', object_type="grid:dhcpproperties")
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print ref1
                data = {"ddns_domainname": "test.com","ddns_generate_hostname": True,"enable_ddns": True,"ddns_update_fixed_addresses": True,"options":[{"name": "dhcp-lease-time","num": 51,"value": "43200","vendor_class": "DHCP"},{"name": "domain-name","num": 15,"value": "test.com","vendor_class": "DHCP"}],"ddns_ttl": 86400}
                response = ib_NIOS.wapi_request('PUT',ref= ref1,fields=json.dumps(data))
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid")
                ref = json.loads(grid)[0]['_ref']
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=requestrestartservicestatus")
                restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices")
                sleep(20)
                ########################################
                ## Allowing updates at grid dns level ##
                ########################################
                get_ref = ib_NIOS.wapi_request('GET', object_type="grid:dns")
                res = json.loads(get_ref)
                ref2 = json.loads(get_ref)[0]['_ref']
                print(ref2)
                data = {"allow_update": [{"_struct": "addressac","address": "Any","permission": "ALLOW"}]}
                response = ib_NIOS.wapi_request('PUT',ref= ref2,fields=json.dumps(data))
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid")
                ref = json.loads(grid)[0]['_ref']
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=requestrestartservicestatus")
                restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices")
                sleep(20)
                print("Test Case 537 Execution Completed")
                
                
        @pytest.mark.run(order=538)
        def test_538_Validate_Enabled_DDNS_updates_and_allowed_grid_dns_updates(self):
                print("\n============================================\n")
                print("Validate enabled DDNS updates")
                print("\n============================================\n")
                range = ib_NIOS.wapi_request('GET', object_type="grid:dhcpproperties?_return_fields=ddns_domainname,enable_ddns,ddns_generate_hostname,ddns_ttl,options",grid_vip=config.grid_vip)
                print(range)
                data = ['"ddns_domainname": "test.com"','"ddns_generate_hostname": true','"ddns_ttl": 86400','"enable_ddns": true','"name": "dhcp-lease-time"','"num": 51','"value": "43200"','"vendor_class": "DHCP"','"name": "domain-name"','"num": 15','"value": "test.com"','"vendor_class": "DHCP"']
                for i in data:
                        if i in range:
                                assert True
                                print(i)
                        else:
                                assert False
                ################################################
                ## Validating Allow updates at grid dns level ##
                ################################################
                grid_dns = ib_NIOS.wapi_request('GET', object_type="grid:dns?_return_fields=allow_update",grid_vip=config.grid_vip)
                print(grid_dns)
                data1 = ['"_struct": "addressac"','"address": "Any"','"permission": "ALLOW"']
                for i in data1:
                        if i in grid_dns:
                                assert True
                                print(i)
                        else:
                                assert False
                print("Test Case 538 Execution Completed")

		
        @pytest.mark.run(order=539)
        def test_539_Executing_dras_command_and_validating_output(self):
                print("\n============================================\n")
                print("Executing dras command and validating output")
                print("\n============================================\n")
                dras_cmd = 'sudo /import/tools/qa/tools/dras/dras -i'+str(config.grid_vip)+' '+'n 1 -x l=10.0.0.0 -h -a 11:22:33:44:55:66'
                dras_cmd1 = os.system(dras_cmd)
                sleep(10)
                print (dras_cmd1)
                if dras_cmd1 == 0 :
                        assert True
                else:
                        assert False
                sleep(20)
                print ("Test Case 539 Execution Completed")

        @pytest.mark.run(order=540)
        def test_540_Validate_record_created_through_ddns_updates(self):
                print("\n============================================\n")
                print("validating records which created through ddns updates")
                print("\n============================================\n")
                #response =ib_NIOS.wapi_request('GET',object_type="record:a?name=h112233445566.test.com",grid_vip=config.grid_vip)
                response =ib_NIOS.wapi_request('GET',object_type="record:txt?name=h112233445566.test.com",grid_vip=config.grid_vip)
                print(response)
                #data = ['"ipv4addr": "10.0.0.200"','"name": "h112233445566.test.com"']
                data = ['"name": "h112233445566.test.com"','"text": "005e965ac0ccf1536d586fa67671b219aa"']
                for i in data:
                    if i in response:
                        assert True
                    else:
                        assert False
                print("Test Case 540 Execution Completed")



######################################################
## Enabling monitor for rr/zones at grid:dns level ##
######################################################

        @pytest.mark.run(order=541)
        def test_541_Enable_TimeStamp_Monitor_for_RR_and_Zones_at_Grid_DNS_Level(self):
                print("\n============================================\n")
                print("Enabling time stamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 20 secs for the member to get started
                print("Test Case 541 Executuion Completed")

        @pytest.mark.run(order=542)
        def test_542_Validate_enabled_RR_ZOne_timstamp_monitor_for_RR_and_zone_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("validating enabled timestamp monitor for RR and zone at grid dns level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": true','"enable_zone_last_queried": true'}
                for i in data:
                	if i in response:
                        	assert True
				print(i)
                	else:
                        	assert False
                print("Test Case 542 Execution Completed")


        @pytest.mark.run(order=543)
        def test_543_Add_IPV4_Address_to_the_Last_Queried_DENY_List_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Adding IPv4 address to the DENY List at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 543 Execution Completed")
	
        @pytest.mark.run(order=544)
        def test_544_Validate_Added_IPV4_NETWORK_in_the_last_queried_DENY_List_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Validating added IPv4 address in last queried DENY List at grid dns level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns?_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "'+config.client_v4+'"','"permission": "ALLOW"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 544 Execution Completed")

        @pytest.mark.run(order=545)
        def test_545_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' h112233445566.test.com A' )
                #dig_cmd = ('dig @'+str(config.grid_vip)+' h112233445566.test.com TXT' )
                f= open("7933.txt","w+")
                f.write("h112233445566.test.com TXT")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("\nTest case 545 Execution completed")

	
        @pytest.mark.run(order=546)
        def test_546_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:txt?name=h112233445566.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 546 Execution Completed")


##############################################################################################################################
### Test Cases : Excluding the IPv4 Address from the DENY LIST at Grid DNS and allowing client to update the "LAST Queried" time stamp ###
##############################################################################################################################
	
        @pytest.mark.run(order=547)
        def test_547_Exclude_IPV4_Address_from_the_Last_Queried_DENY_List_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Excluding IPv4 address from the last queried DENY List at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 547 Execution Completed")


        @pytest.mark.run(order=548)
        def test_548_Validate_excluded_IPV4_Address_in_DENY_List_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Validating excluded IPv4 address in the last queried DENY List at grid dns level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ('"address": "'+config.client_v4+'"','"permission": "DENY"')
                for i in data:
                    if i in response:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 548 Execution Completed")

##############
## A Record ##
##############


        @pytest.mark.run(order=549)
        def test_549_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' h112233445566.test.com A' )
                #dig_cmd = ('dig @'+str(config.grid_vip)+' h112233445566.test.com TXT' )
                f= open("7933.txt","w+")
                f.write("h112233445566.test.com TXT")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("\nTest case 549 Execution completed")

	
        @pytest.mark.run(order=550)
        def test_550_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                #response =ib_NIOS.wapi_request('GET',object_type="record:a?name=h112233445566.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                response =ib_NIOS.wapi_request('GET',object_type="record:txt?name=h112233445566.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 550 Execution Completed")


################################
## DDNS UPDATES at VIEW level ##
################################

######################################################
## Disabling monitor for rr/zones at grid:dns level ##
######################################################

      	@pytest.mark.run(order=551)
        def test_551_Disable_TimeStamp_Monitor_for_RR_and_Zones_at_Grid_DNS_Level(self):
                print("\n============================================\n")
                print("Disabling time stamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": False,"enable_scavenging": False,"enable_zone_last_queried": False,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 20 secs for the member to get started
                print("Test Case 551 Executuion Completed")
	
        @pytest.mark.run(order=552)
        def test_552_Validate_disabled_RR_Zone_timstamp_monitor_for_RR_and_zone_at_Grid_DNS_level(self):
                print("\n============================================\n")
                print("validating disabled timestamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": false','"enable_zone_last_queried": false'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 552 Execution Completed")

        @pytest.mark.run(order=553)
        def test_553_Executing_dras_command_and_validating_the_output(self):
                print("\n============================================\n")
                print("Executing dras command and validating the output ")
                print("\n============================================\n")
                dras_cmd = 'sudo /import/tools/qa/tools/dras/dras -i'+str(config.grid_vip)+' '+'n 1 -x l=10.0.0.0 -h -a 11:22:33:44:55:67'
                dras_cmd1 = os.system(dras_cmd)
                sleep(10)
                print ('my dras result is',dras_cmd1)
                if dras_cmd1 == 0 :
                        assert True
                else:
                        assert False
                print ("Test Case 553 Execution Completed")
	
        @pytest.mark.run(order=554)
        def test_554_Validate_the_lease_and_name(self):
                print("\n============================================\n")
                print("validating the lease and name ")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=h112233445567.test.com",grid_vip=config.grid_vip)
                print(response)
                data = ['"ipv4addr": "10.0.0.199"','"name": "h112233445567.test.com"']
                #data = ['"name": "h112233445567.test.com"','"text": "00928a2c880bf3cd27fcafd4df5fb9f5c5"']	
                for i in data:
                    if i in response:
                        assert True
                    else:
                        assert False
                print("Test Case 554 Execution Completed")


#################################################
## Enabling monitor for rr/zones at view level ##
#################################################

      	@pytest.mark.run(order=555)
        def test_555_Enable_TimeStamp_Monitor_for_RR_and_Zones_at_DNS_VIEW_Level(self):
                print("\n============================================\n")
                print("Enabling time stamp monitor for RR and zone at DNS VIEW level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="view",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 20 secs for the member to get started
                print("Test Case 555 Executuion Completed")

        @pytest.mark.run(order=556)
        def test_556_Validate_enabled_Last_Queried_timstamp_monitor_for_RR_and_zone_at_DNS_view_level(self):
                print("\n============================================\n")
                print("Validate enabled last queried timestamp monitor for RR and zone at dns view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="view?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": true','"enable_zone_last_queried": true'}
                for i in data:
                	if i in response:
                        	assert True
				print(i)
                	else:
                        	assert False
                print("Test Case 556 Execution Completed")

####################################################################################################################
### Test Cases :  Adding IPv4 Address to the DENY LIST and prevente the clients from updating the "LAST Queried" ###
####################################################################################################################

        @pytest.mark.run(order=557)
        def test_557_Add_IPV4_Address_to_the_Last_Queried_DENY_List_at_dns_view_level(self):
                print("\n============================================\n")
                print("Adding IPv4 address to the Last Queried DENY List at dns view level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 557 Execution Completed")

        @pytest.mark.run(order=558)
        def test_558_Validate_Added_IPV4_NETWORK_in_the_Last_Queried_DENY_List_at_view_level(self):
                print("\n============================================\n")
                print("Validating added IPv4 NETWORK in the last queried deny list at view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="view?_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "'+config.client_v4+'"','"permission": "ALLOW"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 558 Execution Completed")

        @pytest.mark.run(order=559)
        def test_559_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' h112233445567.test.com A' )
                f= open("7933.txt","w+")
                f.write("h112233445567.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("\nTest case 559 Execution completed")
                                
                                
        @pytest.mark.run(order=560)
        def test_560_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=h112233445567.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 560 Execution Completed")


##############################################################################################################################
### Test Cases : Excluding the IPv4 Address from the DENY LIST and allowing client to update the "LAST Queried" time stamp ###
##############################################################################################################################

        @pytest.mark.run(order=561)
        def test_561_Exclude_IPV4_Address_from_the_Last_Queried_DENY_List_at_dns_view_level(self):
                print("\n============================================\n")
                print("Excluding IPv4 address from the last queried dENY list at dns view level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 561 Execution Completed")

	
        @pytest.mark.run(order=562)
        def test_562_Validate_Added_IPV4_Address_in_the_Last_Queried_DENY_List_at_view_level(self):
                print("\n============================================\n")
                print("Validating added IPv4 address in the last queried deny list at dns view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="view?_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ('"address": "'+config.client_v4+'"','"permission": "DENY"')
                for i in data:
                    if i in response:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 562 Execution Completed")


##############
## A Record ##
##############


        @pytest.mark.run(order=563)
        def test_563_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' h112233445567.test.com A' )
                f= open("7933.txt","w+")
                f.write("h112233445567.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("\nTest case 563 Execution completed")


        @pytest.mark.run(order=564)
        def test_564_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=h112233445567.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 564 Execution Completed")


################################
## DDNS UPDATES at ZONE level ##
################################

######################################################
## Disabling monitor for rr/zones at DNS view level ##
######################################################

      	@pytest.mark.run(order=565)
        def test_565_Disble_TimeStamp_Monitor_for_RR_and_Zones_at_DNS_VIEW_Level(self):
                print("\n============================================\n")
                print("Disaabling last queried time stamp monitor for RR and zone at DNS view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="view",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": False,"enable_scavenging": False,"enable_zone_last_queried": False,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 565 Executuion Completed")
	
        @pytest.mark.run(order=566)
        def test_566_Validate_disbled_RR_and_Zone_last_queried_timstamp_monitor_DNS_view_level(self):
                print("\n============================================\n")
                print("validating enabled last queried timestamp monitor for RR and zone at dns view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="view?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": false','"enable_zone_last_queried": false'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 566 Execution Completed")
	
        @pytest.mark.run(order=567)
        def test_567_Executing_dras_command_and_validate_dras_output(self):
                print("\n============================================\n")
                print("Executing dras command and validating dras output")
                print("\n============================================\n")
                dras_cmd = 'sudo /import/tools/qa/tools/dras/dras -i'+str(config.grid_vip)+' '+'n 1 -x l=10.0.0.0 -h -a 11:22:33:44:55:68'
                dras_cmd1 = os.system(dras_cmd)
                sleep(10)
                print (dras_cmd1)
                if dras_cmd1 == 0 :
                        assert True
                else:
                        assert False
                print ("Test Case 567 Execution Completed")
	
       	@pytest.mark.run(order=568)
        def test_568_Validate_the_lease(self):
                print("\n============================================\n")
                print("validating the lease and name ")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=h112233445568.test.com",grid_vip=config.grid_vip)
                print(response)
                data = ['"ipv4addr": "10.0.0.198"','"name": "h112233445568.test.com"']
                for i in data:
                    if i in response:
                        assert True
                    else:
                        assert False
                print("Test Case 568 Execution Completed")


#################################################
## Enabling monitor for rr/zones at zone level ##
#################################################

      	@pytest.mark.run(order=569)
        def test_569_Enable_last_queried_timestamp_monitor_for_RR_and_Zones_at_zone_Level(self):
                print("\n============================================\n")
                print("Enabling last queried time stamp monitor for RR and zone at zone level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 20 secs for the member to get started
                print("Test Case 569 Executuion Completed")
	
        @pytest.mark.run(order=570)
        def test_570_Validate_enabled_last_queried_timstamp_monitor_for_RR_and_zone_at_zone_level(self):
                print("\n============================================\n")
                print("validating enabled last queried timestamp monitor for RR and Zone at zone level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',"zone_auth?fqdn=test.com&_return_fields%2B=scavenging_settings&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": true','"enable_zone_last_queried": true'}
                for i in data:
                        if i in response:
                                assert True
                                print(i)
                        else:
                                assert False
                print("Test Case 570 Execution Completed")

####################################################################################################################
### Test Cases :  Adding IPv4 Address to the DENY LIST and prevente the clients from updating the "LAST Queried" ###
####################################################################################################################
	
        @pytest.mark.run(order=571)
        def test_571_Add_IPV4_Address_to_the_DENY_List_at_zone_level(self):
                print("\n============================================\n")
                print("Adding IPv4 address to the last queried DENY List at zone level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 571 Execution Completed")

        @pytest.mark.run(order=572)
        def test_572_Validate_Added_IPV4_Address_in_the_Last_Queried_DENY_List(self):
                print("\n============================================\n")
                print("Validating added IPv4 address in the last queried denylist")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com&_return_fields=last_queried_acl&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ['"address": "'+config.client_v4+'"','"permission": "ALLOW"']
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("\nTest Case 572 Execution Completed")

        @pytest.mark.run(order=573)
        def test_573_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' h112233445568.test.com TXT' )
                f= open("7933.txt","w+")
                f.write("h112233445568.test.com TXT")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("\nTest case 573 Execution completed")
                                
                                
        @pytest.mark.run(order=574)
        def test_574_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:txt?name=h112233445568.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 574 Execution Completed")


##############################################################################################################################
### Test Cases : Excluding the IPv4 Address from the DENY LIST and allowing client to update the "LAST Queried" time stamp ###
##############################################################################################################################
	
        @pytest.mark.run(order=575)
        def test_575_Excluding_IPv4_Address_from_last_queried_deny_list(self):
                print("\n============================================\n")
                print("Excluding IPv4 address in last queried denylist")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 575 Execution Completed")


        @pytest.mark.run(order=576)
        def test_576_Validate_excluded_IPV4_Address_in_the_Last_Queried_DENY_List(self):
                print("\n============================================\n")
                print("validating excluded IPv4 address in last queried deny list")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ('"address": "'+config.client_v4+'"','"permission": "DENY"')
                for i in data:
                    if i in response:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 576 Execution Completed")


##############
## A Record ##
##############


        @pytest.mark.run(order=577)
        def test_577_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' h112233445568.test.com TXT' )
                f= open("7933.txt","w+")
                f.write("h112233445568.test.com TXT")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("\nTest case 577 Execution completed")


        @pytest.mark.run(order=578)
        def test_578_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:txt?name=h112233445568.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 578 Execution Completed")


######################################################
## Disabling monitor for rr/zones at grid:dns level ##
######################################################

      	@pytest.mark.run(order=579)
        def test_579_Disable_TimeStamp_Monitor_for_RR_and_Zones_at_Grid_DNS_Level(self):
                print("\n============================================\n")
                print("Disabling time stamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": False,"enable_scavenging": False,"enable_zone_last_queried": False,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 579 Executuion Completed")
	
        @pytest.mark.run(order=580)
        def test_580_Validate_disabled_Last_queried_timstamp_monitor_for_RR_and_zone_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("validating disabled last queried timestamp monitor for RR and zone at GRID DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": false','"enable_zone_last_queried": false'}
                for i in data:
                    if i in response:
                        assert True
                    else:
                        assert False
                print("Test Case 580 Execution Completed")


######################################################
## Disabling monitor for rr/zones at DNS view level ##
######################################################

      	@pytest.mark.run(order=581)
        def test_581_Disable_Scavenging_settings_at_DNS_view_Level(self):
                print("\n============================================\n")
                print("Disabling scavenging settings at DNS view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="view",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"use_scavenging_settings": False}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 581 Executuion Completed")
	
        @pytest.mark.run(order=582)
        def test_582_Validate_disabled_scavenging_settings_at_DNS_view_level(self):
                print("\n============================================\n")
                print("validating disabled scavenging settings at DNS view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="view?_return_fields=use_scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = ('"use_scavenging_settings": false')
                if data in response:
                        assert True
                else:
                        assert False
                print("Test Case 582 Execution Completed")

##################################################
## Disabling monitor for rr/zones at ZONE level ##
##################################################

      	@pytest.mark.run(order=583)
        def test_583_Disable_Scavenging_settings_at_ZONE_Level(self):
                print("\n============================================\n")
                print("Disabling scavenging settings at ZONE level")
                print("\n============================================\n")
                #response = ib_NIOS.wapi_request('GET', object_type="zone_auth?fqdn=test.com&_return_fields=use_scavenging_settings&_return_as_object=1",grid_vip=config.grid_vip)
                response = ib_NIOS.wapi_request('GET', object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"use_scavenging_settings": False}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 20 secs for the member to get started
                print("Test Case 583 Executuion Completed")
	
        @pytest.mark.run(order=584)
        def test_584_Validate_disabled_scavenging_settings_at_ZONE_level(self):
                print("\n============================================\n")
                print("validating disabled scavenging settings at ZONE level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com&_return_fields=use_scavenging_settings&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ('"use_scavenging_settings": false')
                if data in response:
                        assert True
                else:
                        assert False
                print("Test Case 584 Execution Completed")


###################################################################
################ Secondary name server scenarios ##################
###################################################################
	
        @pytest.mark.run(order=585)
        def test_585_Add_Authoritative_zone_with_both_primary_secondary_servers(self):
                print("\n============================================\n")
                print("adding authoritative zone with both primary and secondary servers ")
                print("\n============================================\n")
                data = {"fqdn": "zone.com","grid_primary": [{"name": config.grid_fqdn,"stealth": False}],"grid_secondaries": [{"enable_preferred_primaries": False,"grid_replicate": True,"lead": False,"name": config.grid_member1_fqdn,"preferred_primaries": [],"stealth": False}]}
                response = ib_NIOS.wapi_request('POST', object_type="zone_auth", fields=json.dumps(data))
                print(response)
                print("Test Case 585 Execution Completed")

        @pytest.mark.run(order=586)
        def test_586_Validate_addition_of_Authoritative_zone(self):
                print("\n============================================\n")
                print("Validating addition of authoritative zone")
                print("\n============================================\n")
                get_temp = ib_NIOS.wapi_request('GET', object_type="zone_auth?fqdn=zone.com&_return_fields=grid_primary,grid_secondaries,fqdn",grid_vip=config.grid_vip)
                print(get_temp)
                data = ['"fqdn": "zone.com"','"name": "'+config.grid_fqdn+'"','"name": "'+config.grid_member1_fqdn+'"']
                for i in data:
                        if i in get_temp:
                                assert True
                        else:
                                assert False
                print(data)
                print("\n")
                print("Test Case 586 Execution Completed")



############################################
#### SET of ACES at Grid DNS ###############
############################################


######################################################
## Enabling monitor for rr/zones at grid:dns level ##
######################################################

      	@pytest.mark.run(order=587)
        def test_587_Enable_Last_Queried_TimeStamp_Monitor_for_RR_and_Zones_at_Grid_DNS_Level(self):
                print("\n============================================\n")
                print("Enabling last queried time stamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 587 Executuion Completed")
	
        @pytest.mark.run(order=588)
        def test_588_Validate_enabled_Last_queried_timstamp_monitor_for_RR_and_zone_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("validating enabled last queried timestamp monitor for RR and zone at grid dns level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": true','"enable_zone_last_queried": true'}
                for i in data:
                	if i in response:
                        	assert True
				print(i)
                	else:
                        	assert False
                print("Test Case 588 Execution Completed")


##################################################################################################################
### Test Cases : Adding IPv4 Address to the DENY LIST and Blocking the client from updating the "LAST Queried" ###
##################################################################################################################


        @pytest.mark.run(order=589)
        def test_589_Add_IPV4_Address_to_the_Last_Queried_DENY_List_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Adding IPv4 address to the Last Queried DENY List at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 589 Execution Completed")

        @pytest.mark.run(order=590)
        def test_590_Validate_IPV4_Address_in_the_Last_Queried_DENY_List_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Validating IPv4 address in the Last Queried DENY List at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(get_ref)
                data = ['"address": "'+config.client_v4+'"','"permission": "ALLOW"']
                for i in data:
                    if i in get_ref:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 590 Execution Completed")

##############
## A record ##
##############

        @pytest.mark.run(order=591)
        def test_591_Add_and_Validate_A_record(self):
                print("\n============================================\n")
                print("Adding and validating A record for added zone")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.46","name": "16.zone.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=16.zone.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "16.zone.com"','"ipv4addr": "10.0.0.46"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("Test Case 591 Executuion Completed")
	
        @pytest.mark.run(order=592)
        def test_592_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_member1_vip)+' 16.zone.com A' )
                f= open("7933.txt","w+")
                f.write("16.zone.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_member1_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 592 Execution Completed")


        @pytest.mark.run(order=593)
        def test_593_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=16.zone.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 593 Execution Completed")

############################################
## named.conf file validation in member1 ##
############################################
	
        @pytest.mark.run(order=594)
        def test_594_Copy_named_conf_file_from_grid_member_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid member to client tmp directory")
                print("\n============================================\n")
                child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_member1_vip)
                child.logfile=sys.stdout
                child.expect('#')
                child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                child.expect('(yes/no)?')
                child.sendline('yes')
                child.expect('password: ')
                child.sendline('infoblox')
                child.expect('#')
                #child.close()
                print("Test Case 594 Execution Completed")
               

        @pytest.mark.run(order=594)
        def test_594_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory ")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_member1_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                except:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_member1_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')

                finally:
                        child.close()
                print("Test Case 594 Execution Completed")




 
        @pytest.mark.run(order=595)
        def test_595_Validate_last_queried_denylist_shoud_update_with_include_IPv4_Address_in_the_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last queried denylist should update with include IPv4 address in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { "+config.client_v4+"; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 595 Execution Completed") 


###################################################################################################################
##### Test Cases : Excluding IPv4 Address from DENY LIST and Allowing the client to update the "LAST Queried" #####
###################################################################################################################

        @pytest.mark.run(order=596)
        def test_596_Exclude_IPv4_Address_from_the_last_queried_deny_list_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Excluding IPv4 address from the last queried denylist at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 596 Execution Completed")

        @pytest.mark.run(order=597)
        def test_597_Validate_IPv4_address_in_last_queried_denylist_at_grid_dns_level(self):
                print("\n============================================\n")
                print("validating IPv4 address in the last queried deny list at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(get_ref)
                data = ['"address": "'+config.client_v4+'"','"permission": "DENY"']
                for i in data:
                    if i in get_ref:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 597 Execution Completed")


############################################
## named.conf file validation in member1S ##
############################################
	
        @pytest.mark.run(order=598)
        def test_598_Copy_named_conf_file_from_grid_member_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid member to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_member1_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 598 Execution Completed")
                
        @pytest.mark.run(order=599)
        def test_599_Validate_last_queried_denylist_shoud_update_with_exclude_IPv4_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last-queried-denylist should update with exclude IPv4 address DENY permission in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { !"+config.client_v4+"; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 599 Execution Completed") 


##############
## A record ##
##############

        @pytest.mark.run(order=600)
        def test_600_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 16.zone.com A' )
                f= open("7933.txt","w+")
                f.write("16.zone.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 600 Execution Completed")


        @pytest.mark.run(order=601)
        def test_601_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=16.zone.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 601 Execution Completed")


#######################################################
############### SET of ACES at DNS view ###############
#######################################################

######################################################
## Disabling monitor for rr/zones at grid:dns level ###
######################################################

      	@pytest.mark.run(order=602)
        def test_602_Disable_TimeStamp_Monitor_for_RR_and_Zones_at_Grid_DNS_Level(self):
                print("\n============================================\n")
                print("Disabling time stamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": False,"enable_scavenging": False,"enable_zone_last_queried": False,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 20 secs for the member to get started
                print("Test Case 602 Executuion Completed")

        @pytest.mark.run(order=603)
        def test_603_Validate_disabled_Last_Queried_timstamp_monitor_for_RR_and_zone_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("validating disabled last queried timestamp monitor for RR and zone at GRID DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": false','"enable_zone_last_queried": false'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                sleep(60)
                print("Test Case 603 Execution Completed")


######################################################
### Enabling use_scavenging_settings at VIEW level ###
######################################################

      	@pytest.mark.run(order=604)
        def test_604_Enable_Scavenging_settings_at_DNS_VIEW_Level(self):
                print("\n============================================\n")
                print("Enabling scavenging settings at DNS view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="view?_return_fields=use_scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"use_scavenging_settings": True}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 20 secs for the member to get started
                print("Test Case 604 Executuion Completed")
	
        @pytest.mark.run(order=605)
        def test_605_Validate_enabled_Scavenging_settings_at_DNS_VIEW_Level(self):
                print("\n============================================\n")
                print("validating enabled Scavenging settings at DNS VIEW Level ")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="view?_return_fields=use_scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = ('"use_scavenging_settings": true')
                if data in response:
                       	assert True
                else:
                        assert False
                print("Test Case 605 Execution Completed")

######################################################
## Enabling monitor for rr/zones at view level ###
######################################################

      	@pytest.mark.run(order=606)
        def test_606_Enable_Last_Queried_TimeStamp_Monitor_for_RR_and_Zones_at_DNS_view_Level(self):
                print("\n============================================\n")
                print("Enabling last queried time stamp monitor for RR and zone at DNS view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="view",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 606 Executuion Completed")

        @pytest.mark.run(order=607)
        def test_607_Validate_enabled_Last_Queried_timstamp_monitor_for_RR_and_zone_at_DNS_view_level(self):
                print("\n============================================\n")
                print("validating enabled last queried timestamp monitor for RR and zone at dns view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="view?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": true','"enable_zone_last_queried": true'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 607 Execution Completed")


##################################################################################################################
### Test Cases : Adding IPv4 Address to the DENY LIST and Blocking the client from updating the "LAST Queried" ###
##################################################################################################################


        @pytest.mark.run(order=608)
        def test_608_Add_IPV4_Address_to_the_Last_Queried_DENY_List_at_dns_view_level(self):
                print("\n============================================\n")
                print("adding IPv4 Address to the last queried deny list at dns view level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 608 Execution Completed")

        @pytest.mark.run(order=609)
        def test_609_Validate_added_IPV4_Address_in_the_Last_Queried_DENY_List_at_dns_view_level(self):
                print("\n============================================\n")
                print("Validating added IPv4 address in the last queried DENY List at dns view level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view?_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(get_ref)
                data = ['"address": "'+config.client_v4+'"','"permission": "ALLOW"']
                for i in data:
                    if i in get_ref:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 609 Execution Completed")

##############
## A record ##
##############

        @pytest.mark.run(order=610)
        def test_610_Add_and_Validate_A_record(self):
                print("\n============================================\n")
                print("adding and validating A record for added zone")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.47","name": "17.zone.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=17.zone.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "17.zone.com"','"ipv4addr": "10.0.0.47"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("Test Case 610 Executuion Completed")
	
        @pytest.mark.run(order=611)
        def test_611_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_member1_vip)+' 17.zone.com A' )
                f= open("7933.txt","w+")
                f.write("17.zone.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_member1_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 611 Execution Completed")


        @pytest.mark.run(order=612)
        def test_612_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=17.zone.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 612 Execution Completed")

############################################
## named.conf file validation in member1 ###
############################################

        @pytest.mark.run(order=613)
        def test_613_Copy_named_conf_file_from_grid_member_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid member to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_member1_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 613 Execution Completed")
                
        @pytest.mark.run(order=614)
        def test_614_Validate_last_queried_denylist_shoud_update_with_include_IPv4_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last queried denylist should update with include IPv4 address in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { "+config.client_v4+"; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 614 Execution Completed") 


###################################################################################################################
##### Test Cases : Excluding IPv4 Address from DENY LIST and Allowing the client to update the "LAST Queried" #####
###################################################################################################################

        @pytest.mark.run(order=615)
        def test_615_Exclude_IPv4_Address_from_the_last_queried_deny_list_at_view_level(self):
                print("\n============================================\n")
                print("Excluding IPv4 address from the last queried denylist at dns view level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 615 Execution Completed")

        @pytest.mark.run(order=616)
        def test_616_Validate_excluded_IPv4_address_in_last_queried_denylist_at_dns_view_level(self):
                print("\n============================================\n")
                print("validating excluded IPv4 address in teh last queried deny list at dns view level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view?_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(get_ref)
                data = ['"address": "'+config.client_v4+'"','"permission": "DENY"']
                for i in data:
                    if i in get_ref:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 616 Execution Completed")


############################################
## named.conf file validation in member1S ##
############################################

        @pytest.mark.run(order=617)
        def test_617_Copy_named_conf_file_from_grid_member_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid member to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_member1_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 617 Execution Completed")
                
        @pytest.mark.run(order=618)
        def test_618_Validate_last_queried_denylist_shoud_update_with_exclude_IPv4_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last-queried-denylist should update with exclude IPv4 address in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { !"+config.client_v4+"; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 618 Execution Completed") 


##############
## A record ##
##############
	
        @pytest.mark.run(order=619)
        def test_619_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 17.zone.com A' )
                f= open("7933.txt","w+")
                f.write("17.zone.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 619 Execution Completed")

	
        @pytest.mark.run(order=620)
        def test_620_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=17.zone.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert(response)
                print("Test Case 620 Execution Completed")



#########################################################
############### SET of ACES at ZONE level ###############
#########################################################

######################################################
### Disabling use_scavenging_settings at VIEW level ###
######################################################

      	@pytest.mark.run(order=621)
        def test_621_Disable_TimeStamp_Monitor_for_RR_and_Zones_at_DNS_view_Level(self):
                print("\n============================================\n")
                print("Disabling time stamp monitor for RR and zone at DNS view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="view",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"use_scavenging_settings": False}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 20 secs for the member to get started
                print("Test Case 621 Executuion Completed")
	
        @pytest.mark.run(order=622)
        def test_622_Validate_disabled_last_queried_timstamp_monitor_for_RR_and_zone_at_DNS_view_level(self):
                print("\n============================================\n")
                print("validating disabled last queried timestamp monitor for RR and zone at DNS view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="view?_return_fields=use_scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = ('"use_scavenging_settings": false')
                if data in response:
                        assert True
                else:
                        assert False
                print("Test Case 622 Execution Completed")

######################################################
### Enabling use_scavenging_settings at ZONE level ###
######################################################

      	@pytest.mark.run(order=623)
        def test_623_Enable_scavenging_settings_at_zone_level(self):
                print("\n============================================\n")
                print("Enabling scavenging settings at zone level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="zone_auth?fqdn=zone.com",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"use_scavenging_settings": True}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 20 secs for the member to get started
                print("Test Case 623 Executuion Completed")
	
        @pytest.mark.run(order=624)
        def test_624_Validate_enabled_scavenging_settings_at_zone_level(self):
                print("\n============================================\n")
                print("Validating enabled scavenging settings at zone level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=zone.com&_return_fields=use_scavenging_settings&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ('"use_scavenging_settings": true')
                if data in response:
                        assert True
                else:
                        assert False
                print("Test Case 624 Execution Completed")

######################################################
## Enabling monitor for rr/zones at ZONE level ###
######################################################

      	@pytest.mark.run(order=625)
        def test_625_Enable_Last_queried_TimeStamp_Monitor_for_RR_and_Zones_at_ZONE_Level(self):
                print("\n============================================\n")
                print("Enabling last queried timestamp monitor for RR and zones at zone level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="zone_auth?fqdn=zone.com",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 625 Executuion Completed")

        @pytest.mark.run(order=626)
        def test_626_Validate_enabled_Last_Queried_timstamp_monitor_for_RR_and_zone_at_ZONE_level(self):
                print("\n============================================\n")
                print("validating enabled last queried timestamp monitor for RR and zone at ZONE level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=zone.com&_return_fields=scavenging_settings&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": true','"enable_zone_last_queried": true'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 626 Execution Completed")


##################################################################################################################
### Test Cases : Adding IPv4 Address to the DENY LIST and Blocking the client from updating the "LAST Queried" ###
##################################################################################################################


        @pytest.mark.run(order=627)
        def test_627_Add_IPV4_Address_to_the_Last_Queried_DENY_List_at_ZONE_level(self):
                print("\n============================================\n")
                print("Adding IPv4 address to the Last Queried DENY List at zone level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=zone.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 627 Execution Completed")

        @pytest.mark.run(order=628)
        def test_628_Validate_added_IPV4_Address_in_the_Last_Queried_DENY_List_at_zone_level(self):
                print("\n============================================\n")
                print("Validating IPv4 address in the last queried DENY List at zone level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=zone.com&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(get_ref)
                data = ['"address": "'+config.client_v4+'"','"permission": "ALLOW"']
                for i in data:
                    if i in get_ref:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 628 Execution Completed")

##############
## A record ##
##############

        @pytest.mark.run(order=629)
        def test_629_Add_and_Validate_A_record(self):
                print("\n============================================\n")
                print("adding and validating A record for added zone ")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.48","name": "18.zone.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=18.zone.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "18.zone.com"','"ipv4addr": "10.0.0.48"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("Test Case 629 Executuion Completed")

        @pytest.mark.run(order=630)
        def test_630_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_member1_vip)+' 18.zone.com A' )
                f= open("7933.txt","w+")
                f.write("18.zone.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_member1_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 630 Execution Completed")


        @pytest.mark.run(order=631)
        def test_631_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=18.zone.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 631 Execution Completed")

############################################
## named.conf file validation in member1 ###
############################################

        @pytest.mark.run(order=632)
        def test_632_Copy_named_conf_file_from_grid_member_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid member to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_member1_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')		
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 632 Execution Completed")
                
        @pytest.mark.run(order=633)
        def test_633_Validate_last_queried_denylist_shoud_update_with_include_IPv4_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last-queried-denylist should update with include IPv4 address in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { "+config.client_v4+"; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 633 Execution Completed") 


###################################################################################################################
##### Test Cases : Excluding IPv4 Address from DENY LIST and Allowing the client to update the "LAST Queried" #####
###################################################################################################################

        @pytest.mark.run(order=634)
        def test_634_Excluding_IPv4_Address_from_last_queried_deny_list_at_zone_level(self):
                print("\n============================================\n")
                print("Excluding IPv4 address from last queried denylist at zone level ")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=zone.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 634 Execution Completed")

        @pytest.mark.run(order=635)
        def test_635_Validate_added_IPv4_address_in_last_queried_denylist_at_zone_level(self):
                print("\n============================================\n")
                print("validating added IPv4 address in last queried deny list at zone level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=zone.com&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(get_ref)
                data = ['"address": "'+config.client_v4+'"','"permission": "DENY"']
                for i in data:
                    if i in get_ref:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 635 Execution Completed")


############################################
## named.conf file validation in member1 ###
############################################
	
        @pytest.mark.run(order=636)
        def test_636_Copy_named_conf_file_from_grid_member_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid member to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 636 Execution Completed")
               
        @pytest.mark.run(order=637)
        def test_637_Validate_last_queried_denylist_shoud_update_with_exclude_IPv4_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last queried denylist should update with exclude IPv4 address in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { !"+config.client_v4+"; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 637 Execution Completed") 


##############
## A record ##
##############
	
        @pytest.mark.run(order=638)
        def test_638_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 18.zone.com A' )
                f= open("7933.txt","w+")
                f.write("18.zone.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 638 Execution Completed")

	
        @pytest.mark.run(order=639)
        def test_639_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=18.zone.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert(response)
                print("Test Case 639 Execution Completed")





######################################################
### Disabling use_scavenging_settings at VIEW level ###
######################################################

      	@pytest.mark.run(order=640)
        def test_640_Disable_scavenging_settings_at_view_level(self):
                print("\n============================================\n")
                print("disabling scavenging settings at view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="view",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"use_scavenging_settings": False}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 20 secs for the member to get started
                print("Test Case 640 Executuion Completed")
	
        @pytest.mark.run(order=641)
        def test_641_validate_disabled_scavenging_settings_at_view_level(self):
                print("\n============================================\n")
                print("validating disabled scavenging settings at view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="view?_return_fields=use_scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = ('"use_scavenging_settings": false')
                if data in response:
                        assert True
                else:
                        assert False
                print("Test Case 641 Execution Completed")

######################################################
### Disabling use_scavenging_settings at ZONE level ##
######################################################

      	@pytest.mark.run(order=642)
        def test_642_Disable_scavenging_settings_at_zone_level(self):
                print("\n============================================\n")
                print("disabling scavenging settings at zone level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="zone_auth?fqdn=zone.com",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"use_scavenging_settings": False}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 20 secs for the member to get started
                print("Test Case 642 Executuion Completed")
	
        @pytest.mark.run(order=643)
        def test_643_validate_disabled_scavenging_settings_at_zone_level(self):
                print("\n============================================\n")
                print("validating disabled scavenging settings at zone level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=zone.com&_return_fields=use_scavenging_settings&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ('"use_scavenging_settings": false')
                if data in response:
                        assert True
                else:
                        assert False
                print("Test Case 643 Execution Completed")


#############################
## Custom NETWORK VIEW ######
#############################

	
        @pytest.mark.run(order=644)
        def test_644_Add_and_validate_custom_network_view(self):
                print("\n============================================\n")
                print("adding and validate custom network view")
                print("\n============================================\n")
                data = {"name": "custom"}
                response = ib_NIOS.wapi_request('POST',object_type="networkview",fields=json.dumps(data), grid_vip=config.grid_vip)
                print(response)
                get_ref=ib_NIOS.wapi_request('GET', object_type="networkview?name=custom")
                print(get_ref)
                data = ['"is_default": false','"name": "custom"']
                for i in data:
                    if i in get_ref:
                        assert True
                    else:
                        assert False
                print(data)
                #######################################
                ##### Chnage DNS VIEW Order ###########
                #######################################
                response =ib_NIOS.wapi_request('GET',object_type="member:dns?host_name="+config.grid_fqdn,grid_vip=config.grid_vip)
                print(response)
                res = json.loads(response)
                ref = json.loads(response)[0]['_ref']
                print(ref)
                data = {"views": ["default.custom","default"]}
                response1 =ib_NIOS.wapi_request('PUT',ref=ref,fields=json.dumps(data))
                print(response1)
                response2 = ib_NIOS.wapi_request('GET',"member:dns?host_name="+config.grid_fqdn,grid_vip=config.grid_vip)
                print(response2)
                ref=json.loads(response2)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                get_ref=ib_NIOS.wapi_request('GET', object_type=ref+"?_return_fields=views")
                print(get_ref)
                output = get_ref.replace(" ",'').replace('\r','').replace('\n','')	
                print(output)
                data = ('"default.custom","default"')
                if data in output:
                    assert True
                else:
                    assert False
                print("Test Case 644 Execution Completed")
	
        @pytest.mark.run(order=645)
        def test_645_Add_and_Validate_Authoritative_zone_in_custom_network_view(self):
                print("\n============================================\n")
                print("Create Authoritative Zone")
                print("\n============================================\n")
                data = {"fqdn": "custom.com","grid_primary": [{"name":config.grid_fqdn,"stealth":False}],"view": "default.custom"}
                response = ib_NIOS.wapi_request('POST', object_type="zone_auth", fields=json.dumps(data))
                print(response)
                get_temp = ib_NIOS.wapi_request('GET', object_type="zone_auth?fqdn=custom.com",grid_vip=config.grid_vip)
                print(get_temp)
                data = ['"fqdn": "custom.com"','"view": "default.custom"']
                for i in data:
                	if i in get_temp:
                    		assert True
                	else:           
                    		assert False
                print(data)
                print("Test Case 645 Execution Completed")




#######################################################
############### SET of ACES at Grid DNS ###############
#######################################################


######################################################
## Enabling monitor for rr/zones at grid:dns level ##
######################################################

      	@pytest.mark.run(order=646)
        def test_646_Enable_Last_queried_TimeStamp_Monitor_for_RR_and_Zones_at_Grid_DNS_Level(self):
                print("\n============================================\n")
                print("Enabling last queried time stamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 646 Executuion Completed")

        @pytest.mark.run(order=647)
        def test_647_Validate_enabled_RR_ZOne_timstamp_monitor_for_RR_and_zone_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("validating enabled timestamp monitor for RR and zone at grid dns level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": true','"enable_zone_last_queried": true'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 647 Execution Completed")


##################################################################################################################
### Test Cases : Adding IPv4 Address to the DENY LIST and Blocking the client from updating the "LAST Queried" ###
##################################################################################################################


        @pytest.mark.run(order=648)
        def test_648_Add_IPV4_Address_to_the_DENY_List_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Adding IPv4 address to the DENY List at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 648 Execution Completed")

        @pytest.mark.run(order=649)
        def test_649_Validate_added_IPV4_Address_in_the_Last_Queried_DENY_List_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Validating added IPv4 address in the Last Queried DENY List at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(get_ref)
                data = ['"address": "'+config.client_v4+'"','"permission": "ALLOW"']
                for i in data:
                    if i in get_ref:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 649 Execution Completed")



############################################
## named.conf file validation in member1  ##
############################################

        @pytest.mark.run(order=650)
        def test_650_Copy_named_conf_file_from_grid_member_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid member to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_member1_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 650 Execution Completed")
                
        @pytest.mark.run(order=651)
        def test_651_Validate_last_queried_denylist_shoud_update_with_include_IPv4_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last queried denylist should be updated with include IPv4 address in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { "+config.client_v4+"; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 651 Execution Completed") 


##############
## A record ##
##############
	
        @pytest.mark.run(order=652)
        def test_652_Add_and_Validate_A_record(self):
                print("\n============================================\n")
                print("adding and validating A record for added zone")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.49","name": "19.custom.com","view": "default.custom"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=19.custom.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "19.custom.com"','"ipv4addr": "10.0.0.49"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("Test Case 652 Executuion Completed")
	
        @pytest.mark.run(order=653)
        def test_653_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 19.custom.com A' )
                f= open("7933.txt","w+")
                f.write("19.custom.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 653 Execution Completed")


        @pytest.mark.run(order=654)
        def test_654_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=19.custom.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 654 Execution Completed")



###################################################################################################################
##### Test Cases : Excluding IPv4 Address from DENY LIST and Allowing the client to update the "LAST Queried" #####
###################################################################################################################

        @pytest.mark.run(order=655)
        def test_655_Exclude_IPv4_Address_from_last_queried_deny_list_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Excluding IPv4 address from last queried denylist at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 655 Execution Completed")

        @pytest.mark.run(order=656)
        def test_656_Validate_excluded_IPv4_address_in_last_queried_denylist_at_grid_dns_level(self):
                print("\n============================================\n")
                print("validating excluded IPv4 address in the last queried deny list at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(get_ref)
                data = ['"address": "'+config.client_v4+'"','"permission": "DENY"']
                for i in data:
                    if i in get_ref:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 656 Execution Completed")


############################################
## named.conf file validation in member1S ##
############################################

        @pytest.mark.run(order=657)
        def test_657_Copy_named_conf_file_from_grid_member_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid member to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_member1_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 657 Execution Completed")
                
        @pytest.mark.run(order=658)
        def test_658_Validate_last_queried_denylist_should_update_with_exclude_IPv4_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last queried denylist should update with exclude IPv4 address in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { !"+config.client_v4+"; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 658 Execution Completed") 


##############
## A record ##
##############

        @pytest.mark.run(order=659)
        def test_659_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 19.custom.com A' )
                f= open("7933.txt","w+")
                f.write("19.custom.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 659 Execution Completed")


        @pytest.mark.run(order=660)
        def test_660_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=19.custom.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                #print(response)
                output=convert(response)
                print("Test Case 660 Execution Completed")




############################################################
## Custom networkview : SET of ACES at Custom DNS view #####
############################################################

######################################################
## Disabling monitor for rr/zones at grid:dns level ###
######################################################

      	@pytest.mark.run(order=661)
        def test_661_Disable_TimeStamp_Monitor_for_RR_and_Zones_at_Grid_DNS_Level(self):
                print("\n============================================\n")
                print("Disabling time stamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": False,"enable_scavenging": False,"enable_zone_last_queried": False,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 661 Executuion Completed")

        @pytest.mark.run(order=662)
        def test_662_Validate_disabled_Last_Queried_timstamp_monitor_for_RR_and_zone_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("validating disabled last queried timestamp monitor for RR and zone at GRID DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": false','"enable_zone_last_queried": false'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 662 Execution Completed")


######################################################
### Enabling use_scavenging_settings at VIEW level ###
######################################################
	
      	@pytest.mark.run(order=663)
        def test_663_Enable_Scavenging_settings_at_custom_dns_view(self):
                print("\n============================================\n")
                print("Enabling Scavenging settings at custom dns view")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="view?name=default.custom&_return_fields=use_scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"use_scavenging_settings": True}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 20 secs for the member to get started
                print("Test Case 663 Executuion Completed")
	
        @pytest.mark.run(order=664)
        def test_664_Validate_enabled_scavenging_settings_at_custom_dns_view(self):
                print("\n============================================\n")
                print("validating enabled scavenging settings at custom dns view")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="view?name=default.custom&_return_fields=use_scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = ('"use_scavenging_settings": true')
                if data in response:
                        assert True
                else:
                        assert False
                print("Test Case 664 Execution Completed")

######################################################
## Enabling monitor for rr/zones at view level ###
######################################################
	
      	@pytest.mark.run(order=665)
        def test_665_Enable_TimeStamp_Monitor_for_RR_and_Zones_at_Custom_DNS_View_Level(self):
                print("\n============================================\n")
                print("Enabling time stamp monitor for RR and zone at custom DNS view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="view?name=default.custom",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 665 Executuion Completed")
	
        @pytest.mark.run(order=666)
        def test_666_Validate_enabled_RR_ZOne_timstamp_monitor_for_RR_and_zone_at_custom_dns_view_level(self):
                print("\n============================================\n")
                print("validating enabled timestamp monitor for RR and zone at custom dns view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="view?name=default.custom&_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": true','"enable_zone_last_queried": true'}
                for i in data:
                	if i in response:
                        	assert True
				print(i)
                	else:
                        	assert False
                print("Test Case 666 Execution Completed")


##################################################################################################################
### Test Cases : Adding IPv6 Address to the DENY LIST and Blocking the client from updating the "LAST Queried" ###
##################################################################################################################


        @pytest.mark.run(order=667)
        def test_667_Add_IPV4_Address_to_the_Last_Queried_DENY_List_at_custom_dns_view_level(self):
                print("\n============================================\n")
                print("Adding IPv4 address to the DENY List at custom dns view level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view?name=default.custom",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v6, "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 667 Execution Completed")

        @pytest.mark.run(order=668)
        def test_668_Validate_added_IPV4_Address_to_the_DENY_List_at_custom_dns_view_level(self):
                print("\n============================================\n")
                print("Validating IPv4 address to the DENY List at custom dns view level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view?name=default.custom&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(get_ref)
                data = ['"address": "'+config.client_v6+'"','"permission": "ALLOW"']
                for i in data:
                    if i in get_ref:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 668 Execution Completed")

##############
## A record ##
##############
	
        @pytest.mark.run(order=669)
        def test_669_Add_and_Validate_A_record(self):
                print("\n============================================\n")
                print("Adding and validating A record for added zone")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.50","name": "20.custom.com","view": "default.custom"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=20.custom.com&_return_fields=ipv4addr,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "20.custom.com"','"ipv4addr": "10.0.0.50"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("Test Case 669 Executuion Completed")

        @pytest.mark.run(order=670)
        def test_670_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' 20.custom.com A' )
                f= open("7933.txt","w+")
                f.write("20.custom.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 670 Execution Completed")


        @pytest.mark.run(order=671)
        def test_671_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=20.custom.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 671 Execution Completed")

############################################
## named.conf file validation in master ###
############################################
	
        @pytest.mark.run(order=672)
        def test_672_Copy_named_conf_file_from_grid_master_to_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 672 Execution Completed")
                
        @pytest.mark.run(order=673)
        def test_673_Validate_last_queried_denylist_shoud_update_with_include_IPv4_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last queried denylist should update with include IPv4 address in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { "+config.client_v6+"; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 673 Execution Completed") 


###################################################################################################################
##### Test Cases : Excluding IPv4 Address from DENY LIST and Allowing the client to update the "LAST Queried" #####
###################################################################################################################
	
        @pytest.mark.run(order=674)
        def test_674_Exclude_IPv4_Address_from_last_queried_deny_list_at_custom_dns_view(self):
                print("\n============================================\n")
                print("Excluding IPv4 address from last queried denylist at custom dns view")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view?name=default.custom",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v6, "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 674 Execution Completed")

        @pytest.mark.run(order=675)
        def test_675_Validate_excluded_IPv4_address_in_last_queried_denylist_at_custom_dns_view(self):
                print("\n============================================\n")
                print("validating excluded IPv4 address in the last queried deny list at custom dns view")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view?name=default.custom&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(get_ref)
                data = ['"address": "'+config.client_v6+'"','"permission": "DENY"']
                for i in data:
                    if i in get_ref:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 675 Execution Completed")


############################################
## named.conf file validation in master ##
############################################
	
        @pytest.mark.run(order=676)
        def test_676_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 676 Execution Completed")
                
        @pytest.mark.run(order=677)
        def test_677_Validate_last_queried_denylist_shoud_update_with_exclude_IPv4_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last queried denylist should update with exclude IPv4 address in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { !"+config.client_v6+"; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 677 Execution Completed") 


##############
## A record ##
##############

        @pytest.mark.run(order=678)
        def test_678_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' 20.custom.com A' )
                f= open("7933.txt","w+")
                f.write("20.custom.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 678 Execution Completed")


        @pytest.mark.run(order=679)
        def test_679_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=20.custom.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 679 Execution Completed")



#########################################################
############### SET of ACES at ZONE level ###############
#########################################################

######################################################
### Disabling use_scavenging_settings at Custom DNS VIEW level ###
######################################################
	
        @pytest.mark.run(order=680)
        def test_680_Disable_scavenging_settings_at_custom_dns_view(self):
                print("\n============================================\n")
                print("Disabling scavenging settings at custom dns view")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="view?name=default.custom",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"use_scavenging_settings": False}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 20 secs for the member to get started
                print("Test Case 680 Executuion Completed")
	
        @pytest.mark.run(order=681)
        def test_681_Validate_disabled_scavenging_setting_at_custom_dns_view(self):
                print("\n============================================\n")
                print("validating disabled scavenging settings at custom dns view")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="view?name=default.custom&_return_fields=use_scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = ('"use_scavenging_settings": false')
                if data in response:
                        assert True
                else:
                        assert False
                print("Test Case 681 Execution Completed")

######################################################
### Enabling use_scavenging_settings at ZONE level ###
######################################################

      	@pytest.mark.run(order=682)
        def test_682_Enable_scavenging_settings_at_Zone_level(self):
                print("\n============================================\n")
                print("Enabling scavenging settings at zone level ")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="zone_auth?fqdn=custom.com",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"use_scavenging_settings": True}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 20 secs for the member to get started
                print("Test Case 682 Executuion Completed")

        @pytest.mark.run(order=683)
        def test_683_Validate_enabled_scavenging_settings_at_zone_level(self):
                print("\n============================================\n")
                print("validating enabled scavenging settings at zone level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=custom.com&_return_fields=use_scavenging_settings&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ('"use_scavenging_settings": true')
                if data in response:
                        assert True
                else:
                        assert False
                print("Test Case 683 Execution Completed")

######################################################
## Enabling monitor for rr/zones at ZONE level ###
######################################################

      	@pytest.mark.run(order=684)
        def test_684_Enable_TimeStamp_Monitor_for_RR_and_Zones_at_Zone_level(self):
                print("\n============================================\n")
                print("Enabling time stamp monitor for RR and zone at Zone level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="zone_auth?fqdn=custom.com",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 684 Executuion Completed")

        @pytest.mark.run(order=685)
        def test_685_Validate_enabled_last_queried_timstamp_monitor_for_RR_and_zone_at_zone_level(self):
                print("\n============================================\n")
                print("validating enabled timestamp monitor for RR and zone at zone level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=custom.com&_return_fields=scavenging_settings&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": true','"enable_zone_last_queried": true'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 685 Execution Completed")


##################################################################################################################
### Test Cases : Adding ANY Address to the DENY LIST and Blocking the client from updating the "LAST Queried" ###
##################################################################################################################


        @pytest.mark.run(order=686)
        def test_686_Add_IPV4_Address_to_the_Last_queried_DENY_List_at_zone_level(self):
                print("\n============================================\n")
                print("Adding IPv4 address to the DENY List at zone level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=custom.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": "Any", "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 686 Execution Completed")

        @pytest.mark.run(order=687)
        def test_687_Validate_added_IPV4_Address_to_the_DENY_List_at_zone_level(self):
                print("\n============================================\n")
                print("Validating IPv4 address to the DENY List at zone level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=custom.com&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(get_ref)
                data = ['"address": "Any"','"permission": "ALLOW"']
                for i in data:
                    if i in get_ref:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 687 Execution Completed")

##############
## A record ##
##############
	
        @pytest.mark.run(order=688)
        def test_688_Add_and_Validate_A_record(self):
                print("\n============================================\n")
                print("Adding and validating A record for added zone")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.52","name": "22.custom.com","view": "default.custom"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=22.custom.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "22.custom.com"','"ipv4addr": "10.0.0.52"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("Test Case 688 Executuion Completed")

        @pytest.mark.run(order=689)
        def test_689_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 22.custom.com A' )
                f= open("7933.txt","w+")
                f.write("22.custom.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 689 Execution Completed")


        @pytest.mark.run(order=690)
        def test_690_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=52.custom.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 690 Execution Completed")

############################################
## named.conf file validation in master ###
############################################
	
        @pytest.mark.run(order=691)
        def test_691_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 691 Execution Completed")
                
        @pytest.mark.run(order=692)
        def test_692_Validate_last_queried_denylist_shoud_update_with_include_IPv4_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last queried denylist should update with include IPv4 address in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                data = ("infoblox-last-queried-denylist { any; }")
                if data in log_validation:
                    assert True
                else:
                    assert False
                print(data)
                print("Test Case 692 Execution Completed") 


###################################################################################################################
##### Test Cases : Excluding IPv4 Address from DENY LIST and Allowing the client to update the "LAST Queried" #####
###################################################################################################################

        @pytest.mark.run(order=693)
        def test_693_Exclude_IPv4_Address_from_last_queried_deny_list_at_zone_level(self):
                print("\n============================================\n")
                print("Excluding IPv4 address from last queried denylist at zone level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=custom.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": "Any", "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 693 Execution Completed")

        @pytest.mark.run(order=694)
        def test_694_Validate_added_IPv4_address_in_last_queried_denylist(self):
                print("\n============================================\n")
                print("validating added IPv4 address in last queried deny list ")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=custom.com&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(get_ref)
                data = ['"address": "Any"','"permission": "DENY"']
                for i in data:
                    if i in get_ref:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 694 Execution Completed")


############################################
## named.conf file validation in master ###
############################################
	
        @pytest.mark.run(order=695)
        def test_695_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 695 Execution Completed")
                
        @pytest.mark.run(order=696)
        def test_696_Validate_last_queried_denylist_shoud_update_with_exclude_IPv4_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last queried denylist should update with exclude IPv4 address in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { !any; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 696 Execution Completed") 


##############
## A record ##
##############

        @pytest.mark.run(order=697)
        def test_697_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 22.custom.com A' )
                f= open("7933.txt","w+")
                f.write("22.custom.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 697 Execution Completed")


        @pytest.mark.run(order=698)
        def test_698_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=22.custom.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 698 Execution Completed")
              


######################################################
### Disabling use_scavenging_settings at ZONE level ##
######################################################

      	@pytest.mark.run(order=699)
        def test_699_Disable_scavenging_settings_at_zones(self):
                print("\n============================================\n")
                print("Disabling scavenging settings at zones")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="zone_auth?fqdn=zone.com",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"use_scavenging_settings": False}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                response = ib_NIOS.wapi_request('GET', object_type="zone_auth?fqdn=custom.com",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"use_scavenging_settings": False}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                #######################################
                ##### Change DNS VIEW Order ###########
                #######################################
                response =ib_NIOS.wapi_request('GET',object_type="member:dns?host_name="+config.grid_fqdn,grid_vip=config.grid_vip)
                print(response)
                res = json.loads(response)
                ref = json.loads(response)[0]['_ref']
                print(ref)
                data = {"views": ["default","default.custom"]}
                response =ib_NIOS.wapi_request('PUT',ref=ref,fields=json.dumps(data))
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(50) #wait for 50 secs for the member to get started
                print("Test Case 699 Executuion Completed")
	
        @pytest.mark.run(order=700)
        def test_700_Validate_disabled_scavenging_settings_at_zones(self):
                print("\n============================================\n")
                print("Validating disabled scavenging settingsa at zones")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=zone.com&_return_fields=use_scavenging_settings&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ('"use_scavenging_settings": false')
                if data in response:
                        assert True
                else:
                        assert False
                response1 = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=custom.com&_return_fields=use_scavenging_settings&_return_as_object=1",grid_vip=config.grid_vip)
                print(response1)
                data1 = ('"use_scavenging_settings": false')
                if data1 in response1:
                        assert True
                else:
                        assert False
                print("Test Case 700 Execution Completed")


######################################################
### Disabling use_scavenging_settings at VIEW level ###
######################################################

      	@pytest.mark.run(order=701)
        def test_701_Disable_scavenging_settings_at_custom_dns_view(self):
                print("\n============================================\n")
                print("disabling scavenging settings at custom dns view")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="view?name=default.custom",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"use_scavenging_settings": False}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 20 secs for the member to get started
                print("Test Case 701 Executuion Completed")
	
        @pytest.mark.run(order=702)
        def test_702_Validate_disabled_scavenging_settings_at_custom_dns_view(self):
                print("\n============================================\n")
                print("Validating disabled scavenging settings at custom dns view")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="view?name=default.custom&_return_fields=use_scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = ('"use_scavenging_settings": false')
                if data in response:
                        assert True
                else:
                        assert False
                print("Test Case 702 Execution Completed")



        @pytest.mark.run(order=703)
        def test_703_Add_Authoritative_sub_zone_with_grid_primary(self):
                print("\n============================================\n")
                print("Adding authoritative sub zone with grid primary")
                print("\n============================================\n")
                grid_member=config.grid_fqdn
                data = {"fqdn": "sub.test.com","grid_primary": [{"name":config.grid_fqdn,"stealth":False}]}
                response = ib_NIOS.wapi_request('POST', object_type="zone_auth", fields=json.dumps(data))
                print(response)
                sleep(60)
                print("Test Case 703 Execution Completed")
	
        @pytest.mark.run(order=704)
        def test_704_Validate_added_sub_zone(self):
                print("\n============================================\n")
                print("Validating added sub zone")
                print("\n============================================\n")
                get_ref =ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=sub.test.com",grid_vip=config.grid_vip)
                ref = json.loads(get_ref)[0]['_ref']
                ref = eval(json.dumps(ref))
                response = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=grid_primary,fqdn",grid_vip=config.grid_vip)
                print(response)
                data = ['"name": "'+config.grid_fqdn+'"','"fqdn": "sub.test.com"']
                for i in data:
                    if i in response:
                        assert True
                        print(i)
                    else:
                        assert False
                print("Test Case 704 Execution Completed")


#######################################################
############### SET of ACES at Grid DNS ###############
#######################################################

######################################################
## Enabling monitor for rr/zones at grid:dns level ###
######################################################

      	@pytest.mark.run(order=705)
        def test_705_Enable_Last_Queried_TimeStamp_Monitor_for_RR_and_Zones_at_Grid_DNS_Level(self):
                print("\n============================================\n")
                print("Enabling last queried time stamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 705 Executuion Completed")

        @pytest.mark.run(order=706)
        def test_706_Validate_enabled_last_queried_timstamp_monitor_for_RR_and_zone_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("validating enabled last queried timestamp monitor for RR and zone at grid dns level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": true','"enable_zone_last_queried": true'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 706 Execution Completed")


##################################################################################################################
### Test Cases : Adding IPv4 Address to the DENY LIST and Blocking the client from updating the "LAST Queried" ###
##################################################################################################################

        @pytest.mark.run(order=707)
        def test_707_Add_IPV4_Address_to_the_LAst_Queried_DENY_List_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Adding IPv4 address to the Last Queried DENY List at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 707 Execution Completed")


        @pytest.mark.run(order=708)
        def test_708_Validate_added_IPV4_Address_to_the_Last_Queried_DENY_List_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Validating added IPv4 address to the last queried deny list at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(get_ref)
                data = ['"address": "'+config.client_v4+'"','"permission": "ALLOW"']
                for i in data:
                    if i in get_ref:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 708 Execution Completed")


################################
## named.conf file validation ##
################################

        @pytest.mark.run(order=709)
        def test_709_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 709 Execution Completed")
                
        @pytest.mark.run(order=710)
        def test_710_Validate_last_queried_denylist_shoud_update_with_include_IPv4_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last queried denylist should update with include IPv4 address in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { "+config.client_v4+"; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 710 Execution Completed") 

##############
## A record ##
##############
	
        @pytest.mark.run(order=711)
        def test_711_Add_and_Validate_A_record(self):
                print("\n============================================\n")
                print("adding and validating A record for added zone")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.53","name": "23.sub.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=23.sub.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "23.sub.test.com"','"ipv4addr": "10.0.0.53"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("Test Case 711 Executuion Completed")

        @pytest.mark.run(order=712)
        def test_712_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 23.sub.test.com A' )
                f= open("7933.txt","w+")
                f.write("23.sub.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 712 Execution Completed")

        @pytest.mark.run(order=713)
        def test_713_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=23.sub.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 713 Execution Completed")


##############################################################################################################################
### Test Cases : Excluding the IPv4 Address from the DENY LIST and allowing client to update the "LAST Queried" time stamp ###
##############################################################################################################################

        @pytest.mark.run(order=714)
        def test_714_Exclude_IPv4_Address_from_last_queried_deny_list_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Excluding IPv4 address from last queried denylist at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v4, "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 714 Execution Completed")

        @pytest.mark.run(order=715)
        def test_715_Validate_added_IPv4_address_in_last_queried_denylist_at_grid_dns_level(self):
                print("\n============================================\n")
                print("validating added IPv4 address in last queried deny list at grid dns level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(response)
                data = ('"address": "'+config.client_v4+'"','"permission": "DENY"')
                for i in data:
                    if i in response:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 715 Execution Completed")


################################
## named.conf file validation ##
################################

        @pytest.mark.run(order=716)
        def test_716_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 716 Execution Completed")
                
        @pytest.mark.run(order=717)
        def test_717_Validate_last_queried_denylist_shoud_update_with_exclude_IPv4_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last queried denylist should update with exclude IPv4 address in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { !"+config.client_v4+"; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 717 Execution Completed") 


##############
## A record ##
##############

        @pytest.mark.run(order=718)
        def test_718_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 23.sub.test.com A' )
                f= open("7933.txt","w+")
                f.write("23.sub.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 718 Execution Completed")


        @pytest.mark.run(order=719)
        def test_719_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=23.sub.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 719 Execution Completed")


######################################################
## Disabling monitor for rr/zones at grid:dns level ###
######################################################

       	@pytest.mark.run(order=720)
        def test_720_Disable_Last_Queried_TimeStamp_Monitor_for_RR_and_Zones_at_Grid_DNS_Level(self):
                print("\n============================================\n")
                print("Disabling time stamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": False,"enable_scavenging": False,"enable_zone_last_queried": False,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 720 Executuion Completed")
	
        @pytest.mark.run(order=721)
        def test_721_Validate_disabled_Last_queried_timstamp_monitor_for_RR_and_zone_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("validating disabled last queried timestamp monitor for RR and zone at GRID DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": false','"enable_zone_last_queried": false'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 721 Execution Completed")


######################################################
### Enabling use_scavenging_settings at VIEW level ###
######################################################

      	@pytest.mark.run(order=722)
        def test_722_Enable_scavenging_settings_at_view_level(self):
                print("\n============================================\n")
                print("enabling scavenging settings at view ")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="view?name=default",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"use_scavenging_settings": True}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 20 secs for the member to get started
                print("Test Case 722 Executuion Completed")
	
        @pytest.mark.run(order=723)
        def test_723_Validate_enabled_scavenging_settings_at_view(self):
                print("\n============================================\n")
                print("validating enabled scavenging settings at default dns view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="view?name=default&_return_fields=use_scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = ('"use_scavenging_settings": true')
                if data in response:
                        assert True
                else:
                        assert False
                print("Test Case 723 Execution Completed")

######################################################
## Enabling monitor for rr/zones at view level ###
######################################################

      	@pytest.mark.run(order=724)
        def test_724_Enable_Last_queried_TimeStamp_Monitor_for_RR_and_Zones_at_view_Level(self):
                print("\n============================================\n")
                print("Enabling last queried timestamp monitor for rr and zones at view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="view?name=default",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 724 Executuion Completed")
	
        @pytest.mark.run(order=725)
        def test_725_Validate_enabled_last_queried_timstamp_monitor_for_RR_and_zone_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("alidating enabled last queried timestamp monitor for RR and zone at grid dns level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="view?name=default&_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": true','"enable_zone_last_queried": true'}
                for i in data:
                	if i in response:
                        	assert True
				print(i)
                	else:
                        	assert False
                print("Test Case 725 Execution Completed")


##################################################################################################################
### Test Cases : Adding IPv6 Address to the DENY LIST and Blocking the client from updating the "LAST Queried" ###
##################################################################################################################


        @pytest.mark.run(order=726)
        def test_726_Adding_IPv6_Address_to_the_LAST_Queried_DENY_LIST_at_view_level(self):
                print("\n============================================\n")
                print("Adding IPv6 address to the last queried DENY LIST at DNS view level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view?name=default",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v6, "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 726 Execution Completed")

        @pytest.mark.run(order=727)
        def test_727_Validate_Added_IPv6_Address_in_the_Last_Queried_DENY_List(self):
                print("\n============================================\n")
                print("validating added IPv6 address in the last queried denylists")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view?name=default&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(get_ref)
                data = ['"address": "'+config.client_v6+'"','"permission": "ALLOW"']
                for i in data:
                    if i in get_ref:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 727 Execution Completed")

############################################
## named.conf file validation in member1 ###
############################################
	
        @pytest.mark.run(order=728)
        def test_728_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 728 Execution Completed")
                
        @pytest.mark.run(order=729)
        def test_729_Validate_last_queried_denylist_shoud_update_with_include_IPv6_address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last queried denylist should update with include IPv6 address in named.conf file ")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { "+config.client_v6+"; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 729 Execution Completed") 


##############
## A record ##
##############

        @pytest.mark.run(order=730)
        def test_730_Add_and_Validate_A_record(self):
                print("\n============================================\n")
                print("adding and validating A record")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.54","name": "24.sub.zone.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=24.sub.zone.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "24.sub.zone.com"','"ipv4addr": "10.0.0.54"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("Test Case 730 Executuion Completed")

        @pytest.mark.run(order=731)
        def test_731_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' 24.sub.zone.com A' )
                f= open("7933.txt","w+")
                f.write("24.sub.zone.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 731 Execution Completed")


        @pytest.mark.run(order=732)
        def test_732_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=24.sub.zone.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 732 Execution Completed")



###################################################################################################################
##### Test Cases : Excluding IPv6 Address from DENY LIST and Allowing the client to update the "LAST Queried" #####
###################################################################################################################

        @pytest.mark.run(order=733)
        def test_733_Exclude_IPv6_Address_from_last_queried_deny_list_at_view_level(self):
                print("\n============================================\n")
                print("Excluding IPv4 address from last queried denylist at dns view level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view?name=default",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": config.client_v6, "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 733 Execution Completed")

        @pytest.mark.run(order=734)
        def test_734_Validate_added_IPv4_address_in_last_queried_denylist_view_level(self):
                print("\n============================================\n")
                print("validating added IPv4 address in last queried deny list")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="view?name=default&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(get_ref)
                data = ['"address": "'+config.client_v6+'"','"permission": "DENY"']
                for i in data:
                    if i in get_ref:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 734 Execution Completed")


############################################
## named.conf file validation in master ####
############################################

        @pytest.mark.run(order=735)
        def test_735_Copy_named_conf_file_from_grid_member_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid member to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_member1_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')	
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 735 Execution Completed")
                
        @pytest.mark.run(order=736)
        def test_736_Validate_last_queried_denylist_shoud_update_with_exclude_IPv6_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last queried denylist should update with exclude IPv4 address in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { !"+config.client_v6+"; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 736 Execution Completed") 


##############
## A record ##
##############

        @pytest.mark.run(order=737)
        def test_737_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_ipv6_vip)+' 24.sub.zone.com A' )
                f= open("7933.txt","w+")
                f.write("24.sub.zone.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_ipv6_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 737 Execution Completed")


        @pytest.mark.run(order=738)
        def test_738_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=24.sub.zone.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 738 Execution Completed")


#########################################################
############### SET of ACES at ZONE level ###############
#########################################################

#######################################################
### Disabling use_scavenging_settings at VIEW level ###
#######################################################

      	@pytest.mark.run(order=739)
        def test_739_Disable_Scavenging_settings_at_VIEW_Level(self):
                print("\n============================================\n")
                print("Disabling scavenging settings at view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="view?name=default",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"use_scavenging_settings": False}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 20 secs for the member to get started
                print("Test Case 739 Executuion Completed")
	
        @pytest.mark.run(order=740)
        def test_740_Validate_disabled_scavenging_settings_at_view_level(self):
                print("\n============================================\n")
                print("validating disabled scavenging settings at view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="view?name=default&_return_fields=use_scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = ('"use_scavenging_settings": false')
                if data in response:
                        assert True
                else:
                        assert False
                print("Test Case 740 Execution Completed")

######################################################
### Enabling use_scavenging_settings at ZONE level ###
######################################################

      	@pytest.mark.run(order=741)
        def test_741_Enable_scavenging_settings_at_zone_Level(self):
                print("\n============================================\n")
                print("Enabling scavenging settings at zone level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="zone_auth?fqdn=sub.test.com",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"use_scavenging_settings": True}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 20 secs for the member to get started
                print("Test Case 741 Executuion Completed")
	
        @pytest.mark.run(order=742)
        def test_742_Validate_enabled_scavenging_settings_at_zone_level(self):
                print("\n============================================\n")
                print("validating enabled scavenging settings at zone level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=sub.test.com&_return_fields=use_scavenging_settings&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = '"use_scavenging_settings": true'
                if data in response:
                        assert True
                else:
                        assert False
                print("Test Case 742 Execution Completed")

######################################################
## Enabling monitor for rr/zones at ZONE level #######
######################################################

      	@pytest.mark.run(order=743)
        def test_743_Enable_Last_queried_TimeStamp_Monitor_for_RR_and_Zones_at_zone_Level(self):
                print("\n============================================\n")
                print("Enabling last queried time stamp monitor for RR and zone at zone level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="zone_auth?fqdn=sub.test.com",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 743 Executuion Completed")

        @pytest.mark.run(order=744)
        def test_744_Validate_enabled_last_queried_timstamp_monitor_for_RR_and_zone_at_zone_level(self):
                print("\n============================================\n")
                print("validating enabled last queried timestamp monitor for RR and zone at zone level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=custom.com&_return_fields=scavenging_settings&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": true','"enable_zone_last_queried": true'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 744 Execution Completed")


##################################################################################################################
### Test Cases : Adding ANY Address to the DENY LIST and Blocking the client from updating the "LAST Queried" ###
##################################################################################################################


        @pytest.mark.run(order=745)
        def test_745_Add_ANY_Address_to_the_Last_queried_DENY_List_at_zone_level(self):
                print("\n============================================\n")
                print("Adding ANY address to the DENY List at zone level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=sub.test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": "Any", "permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 745 Execution Completed")

        @pytest.mark.run(order=746)
        def test_746_Validate_added_ANY_Address_to_the_Last_Queried_DENY_List_at_zone_level(self):
                print("\n============================================\n")
                print("Validating ANY address to the last queried DENY List at zone level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=sub.test.com&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(get_ref)
                data = ['"address": "Any"','"permission": "ALLOW"']
                for i in data:
                    if i in get_ref:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 746 Execution Completed")

########################################
## named.conf file validation in Grid ##
########################################

        @pytest.mark.run(order=747)
        def test_747_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 747 Execution Completed")
                
        @pytest.mark.run(order=748)
        def test_748_Validate_last_queried_denylist_shoud_update_with_include_ANY_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last queried denylist should update with include ANY address in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { any; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 748 Execution Completed") 


##############
## A record ##
##############

        @pytest.mark.run(order=749)
        def test_749_Add_and_Validate_A_record(self):
                print("\n============================================\n")
                print("adding and validating A record")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.55","name": "25.sub.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=25.sub.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "25.sub.test.com"','"ipv4addr": "10.0.0.55"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("Test Case 749 Executuion Completed")
	
        @pytest.mark.run(order=750)
        def test_750_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 25.sub.test.com A' )
                f= open("7933.txt","w+")
                f.write("25.sub.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 750 Execution Completed")


        @pytest.mark.run(order=751)
        def test_751_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=25.sub.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 751 Execution Completed")



###################################################################################################################
##### Test Cases : Excluding ANY Address from DENY LIST and Allowing the client to update the "LAST Queried" #####
###################################################################################################################

        @pytest.mark.run(order=752)
        def test_752_Exclude_ANY_Address_from_last_queried_deny_list_at_zone_level(self):
                print("\n============================================\n")
                print("Excluding ANY address from last queried denylist at zone level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=sub.test.com",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl":[{"_struct": "addressac", "address": "Any", "permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 752 Execution Completed")

        @pytest.mark.run(order=753)
        def test_753_Validate_excluded_ANY_address_in_last_queried_denylist(self):
                print("\n============================================\n")
                print("validating excluded ANY address in last queried deny list")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=sub.test.com&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(get_ref)
                data = ['"address": "Any"','"permission": "DENY"']
                for i in data:
                    if i in get_ref:
                        assert True
                    else:
                        assert False
                print(data)
                print("\nTest Case 753 Execution Completed")


########################################
## named.conf file validation in Grid ##
########################################

        @pytest.mark.run(order=754)
        def test_754_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 754 Execution Completed")
                
        @pytest.mark.run(order=755)
        def test_755_Validate_last_queried_denylist_shoud_update_with_exclude_IPv4_Address_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last queried denylist should update with exclude IPv4 address in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { !any; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 755 Execution Completed") 


##############
## A record ##
##############
	
        @pytest.mark.run(order=756)
        def test_756_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 25.sub.test.com A' )
                f= open("7933.txt","w+")
                f.write("25.sub.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 756 Execution Completed")


        @pytest.mark.run(order=757)
        def test_757_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=25.sub.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 757 Execution Completed")



#######################################################################
## Scenario : Block the network and allow the IP from that network ####
#######################################################################





######################################################
### Disabling use_scavenging_settings at VIEW level ###
######################################################

      	@pytest.mark.run(order=758)
        def test_758_Disable_scavenging_settings_at_default_dns_view(self):
                print("\n============================================\n")
                print("Disabling scavenging settings at default dns view")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="view?name=default",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"use_scavenging_settings": False}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 20 secs for the member to get started
                print("Test Case 758 Executuion Completed")
	
        @pytest.mark.run(order=759)
        def test_759_Validate_disabled_scavenging_settings_at_view_level(self):
                print("\n============================================\n")
                print("validating disabled scavenging settings at view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="view?name=default&_return_fields=use_scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = ('"use_scavenging_settings": false')
                if data in response:
                        assert True
                else:
                        assert False
                print("Test Case 759 Execution Completed")

######################################################
### Disabling use_scavenging_settings at ZONE level ##
######################################################

      	@pytest.mark.run(order=760)
        def test_760_Disable_scavenging_settings_at_zone(self):
                print("\n============================================\n")
                print("Disabling scavenging settings at zone")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="zone_auth?fqdn=zone.com",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"use_scavenging_settings": False}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 20 secs for the member to get started
                print("Test Case 760 Executuion Completed")
	
        @pytest.mark.run(order=761)
        def test_761_Validate_disabled_scavenging_settings_at_zone_level(self):
                print("\n============================================\n")
                print("validating disabled scavenging settings at zone level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=zone.com&_return_fields=use_scavenging_settings&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ('"use_scavenging_settings": false')
                if data in response:
                        assert True
                else:
                        assert False
                print("Test Case 761 Execution Completed")



      	@pytest.mark.run(order=762)
        def test_762_Disable_scavenging_settings_at_custom_zone(self):
                print("\n============================================\n")
                print("Disabling scavenging settings at custom zone")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="zone_auth?fqdn=custom.com",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"use_scavenging_settings": False}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 20 secs for the member to get started
                print("Test Case 762 Executuion Completed")

        @pytest.mark.run(order=763)
        def test_763_Validate_disabled_scavenging_settings_at_custom_zone(self):
                print("\n============================================\n")
                print("Validating disabled scavenging settings at custom zone")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=custom.com&_return_fields=use_scavenging_settings&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ('"use_scavenging_settings": false')
                if data in response:
                        assert True
                else:
                        assert False
                print("Test Case 763 Execution Completed")

      	@pytest.mark.run(order=764)
        def test_764_Disable_scavenging_settings_at_sub_zone(self):
                print("\n============================================\n")
                print("Disabling scavenging settings at sub zone")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="zone_auth?fqdn=sub.test.com",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"use_scavenging_settings": False}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 20 secs for the member to get started
                print("Test Case 764 Executuion Completed")

        @pytest.mark.run(order=765)
        def test_765_Validate_disabled_scavenging_settings_at_sub_zone(self):
                print("\n============================================\n")
                print("Validating disabled scavenging settings at sub zone")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=sub.test.com&_return_fields=use_scavenging_settings&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ('"use_scavenging_settings": false')
                if data in response:
                        assert True
                else:
                        assert False
                print("Test Case 765 Execution Completed")

      	@pytest.mark.run(order=766)
        def test_766_Disable_scavenging_settings_at_test_zone(self):
                print("\n============================================\n")
                print("Disabling scavenging settings at test zone")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"use_scavenging_settings": False}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 20 secs for the member to get started
                print("Test Case 766 Executuion Completed")

        @pytest.mark.run(order=767)
        def test_767_Validating_disabled_scavenging_settings_at_test_zone(self):
                print("\n============================================\n")
                print("Validating disabled scavenging settings at test zone")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="zone_auth?fqdn=test.com&_return_fields=use_scavenging_settings&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ('"use_scavenging_settings": false')
                if data in response:
                        assert True
                else:
                        assert False
                print("Test Case 767 Execution Completed")





#######################################################
############### SET of ACES at Grid DNS ###############
#######################################################

######################################################
## Enabling monitor for rr/zones at grid:dns level ###
######################################################

      	@pytest.mark.run(order=768)
        def test_768_Enable_Last_queried_TimeStamp_Monitor_for_RR_and_Zones_at_Grid_DNS_Level(self):
                print("\n============================================\n")
                print("Enabling time stamp monitor for RR and zone at Grid DNS level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 768 Executuion Completed")

        @pytest.mark.run(order=769)
        def test_769_Validate_enabled_RR_ZOne_timstamp_monitor_for_RR_and_zone_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("validating enabled timestamp monitor for RR and zone at grid dns level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="grid:dns?_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": true','"enable_zone_last_queried": true'}
                for i in data:
                	if i in response:
                        	assert True
                	else:
                        	assert False
                print("Test Case 769 Execution Completed")


##################################################################################################################
### Test Cases : Adding IPv4 Address to the DENY LIST and Blocking the client from updating the "LAST Queried" ###
##################################################################################################################
	
        @pytest.mark.run(order=770)
        def test_770_Add_IPV4_Address_and_Exclude_IPv4_Network_from_the_Last_Queried_DENY_List_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Adding IPv4 address and excluding IPv4 Network from the Last Queried DENY List at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl": [{"address": config.client_v4,"permission": "ALLOW"},{"address": "10.0.0.0/8","permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 770 Execution Completed")


        @pytest.mark.run(order=771)
        def test_771_Validate_added_IPV4_Address_and_excluded_IPv4_Network_from_the_Last_Queried_DENY_List_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Validating IPv4 address and Excluding IPv4 Network frm the last queried DENY List at grid dns level")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(response)
                ref = json.loads(response)[0]['_ref']
                response1=ib_NIOS.wapi_request('GET',object_type=ref+"?_return_fields=last_queried_acl")
                print(response1)
                output =response1.replace('\n','').replace('\r','').replace('\t','').replace(' ','').replace('[','').replace(']','')
                print(output)
                data = ['{"address":"'+config.client_v4+'","permission":"ALLOW"}','{"address":"10.0.0.0/8","permission":"DENY"}']
                for i in data:
                        if i in output:
                                assert True
                                print(i)
                        else:
                                assert False
                print("\nTest Case 771 Execution Completed")


################################
## named.conf file validation ##
################################

        @pytest.mark.run(order=772)
        def test_772_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 772 Execution Completed")
               
        @pytest.mark.run(order=773)
        def test_773_Validate_last_queried_denylist_shoud_update_with_include_IPv4_Addressand_exclude_IPv4_network_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last queried denylist should update with include IPv4 address and exclude IPv4 network in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { "+config.client_v4+"; !10.0.0.0/8; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 773 Execution Completed") 

##############
## A record ##
##############

        @pytest.mark.run(order=774)
        def test_774_Add_and_Validate_A_record(self):
                print("\n============================================\n")
                print("adding and validating A record")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.56","name": "26.test.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=26.test.com&_return_fields=ipv4addr,name,view&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "26.test.com"','"ipv4addr": "10.0.0.56"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("Test Case 774 Executuion Completed")

        @pytest.mark.run(order=775)
        def test_775_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 26.test.com A' )
                f= open("7933.txt","w+")
                f.write("26.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 775 Execution Completed")

        @pytest.mark.run(order=776)
        def test_776_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=26.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 776 Execution Completed")


#########################################################################################################################################################
### Test Cases : Excluding the IPv4 Address and Including IPv4 Network from the DENY LIST and allowing client to update the "LAST Queried" time stamp ###
#########################################################################################################################################################
	
        @pytest.mark.run(order=777)
        def test_777_Exclude_IPv4_Address_and_Include_IPv4_Network_from_last_queried_deny_list_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Excluding IPv4 address and Including IPv4 Network from last queried denylist at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl": [{"address": config.client_v4,"permission": "DENY"},{"address": "10.0.0.0/8","permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("\nTest Case 777 Execution Completed")

        @pytest.mark.run(order=778)
        def test_778_Validate_last_queried_deny_list_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Validating last queried denylist at grid dns level")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(response)
                ref = json.loads(response)[0]['_ref']
                response1=ib_NIOS.wapi_request('GET',object_type=ref+"?_return_fields=last_queried_acl")
                print(response1)
                output =response1.replace('\n','').replace('\r','').replace('\t','').replace(' ','').replace('[','').replace(']','')
                print(output)
                data = ['{"address":"10.0.0.0/8","permission":"ALLOW"}','{"address":"'+config.client_v4+'","permission":"DENY"}']
                for i in data:
                        if i in output:
                                assert True
                                print(i)
                        else:
                                assert False
                print("\nTest Case 778 Execution Completed")

################################
## named.conf file validation ##
################################

        @pytest.mark.run(order=779)
        def test_779_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 779 Execution Completed")
                
        @pytest.mark.run(order=780)
        def test_780_Validate_last_queried_denylist_shoud_update_with_exclude_IPv4_Address_and_include_IPv4_Network_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last queried denylist should update with exclude IPv4 address and include IPv4 Network in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = ("infoblox-last-queried-denylist { !"+config.client_v4+"; 10.0.0.0/8; }")
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 780 Execution Completed") 


##############
## A record ##
##############
	
        @pytest.mark.run(order=781)
        def test_781_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 26.test.com A' )
                f= open("7933.txt","w+")
                f.write("26.test.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 781 Execution Completed")


        @pytest.mark.run(order=782)
        def test_782_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=26.test.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 782 Execution Completed")



######################################################################################
## Add all supported ACEs to Last Queried DENY LIST and validate in named.conf file ##
######################################################################################

	
        @pytest.mark.run(order=783)
        def test_783_Add_ALL_Supported_ACEs_to_the_Last_queried_deny_list_at_gird_dns_level(self):
                print("\n============================================\n")
                print("Adding all supported ACEs to the last queried deny list at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                data = {"last_queried_acl": [{"address": config.client_v4,"permission": "ALLOW"},{"address": "10.0.0.0/8","permission": "ALLOW"},{"address": config.client_v6,"permission": "ALLOW"},{"address": config.client_v6_network+'::/64',"permission": "ALLOW"},{"address": "Any","permission": "ALLOW"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 783 Execution Completed")


        @pytest.mark.run(order=784)
        def test_784_Validate_added_all_supported_aces_in_the_last_queried_deny_list_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Validating all supported aces in the last queried denylist at grid dns level ")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                #print(response)
                res = json.loads(response)
                ref = json.loads(response)[0]['_ref']
                #print(ref)
                response1=ib_NIOS.wapi_request('GET',object_type=ref+"?_return_fields=last_queried_acl")
                print(response1)
                output =response1.replace('\n','').replace('\r','').replace('\t','').replace(' ','').replace('[','').replace(']','')
                print(output)
                data = ['{"address":"'+config.client_v4+'","permission":"ALLOW"}','{"address":"10.0.0.0/8","permission":"ALLOW"}','{"address":"'+config.client_v6+'","permission":"ALLOW"}','{"address":"'+config.client_v6_network+'::/64","permission":"ALLOW"}','{"address":"Any","permission":"ALLOW"}']
                for i in data:
                        if i in output:
                                assert True
                                print(i)
                        else:
                                assert False
                print(data)
                print("\nTest Case 784 Execution Completed")

################################
## named.conf file validation ##
################################

        @pytest.mark.run(order=785)
        def test_785_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 785 Execution Completed")
                
        @pytest.mark.run(order=786)
        def test_786_Validate_last_queried_denylist_shoud_update_with_all_ACEs_with_include_permission_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last queried denylist should update with all supported aces with include permission in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = 'infoblox-last-queried-denylist { '+config.client_v4+'; 10.0.0.0/8; '+config.client_v6+'; '+config.client_v6_network+'::/64; any; }'
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 786 Execution Completed") 

##################################################################################################################
### Test Cases : Excluding IPv4 Address to the DENY LIST and Blocking the client from updating the "LAST Queried" ###
##################################################################################################################
	
        @pytest.mark.run(order=787)
        def test_787_Exclude_ALL_Supported_ACEs_to_the_Last_queried_deny_list_at_gird_dns_level(self):
                print("\n============================================\n")
                print("Excluding all supported ACEs to the last queried deny list at grid dns level")
                print("\n============================================\n")
                get_ref = ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                res = json.loads(get_ref)
                ref1 = json.loads(get_ref)[0]['_ref']
                print(ref1)
                #data = {"last_queried_acl": [{"address": '"'+config.client_v4+'"',"permission": "DENY"},{"address": "10.0.0.0/8","permission": "DENY"},{"address": '"'+config.client_v6+'"',"permission": "DENY"},{"address": '"'+config.client_v6_network+'::/64',"permission": "DENY"},{"address": "Any","permission": "DENY"}]}
                data = {"last_queried_acl": [{"address": config.client_v4,"permission": "DENY"},{"address": "10.0.0.0/8","permission": "DENY"},{"address": config.client_v6,"permission": "DENY"},{"address": config.client_v6_network+'::/64',"permission": "DENY"},{"address": "Any","permission": "DENY"}]}
                output = ib_NIOS.wapi_request('PUT',ref=ref1,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 40 secs for the member to get started
                print("\nTest Case 787 Execution Completed")


        @pytest.mark.run(order=788)
        def test_788_Validate_Excluded_all_supported_aces_in_the_last_queried_deny_list_at_grid_dns_level(self):
                print("\n============================================\n")
                print("Validating excluded all supported aces in the last queried denylist at grid dns level")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="grid:dns",grid_vip=config.grid_vip)
                #print(response)
                res = json.loads(response)
                ref = json.loads(response)[0]['_ref']
                #print(ref)
                response1=ib_NIOS.wapi_request('GET',object_type=ref+"?_return_fields=last_queried_acl")
                #print(response1)
                output =response1.replace('\n','').replace('\r','').replace('\t','').replace(' ','').replace('[','').replace(']','')
                print(output)
                data = ['{"address":"'+config.client_v4+'","permission":"DENY"}','{"address":"10.0.0.0/8","permission":"DENY"}','{"address":"'+config.client_v6+'","permission":"DENY"}','{"address":"'+config.client_v6_network+'::/64","permission":"DENY"}','{"address":"Any","permission":"DENY"}']
                for i in data:
                        if i in output:
                                assert True
                                print(i)
                        else:
                                assert False
                print("\nTest Case 788 Execution Completed")

################################
## named.conf file validation ##
################################

        @pytest.mark.run(order=789)
        def test_789_Copy_named_conf_file_from_grid_master_client_tmp_directory(self):
                print("\n============================================\n")
                print("copying named.conf file from grid master to client tmp directory")
                print("\n============================================\n")
                try:
                        child = pexpect.spawn('ssh -o StrictHostKeyChecking=no root@'+config.grid_vip)
                        child.logfile=sys.stdout
                        child.expect('#')
                        child.sendline('scp -pr /infoblox/var/named_conf/named.conf root@'+config.client_v4+':/tmp')
                        child.expect('(yes/no)?')
                        child.sendline('yes')
                        child.expect('password: ')
                        child.sendline('infoblox')
                        child.expect('#')
                except:
                        print("Failed to store")
                        assert False
                finally:
                        child.close()
                print("Test Case 789 Execution Completed")
                
        @pytest.mark.run(order=790)
        def test_790_Validate_last_queried_denylist_shoud_update_with_all_ACEs_with_exclude_permission_in_named_conf_file(self):
                print("\n============================================\n")
                print("Validating last queried denylist should update with all supported aces with exclude permission in named.conf file")
                print("\n============================================\n")
                textfile = open('/tmp/named.conf', 'r')
                log_validation = textfile.read()
                textfile.close()
                error_logs = 'infoblox-last-queried-denylist { !'+config.client_v4+'; !10.0.0.0/8; !'+config.client_v6+'; !'+config.client_v6_network+'::/64; !any; }'
                if error_logs in log_validation:
                    assert True
                else:
                    assert False
                print(error_logs)
                print("Test Case 790 Execution Completed") 
            
##########################
## Scenario NESTED ACL  ##
##########################
            
        

        @pytest.mark.run(order=791)
        def test_791_Create_IPv4_Named_ACL_with_allow_permission_in_NamedACLS(self):
                print("\n============================================\n")
                print("creating IPv4 named acl  with allow permission in namedacls")
                print("\n============================================\n")
                data = {"name": "test4","access_list": [{"_struct": "addressac","address": config.client_v4,"permission": "ALLOW"}]}
                response = ib_NIOS.wapi_request('POST', object_type="namedacl",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                data = ('"name": "test4"','"_struct": "addressac"','"address": "'+config.client_v4+'"','"permission": "ALLOW"')
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test4&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 791 Executuion Completed")
	
        @pytest.mark.run(order=792)
        def test_792_Create_IPv4_Named_ACL_with_allow_permission_in_NamedACLS(self):
                print("\n============================================\n")
                print("creating IPv4 named acl  with allow permission in namedacls")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test4",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                data = {"name": "test5","access_list": [{"_ref": ref}]}
                response = ib_NIOS.wapi_request('POST', object_type="namedacl",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                #response1 = ib_NIOS.wapi_request('GET', "namedacl?name=test4&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                response1 = ib_NIOS.wapi_request('GET', "namedacl?name=test4",grid_vip=config.grid_vip)
                print('my response is',response1)
                ref=json.loads(response1)[0]['_ref']
                ref=eval(json.dumps(ref))
                print(ref)
                response2 = ib_NIOS.wapi_request('GET', "namedacl?name=test5&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response2)
                if ref in response2:
                    assert True
                else:
                    assert False
                print("Test Case 792 Executuion Completed")


        @pytest.mark.run(order=793)
        def test_793_Add_Created_IPv4_Address_Named_ACL_at_Grid_DNS_properties(self):
                print("\n============================================\n")
                print("Adding created IPv4 Address Named ACL at grid dns level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test5",grid_vip=config.grid_vip)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                data={"last_queried_acl": [{"_ref": ref}]}
                griddns = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                ref=json.loads(griddns)[0]['_ref']
                ref=eval(json.dumps(ref))
                print(ref)
                output = ib_NIOS.wapi_request('PUT',ref=ref,fields=json.dumps(data))
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 20 secs for the member to get started
                print("\nTest Case 793 Execution Completed")

        @pytest.mark.run(order=794)
        def test_794_Validate_Added_Named_ACL_at_Grid_DNS_properties(self):
                print("\n============================================\n")
                print("validating added named acl at grid dns properties")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type='grid:dns?_return_fields=last_queried_acl',grid_vip=config.grid_vip)
                print(response)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test5",grid_vip=config.grid_vip)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                if ref in response:
                        assert True
                else:
                        assert False
                print(ref)
                print("\nTest Case 794 Execution Completed")

##############
## A record ##
##############
	
        @pytest.mark.run(order=795)
        def test_795_Add_and_Validate_A_record(self):
                print("\n============================================\n")
                print("Adding and validating A record for added zone")
                print("\n============================================\n")
                data = {"ipv4addr": "10.0.0.52","name": "21.zone.com","view": "default"}
                response = ib_NIOS.wapi_request('POST', object_type="record:a",fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                output = ib_NIOS.wapi_request('GET',object_type="record:a?name=21.zone.com&_return_fields=ipv4addr,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(output)
                result = ['"name": "21.zone.com"','"ipv4addr": "10.0.0.52"']
                for i in result:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(result)
                print("Test Case 795 Executuion Completed")

        @pytest.mark.run(order=796)
        def test_796_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 21.zone.com A' )
                f= open("7933.txt","w+")
                f.write("21.zone.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 796 Execution Completed")


        @pytest.mark.run(order=797)
        def test_797_Validate_A_record_Last_Queried_timestamp_field_will_not_update_with_grid_current_date(self):
                print("\n============================================\n")
                print("validating A record last queried timestamp will not update with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=21.zone.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                output=convert1(response)
                print("Test Case 797 Execution Completed")


        @pytest.mark.run(order=798)
        def test_798_Update_Named_ACL_with_IPv6_Address_ALLOW_Permission(self):
                print("\n============================================\n")
                print("Updating named acl with ipv6 address allow permission")
                print("\n============================================\n")
                #response = ib_NIOS.wapi_request('GET', "namedacl?name=test&_return_fields=access_list&_return_as_object=1",grid_vip=config.grid_vip)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test4",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"name": "test4","access_list": [{"_struct": "addressac","address": config.client_v4,"permission": "DENY"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 798 Executuion Completed")

        @pytest.mark.run(order=799)
        def test_799_Validate_updated_IPv6_Address_Named_ACL(self):
                print("\n============================================\n")
                print("Validating updated ipv6 address named acl")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test4&_return_fields=access_list,name&_return_as_object=1",grid_vip=config.grid_vip)
                print(response)
                data = ('"name": "test4"','"_struct": "addressac"','"address": "'+config.client_v4+'"','"permission": "DENY"')
                for i in data:
                        if i in response:
                                assert True
                        else:
                                assert False
                print(data)
                print("Test Case 799 Executuion Completed")



        @pytest.mark.run(order=800)
        def test_800_dig_A_record_to_get_current_last_queried_timestamp(self):
                print("\n============================================\n")
                print("Dig A Record to get last queried timestamp")
                print("\n============================================\n")
                #dig_cmd = ('dig @'+str(config.grid_vip)+' 21.zone.com A' )
                f= open("7933.txt","w+")
                f.write("21.zone.com A")
                f.close()
                dig = ("lap -Cr1k -CF7933.txt "+config.grid_vip+" -Tl35")
                print(dig)
                cmd = os.system(dig)
                print("Test Case 800 Execution Completed")


        @pytest.mark.run(order=801)
        def test_801_Validate_Updated_A_record_Last_Queried_timestamp_with_grid_current_date(self):
                print("\n============================================\n")
                print("Validating updated A record last queried timestamp with grid current date")
                print("\n============================================\n")
                response =ib_NIOS.wapi_request('GET',object_type="record:a?name=21.zone.com&_return_fields=last_queried&_return_as_object=1",grid_vip=config.grid_vip)
                output=convert(response)
                print("Test Case 801 Execution Completed")

###########################################
## Negative case : TSIG Key at Grid DNS ###
###########################################
	
        @pytest.mark.run(order=802)
        def test_802_Negative_case_Add_TSIG_ACL_at_Grid_Dns(self):
                print("\n============================================\n")
                print("Adding TSIG ACL at grid dns level ")
                print("\n============================================\n")
                griddns = ib_NIOS.wapi_request('GET', object_type="grid:dns",grid_vip=config.grid_vip)
                ref=json.loads(griddns)[0]['_ref']
                ref=eval(json.dumps(ref))
                print(ref)
                sleep(20)
                data = {"last_queried_acl":[{"_struct": "tsigac","tsig_key": "infoblox","tsig_key_alg": "HMAC-SHA256","tsig_key_name": "tsig"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print('my response is ',response)
                response = str(response)
                sleep(10)
                data = 'Wrong struct type tsigac in last_queried_acl'
                if data in response:
                    assert True
                else:
                    assert False
                print("Test Case 802 Execution Completed")
                
        @pytest.mark.run(order=803)
        def test_803_Negative_case_Update_Named_ACL_with_TSIG_KEY_when_namedacl_associate_with_LAST_Queried_at_grid_dns(self):
                print("\n============================================\n")
                print("Updating named acl with TSIG Key when named acl associate with LAST Queried at grid dns ")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test5",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                data = {"name": "test5","access_list": [{"_struct": "tsigac","tsig_key": "infoblox","tsig_key_alg": "HMAC-SHA256","tsig_key_name": "tsig"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                sleep(20)
                response = str(response)
                data = 'test5 update is not possible with TSIG ac items as this Named ACL is directly or indirectly linked with LAST QUERIED service'
                if data in response:
                    assert True
                else:
                    assert False
                print("\n")
                print(data)
                print("Test Case 803 Executuion Completed")




        @pytest.mark.run(order=804)
        def test_804_Enable_Scavenging_settings_at_VIEW_Level(self):
                print("\n============================================\n")
                print("Enabling scavenging settings at view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="view?name=default",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"use_scavenging_settings": True}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(60) #wait for 20 secs for the member to get started
                print("Test Case 804 Executuion Completed")

        @pytest.mark.run(order=805)
        def test_805_Validate_enabled_scavenging_settings_at_view_level(self):
                print("\n============================================\n")
                print("validating enabled scavenging settings at view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="view?name=default&_return_fields=use_scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = ('"use_scavenging_settings": true')
                if data in response:
                        assert True
                else:
                        assert False
                print("Test Case 805 Execution Completed")



######################################################
## Enabling monitor for rr/zones at view level ###
######################################################

        @pytest.mark.run(order=806)
        def test_806_Enable_Last_queried_TimeStamp_Monitor_for_RR_and_Zones_at_view_Level(self):
                print("\n============================================\n")
                print("Enabling last queried timestamp monitor for rr and zones at view level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type="view?name=default",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("Test Case 806 Executuion Completed")

        @pytest.mark.run(order=807)
        def test_807_Validate_enabled_last_queried_timstamp_monitor_for_RR_and_zone_at_GRID_DNS_level(self):
                print("\n============================================\n")
                print("alidating enabled last queried timestamp monitor for RR and zone at grid dns level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET',object_type="view?name=default&_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(response)
                data = {'"enable_rr_last_queried": true','"enable_zone_last_queried": true'}
                for i in data:
                        if i in response:
                                assert True
                                print(i)
                        else:
                                assert False
                print("Test Case 807 Execution Completed")


        @pytest.mark.run(order=808)
        def test_808_Associate_Created_IPv4_Address_Named_ACL_at_Default_DNS_VIEW(self):
                print("\n============================================\n")
                print("Associating created IPv4 Named ACL at default DNS VIEW")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test3",grid_vip=config.grid_vip)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                data={"last_queried_acl": [{"_ref": ref}]}
                view = ib_NIOS.wapi_request('GET', object_type="view",grid_vip=config.grid_vip)
                view=json.loads(view)[0]['_ref']
                view=eval(json.dumps(view))
                print(view)
                output = ib_NIOS.wapi_request('PUT',ref=view,fields=json.dumps(data))
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("\nTest Case 808 Execution Completed")

        @pytest.mark.run(order=809)
        def test_809_Validate_Associated_Named_ACL_at_Default_DNS_VIEW(self):
                print("\n============================================\n")
                print("Validating associated named acl at default dns view")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', object_type='view?_return_fields=last_queried_acl',grid_vip=config.grid_vip)
                print(response)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test3",grid_vip=config.grid_vip)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                if ref in response:
                        assert True
                else:
                        assert False
                print(ref)
                print("\nTest Case 809 Execution Completed")


###########################################
## Negative case : TSIG Key at DNS View ###
###########################################

        @pytest.mark.run(order=810)
        def test_810_Negative_case_Add_TSIG_ACL_at_DNS_view(self):
                print("\n============================================\n")
                print("Adding TSIG ACL at dns view level ")
                print("\n============================================\n")
                griddns = ib_NIOS.wapi_request('GET', object_type="view?name=default",grid_vip=config.grid_vip)
                ref=json.loads(griddns)[0]['_ref']
                ref=eval(json.dumps(ref))
                print(ref)
                data = {"last_queried_acl":[{"_struct": "tsigac","tsig_key": "infoblox","tsig_key_alg": "HMAC-SHA256","tsig_key_name": "tsig"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                response = str(response)
                print(response)
                data = 'Wrong struct type tsigac in last_queried_acl'
                if data in response:
                        assert True
                        print("\n")
                        print(data)
                else:
                        assert False
                print("Test Case 810 Execution Completed")

        @pytest.mark.run(order=811)
        def test_811_Negative_case_Update_Named_ACL_with_TSIG_KEY_when_namedacl_associate_with_LAST_Queried_at_dns_view(self):
                print("\n============================================\n")
                print("Updating named acl with TSIG Key when named acl associate with LAST Queried at dns view")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test3",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                data = {"name": "test3","access_list": [{"_struct": "tsigac","tsig_key": "infoblox","tsig_key_alg": "HMAC-SHA256","tsig_key_name": "tsig"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                response = str(response)
                data = 'test3 update is not possible with TSIG ac items as this Named ACL is directly or indirectly linked with LAST QUERIED service'
                if data in response:
                        assert True
                else:
                        assert False
                print("\n")
                print(data)
                print("Test Case 811 Executuion Completed")


################################################
## Enabling scavenging settings at zone level ##
################################################

        @pytest.mark.run(order=812)
        def test_812_Enable_enable_rr_last_queried_and_enable_zone_last_queried_at_Authoritative_zone(self):
                print("\n============================================\n")
                print("Enabling RR last queried and zone last queried monitor at authoritative zone")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                print(ref)
                data = {"use_scavenging_settings": True}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                get_ref = ib_NIOS.wapi_request('GET', object_type="zone_auth?fqdn=test.com")
                ref1 = json.loads(get_ref)[0]['_ref']
                print ref1
                data = {"scavenging_settings": {"ea_expression_list": [],"enable_auto_reclamation": False,"enable_recurrent_scavenging": False,"enable_rr_last_queried": True,"enable_scavenging": False,"enable_zone_last_queried": True,"expression_list": [],"reclaim_associated_records": False}}
                response = ib_NIOS.wapi_request('PUT',ref= ref1,fields=json.dumps(data))
                print(response)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(40) #wait for 40 secs for the member to get started
                print("Test Case 812 Execution Completed")


        @pytest.mark.run(order=813)
        def test_813_Validate_enabled_timestamp_monitor_RR_and_zone_at_Authoritative_zone(self):
                print("\n============================================\n")
                print("Validating enabled timestamp monitor for RR and zone at authoritative zone")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                #print(ref)
                output = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=scavenging_settings",grid_vip=config.grid_vip)
                print(output)
                data = ['"enable_rr_last_queried": true','"enable_zone_last_queried": true']
                for i in data:
                    if i in output:
                        assert True
                    else:
                        assert False
                print(data)
                print("\n")
                print("Test Case 813 Execution Completed")


        @pytest.mark.run(order=814)
        def test_814_Add_Created_IPv4_Address_Named_ACL_at_zone_level(self):
                print("\n============================================\n")
                print("Adding created IPv4 named acl at zone level")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test1",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                data={"last_queried_acl": [{"_ref": ref}]}
                print(data)
                grid_dns = ib_NIOS.wapi_request('GET', object_type='zone_auth?fqdn=test.com',grid_vip=config.grid_vip)
                print(grid_dns)
                grid_dns=json.loads(grid_dns)[0]['_ref']
                grid_dns=eval(json.dumps(grid_dns))
                output = ib_NIOS.wapi_request('PUT',ref=grid_dns,fields=json.dumps(data))
                print(output)
                grid =  ib_NIOS.wapi_request('GET', object_type="grid", grid_vip=config.grid_vip)
                ref = json.loads(grid)[0]['_ref']
                data= {"member_order" : "SIMULTANEOUSLY","restart_option":"FORCE_RESTART","service_option": "ALL"}
                request_restart = ib_NIOS.wapi_request('POST', object_type = ref + "?_function=restartservices",fields=json.dumps(data),grid_vip=config.grid_vip)
                sleep(20) #wait for 20 secs for the member to get started
                print("\nTest Case 814 Execution Completed")


        @pytest.mark.run(order=815)
        def test_815_Validate_Added_Named_ACL_at_Zone_Level(self):
                print("\n============================================\n")
                print("validating added named acl at zone level")
                print("\n============================================\n")
                output = ib_NIOS.wapi_request('GET', object_type='zone_auth?fqdn=test.com',grid_vip=config.grid_vip)
                ref=json.loads(output)[0]['_ref']
                ref = eval(json.dumps(ref))
                output = ib_NIOS.wapi_request('GET',ref=ref,params="?_inheritance=True&_return_fields=last_queried_acl",grid_vip=config.grid_vip)
                print(output)
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test1",grid_vip=config.grid_vip)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                if ref in output:
                        assert True
                else:
                        assert False
                print(ref)
                print("\nTest Case 815 Execution Completed")
#############################################
## Negative case : TSIG Key at Zone Level ###
#############################################

        @pytest.mark.run(order=816)
        def test_816_Negative_case_Add_TSIG_ACL_at_Zone_level(self):
                print("\n============================================\n")
                print("Adding TSIG ACL at zone level ")
                print("\n============================================\n")
                griddns = ib_NIOS.wapi_request('GET', object_type="zone_auth?fqdn=test.com",grid_vip=config.grid_vip)
                ref=json.loads(griddns)[0]['_ref']
                ref=eval(json.dumps(ref))
                print(ref)
                data = {"last_queried_acl":[{"_struct": "tsigac","tsig_key": "infoblox","tsig_key_alg": "HMAC-SHA256","tsig_key_name": "tsig"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                response = str(response)
                print(response)
                data = 'Wrong struct type tsigac in last_queried_acl'
                if data in response:
                        assert True
                        print("\n")
                        print(data)
                else:
                        assert False
                print("Test Case 816 Execution Completed")

        @pytest.mark.run(order=817)
        def test_817_Negative_case_Update_Named_ACL_with_TSIG_KEY_when_namedacl_associate_with_LAST_Queried_at_dns_view(self):
                print("\n============================================\n")
                print("Updating named acl with TSIG Key when named acl associate with LAST Queried at dns view")
                print("\n============================================\n")
                response = ib_NIOS.wapi_request('GET', "namedacl?name=test1",grid_vip=config.grid_vip)
                print(response)
                ref=json.loads(response)[0]['_ref']
                ref = eval(json.dumps(ref))
                data = {"name": "test3","access_list": [{"_struct": "tsigac","tsig_key": "infoblox","tsig_key_alg": "HMAC-SHA256","tsig_key_name": "tsig"}]}
                response = ib_NIOS.wapi_request('PUT', ref=ref,fields=json.dumps(data),grid_vip=config.grid_vip)
                print(response)
                response = str(response)
                data = 'test1 update is not possible with TSIG ac items as this Named ACL is directly or indirectly linked with LAST QUERIED service'
                if data in response:
                        assert True
                else:
                        assert False
                print("\n")
                print(data)
                print("Test Case 817 Executuion Completed")


        @pytest.mark.run(order=818)
        def test_818_Validating_all_records_updated_last_queried_timestamp_for_excluded_client_queries_from_deny_list(self):
		print("\n============================================\n")
		print(" Validating all number of records updated for allowed client to update the last query timestamp ")
		print(" Number of records updated for allowed client queries ",pass_count)
                print("Number of records not updated for allowed lient queries ",fail_count)	
		if pass_count[0] >= 100:
			assert True
		else:
			assert False
		print("Test Case 818 Executuion Completed")


        @pytest.mark.run(order=819)
        def test_819_Validating_all_records_not_updated_last_queried_timestamp_for_included_client_queries_from_deny_list(self):
                print("\n============================================\n")
                print(" Validating all number of records not updated for allowed client to update the last query timestamp ")
                print(" Number of records not updated for included client queries from deny list ",pass_count1)
                print(" Number of records not updated for included  lient queries from deny list",fail_count1)
                if pass_count1[0] >= 100:
                        assert True
                else:
                        assert False
                print("Test Case 819 Executuion Completed")


