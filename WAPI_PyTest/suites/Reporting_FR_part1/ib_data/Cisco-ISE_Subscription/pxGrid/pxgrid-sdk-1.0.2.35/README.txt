------------------------------------------------------
pxGrid SDK
------------------------------------------------------

The pxGrid SDK is for developing pxGrid clients.
It contains these directories:
* lib - Java lib files in the lib directory
* samples - Java code samples to demonstrate how to use Java lib
* doc - Tutorial and javadoc
* cgcl - C lib and samples package


------------------------------------------------------
pxGrid Samples
------------------------------------------------------

The samples directory contains a list of Java-based samples.
Each of which demonstrates how to integrate with a different part of ISE through pxGrid.
Scripts for executing each example are located in samples/bin. Use "-?" option to display help.
The actual Java source for the examples is located in samples/src.
The sample/certs directory contains certificates and keys that you can use in running the examples.
Note that ISE must be configured with the certificates in order for the samples to run correctly (see pxGrid setup below).

A description of each script is below:

* capability_query.sh -- list all capabilities supported by this instance of xGRID.
* core_subscribe.sh -- subscribe to core topic for changes in capabilities
* propse_capability.sh -- propose a new capability to pxGrid
* generic_client.sh -- sample on sending and receiving generic content
* multigroupclient.sh -- sample on assigning multiple groups to a user

* session_download.sh -- download all active sessions from ISE.
* session_query_by_ip.sh -- retrieve an active session from ISE based on IP address.
* session_subscribe.sh -- subscribe to changes in session state.

* ANCAction_query.sh -- perform actions in Adaptive Network Control (ANC)
* eps_quarantine.sh -- execute the Endpoint Protection Service (EPS) quarantine action on
  ISE for a given IP address.
* eps_unquarantine.sh -- execute the Endpoint Protection Service (EPS) unquarantine action on
  ISE for a given MAC address.
  
* identity_group_download.sh -- download user and identity groups associated with active sessions in ISE.
* identity_group_query.sh -- retrieve identity groups associated a user that has an active session in ISE.
* identity_group_subscribe.sh -- subscribe to user identity group notification. This notification is generated
  when a user authenticates and is part of one or more identity groups.

* endpointprofile_query.sh -- retrieve all endpoint profiles (profiling policies) configured in ISE
* endpointprofile_subscribe.sh -- subscribe to changes in endpoint profiles (profiling policies) configured in ISE.
  
* securitygroup_query.sh -- retrieve all Trustsec security groups configured in ISE.
* securitygroup_subscribe.sh -- subscribe to changes in Trustsec security groups configured in ISE.
 
* sxp_subscribe.sh -- subscribe for SXP events
* sxp_download.sh -- download current SXP entries

* generic_client.sh -- demonstrates how a grid client can participate in a dynamically created topic by doing 
                       publish / subscribe / send query or action requests
	This sample takes the following additional parameters:
		GENERIC_TOPIC_NAME - the name of the topic
		GENERIC_CLIENT_MODE - the client mode - whether this is a publisher, subscriber or action client
		GENERIC_QUERY_NAME_SET - a comma separated set of query names that this client will use to send query requests
		GENERIC_ACTION_NAME_SET - a comma separated set of action names that this client will use to send action requests
		GENERIC_PUBLISH_DATA_SET - a comma separated set of plain text data that this client will use when publishing messages
		GENERIC_REQUEST_DATA_SET - a comma separated set of plain text data that this client will use when sending requests
		GENERIC_RESPONSE_DATA_SET - a comma separated set of plain text data that this client will use when responding to requests
		GENERIC_SLEEP_INTERVAL - sleep interval in milliseconds between messages
		GENERIC_ITERATIONS - number of iterations of publishing / sending request messages
		
	These parameters can be supplied using a config file using -c <conf-file> argument to the script
	The sample config files are located at samples/conf
		samples/conf/generic_action_client.properties
		samples/conf/generic_publisher.properties
		samples/conf/generic_subscriber.properties

------------------------------------------------------
pxGrid Setup
------------------------------------------------------

The samples rely on keystores to connect to pxGrid and perform operations. While many customers will
use existing keystores generated by their PKI processes, it's easiest to use the prepared keystores
located in the samples/certs directory for purposes of demonstration. By default the samples will
use rootSample.jks as the trusted certificate authority and clientSample1.jks as the client's
certificate/key pair.
You can setup certificates in ISE 2.0 by following these steps:

	1) under Administration -> System -> Certificates -> Trusted Certificates,
	   import "rootSample.crt" and select "Trust for authentication within ISE"
	2) under Administration -> System -> Certificates -> System Certificates,
	   import "iseSample1.crt" as for "Certificate File", iseSample1.key as for "Private Key File",
	   and specify "cisco" as the "Password". Select "pxGrid" under "Usage".

To run session_download.sh and identity_group_download.sh you will need to perform additional steps.
These samples require that the trust store contain the server certificate of each MnT node. For
each of the MnT nodes, perform the following steps:

	1) under Administration -> System -> Certificates -> System Certificates
	2) select the certificate of the MnT node with "Admin" in the "Used by" field. 
	3) click "Export" and select "Export Certificate Only" in dialog
	4) save the certificate to your filesystem (referred to as <certificate file>.pem below).
	5) Using keytool command from Java SDK:
          keytool -import -alias mnt -keystore <SDK HOME>/samples/certs/rootSample.jks -file <certificate file>.pem
       The keytool command will prompt for the rootSample.jks password (cisco123) and whether you want
		to trust the new certificate (yes).
