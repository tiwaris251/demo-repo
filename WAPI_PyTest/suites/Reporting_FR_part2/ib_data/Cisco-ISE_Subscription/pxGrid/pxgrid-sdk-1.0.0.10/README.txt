------------------------------------------------------
pxGrid SDK
------------------------------------------------------

This distribution package is intended for developers interested in developing pxGrid clients in
Java. Using the libraries is simple:

* include all jar files located in the lib directory in your Java project's classpath.
* make calls to the Java API's as demonstrated in the samples.


------------------------------------------------------
pxGrid Samples
------------------------------------------------------

The samples directory contains a list of Java-based samples, each of which demonstrates how
to integrate with a different part of ISE through pxGrid. Scripts for executing each example
are located in samples/bin. The actual Java source for the examples is located in
samples/src. The sample/certs directory contains certificates and keys that you can use in
running the examples. Note that ISE must be configured with the certificates in order for
the samples to run correctly (see pxGrid setup below).

A description of each script is below:

* capability_query.sh -- list all capabilities supported by this instance of xGRID.
* endpointprofile_query.sh -- retrieve all endpoint profiles (profiling policies) configured in ISE
* endpointprofile_subscribe.sh -- subscribe to changes in endpoint profiles (profiling policies) configured in ISE.
* eps_quarantine.sh -- execute the Endpoint Protection Service (EPS) quarantine action on
  ISE for a given IP address.
* eps_unquarantine.sh -- execute the Endpoint Protection Service (EPS) unquarantine action on
  ISE for a given MAC address.
* identity_group_download.sh -- download user and identity groups associated with active sessions in ISE.
* identity_group_query.sh -- retrieve identity groups associated a user that has an active session in ISE.
* identity_group_subscribe.sh --  subscribe to user identity group notification. This notification is generated
  when a user authenticates and is part of one or more identity groups.
* register.sh -- register a new pxGrid client.
* securitygroup_query.sh -- retrieve all Trustsec security groups configured in ISE.
* securitygroup_subscribe.sh -- subscribe to changes in Trustsec security groups configured in ISE. 
* session_download.sh -- download all active sessions from ISE.
* session_query_by_ip.sh -- retrieve an active session from ISE based on IP address.
* session_subscribe.sh -- subscribe to changes in session state.


------------------------------------------------------
pxGrid Setup
------------------------------------------------------

The samples rely on keystores to connect to pxGrid and perform operations. While many customers will
use existing keystores generated by their PKI processes, it's easiest to use the prepared keystores
located in the samples/certs directory for purposes of demonstration. By default the samples will
use rootSample.jks as the trusted certificate authority and clientSample1.jks as the client's
certificate/key pair. You can setup the ISE certificates and trust store by following these steps:

	1) log onto ISE from a web browser and go to Administration -> Certificates.
	2) click on "Trusted Certificates" in the left-hand column.
	3) import rootSample.crt and be sure to check the box for "pxGrid" under "Trusted For". Press
	   "Submit" to save the changes.
	4) click on "System Certificates" in the left-hand column.
	5) import iseSample1.crt as the "Certificate File", iseSample1.key as the "Private Key File",
	   and specify "cisco" as the "Password". Under "Usage" be sure to check the box labeled
	   "pxGrid". Press "Submit" to save the changes.

To run session_download.sh and identity_group_download.sh you will need to perform additional steps.
These samples require that the trust store contain the server certificate of each MnT node. For
each of the MnT nodes, perform the following steps:

	6) go to Administration -> Certificates from your web browser.
	7) click on "System Certificates" in the left-hand column.
	8) under the node name, check the box next to the certificate with "HTTPS" in the "Used By" column.
	9) click the "Export" button.
	10) a dialog appears. click "Export Certificate Only" and the "Export" button.
	11) save the certificate to your filesystem (referred to as <certificate file>.pem below).
	12) on a linux-based system you can then add the certificate to the default trust store:

		>> openssl x509 -outform der -in <certificate file>.pem -out <certificate file>.der
		>> keytool -import -alias mnt -keystore <SDK HOME>/samples/certs/rootSample.jks -file <certificate file>.der

		The keytool utility may not be in your path. But you can find it in your JRE/JDK bin folder.
		The keytool command will ask for the rootSample.jks password (cisco123) and whether you want
		to trust the new certificate (yes).
