#!/usr/bin/python
import xml.etree.ElementTree as ET
import re
import sys
import os

# This script reads xml generated by config grid and
# writes new xml Configuration.xml

all_data = []
build_list = ['Alpha']  # This list is used to filter build name
p = re.compile('member*')
if len(sys.argv) < 2:
    print "Usage : ", sys.argv[0], "file=GRID_1.xml tag1=value1 tag2=value2"
    sys.exit(1)

tags = sys.argv[1:]
xml_files = tags[0].split(',')
first_file = xml_files[0].split('=')[1]
all_xml_files = []
all_xml_files.append(first_file)
for xml in xml_files[1:]:
    all_xml_files.append(xml)
# Read data from config grid generated xml passed in cli
for i in all_xml_files:
    tree = ET.parse(i)
    root = tree.getroot()
    setup_info = {}
    members = []
    for child in root:
        if child.tag == 'cluster-info':
            SESSION_IP = child.attrib['MASTER_VIP']
        if child.tag == 'master':
            try:
                ## Newly Added HA data ##
                setup_info['name'] = child.tag
                setup_info['master_ha_vip'] = child.attrib['SHARED_IP']
                setup_info['master_ha_vip_v6'] = child.attrib['SHARED_IPV6']
                setup_info['master_fqdn'] = child.attrib['UNIT_HOSTNAME']
                setup_info['master_ha_active_ip'] = child.attrib['HA_1_IP']
                setup_info['master_ha_passive_ip'] = child.attrib['HA_2_IP']
                setup_info['master_ha_active_ipv6'] = child.attrib['HA_1_IPV6']
                setup_info['master_ha_passive_ipv6'] = child.attrib['HA_2_IPV6']
                setup_info['master_ha_active_vmid'] = child.attrib['UNIT_1_ID']
                setup_info['master_ha_passive_vmid'] = child.attrib['UNIT_2_ID']

            except:
                GRID1_MASTER_FQDN = child.attrib['UNIT_HOSTNAME']
                setup_info['name'] = child.tag
                setup_info['session_ip'] = SESSION_IP
                setup_info['master_ip'] = child.attrib['UNIT_1_IPADDR']
                setup_info['master_fqdn'] = GRID1_MASTER_FQDN
                # Newly added variables
                setup_info['master_vmid'] = child.attrib['UNIT_1_ID']
                setup_info['master_mgmt_ip'] = child.attrib['UNIT_1_MGMT_IPADDR']
                setup_info['master_ipv6'] = child.attrib['UNIT_1_IPV6ADDR']
                setup_info['master_mgmt_ipv6'] = child.attrib['UNIT_1_MGMT_IPV6ADDR']

            finally:
                setup_info['owner'] = child.attrib['UNIT_1_OWNER']
                setup_info['netmask'] = child.attrib['UNIT_1_NETMASK']
                setup_info['netmask_mgmt'] = child.attrib['UNIT_1_MGMT_NETMASK']
                setup_info['router'] = child.attrib['UNIT_1_ROUTER']
                setup_info['router_mgmt'] = child.attrib['UNIT_1_MGMT_ROUTER']
                setup_info['router_ipv6'] = child.attrib['UNIT_1_V6ROUTER']
                setup_info['router_ipv6_mgmt'] = child.attrib['UNIT_1_MGMT_V6ROUTER']

            # Updating Build
            b_list = child.attrib['image'].split("-")
            if b_list[2] in build_list:
                build = b_list[1] + '-' + b_list[2] + "-" + b_list[3]
            else:
                build = b_list[1] + '-' + b_list[2]
            setup_info['build'] = build


        # Adding all the members into a dictionary
        if p.match(child.tag):
            member_data = {}
            member_data['name'] = child.tag


# Try for HA Member tag's IP If exception occur take UNIT_1_IPADDR
            try:
                ## Newly added HA data ##
                member_data['member_ha_vip'] = child.attrib['SHARED_IP']
                member_data['member_ha_vip_v6'] = child.attrib['SHARED_IPV6']
                member_data['member_ha_active_ip'] = child.attrib['HA_1_IP']
                member_data['member_ha_passive_ip'] = child.attrib['HA_2_IP']
                member_data['member_ha_active_ipv6'] = child.attrib['HA_1_IPV6']
                member_data['member_ha_passive_ipv6'] = child.attrib['HA_2_IPV6']
                member_data['host_name'] = child.attrib['UNIT_HOSTNAME']
                member_data['member_ha_active_vmid'] = child.attrib['UNIT_1_ID']
                member_data['member_ha_passive_vmid'] = child.attrib['UNIT_2_ID']
#                print(member_data)

            except:
                member_data['member_ip'] = child.attrib['UNIT_1_IPADDR']
                member_data['host_name'] = child.attrib['UNIT_HOSTNAME']
                # Newly added variables
                member_data['member_vmid'] = child.attrib['UNIT_1_ID']
                member_data['member_ipv6'] = child.attrib['UNIT_1_IPV6ADDR']
                member_data['member_mgmt_ip'] = child.attrib['UNIT_1_MGMT_IPADDR']
                member_data['member_mgmt_ipv6'] = child.attrib['UNIT_1_MGMT_IPV6ADDR']

            members.append(member_data)
    setup_info['all_members'] = members
    print(members)
    all_data.append(setup_info)




# Write xml suite file
root = ET.Element("START")
system_config = ET.SubElement(root, "SYSTEM_CONFIG")
build = ET.SubElement(system_config, "BUILD")
build.text = all_data[0]['build']

# Generate all master tags
x = 1
for i in all_data:
    ### Defining the tags ###
    SESSION_IP = "GRID" + str(x) + "_SESSION_IP"
    GRID_MASTER_VIP = "GRID" + str(x) + "_MASTER_VIP"
    GRID_MASTER_FQDN = "GRID" + str(x) + "_MASTER_FQDN"
    # Newly added variables
    GRID_MASTER_ID = "GRID" + str(x) + "_MASTER_ID"
    OWNER = "OWNER"
    GRID_MASTER_MGMT_VIP = "GRID" + str(x) + "_MASTER_MGMT_VIP"
    GRID_MASTER_IPV6 = "GRID" + str(x) + "_MASTER_IPV6"
    GRID_MASTER_MGMT_IPV6 = "GRID" + str(x) + "_MASTER_MGMT_IPV6"
    NETMASK = "GRID" + str(x) + "_NETMASK"
    NETMASK_MGMT = "GRID" + str(x) + "_NETMASK_MGMT"
    ROUTER = "GRID" + str(x) + "_ROUTER"
    ROUTER_MGMT = "GRID" + str(x) + "_ROUTER_MGMT"
    ROUTER_IPV6 = "GRID" + str(x) + "_ROUTER_IPV6"
    ROUTER_IPV6_MGMT = "GRID" + str(x) + "_ROUTER_IPV6_MGMT"

    ## Newly added HA data ##
    GRID_MASTER_HA_VIP = "GRID" + str(x) + "_MASTER_HA_VIP"
    GRID_MASTER_HA_VIP_V6 = "GRID" + str(x) + "_MASTER_HA_VIP_V6"
    GRID_MASTER_FQDN = "GRID" + str(x) + "_MASTER_FQDN"
    GRID_MASTER_HA_ACTIVE_IP = "GRID" + str(x) + "_MASTER_HA_ACTIVE_IP"
    GRID_MASTER_HA_PASSIVE_IP = "GRID" + str(x) + "_MASTER_HA_PASSIVE_IP"
    GRID_MASTER_HA_ACTIVE_IPV6 = "GRID" + str(x) + "_MASTER_HA_ACTIVE_IPV6"
    GRID_MASTER_HA_PASSIVE_IPV6 = "GRID" + str(x) + "_MASTER_HA_PASSIVE_IPV6"
    GRID_MASTER_HA_ACTIVE_ID = "GRID" + str(x) + "_MASTER_HA_ACTIVE_ID"
    GRID_MASTER_HA_PASSIVE_ID = "GRID" + str(x) + "_MASTER_HA_PASSIVE_ID"


    try:
        ## Newly added HA data ##
        ET.SubElement(system_config, GRID_MASTER_HA_VIP).text = i['master_ha_vip']
        ET.SubElement(system_config, GRID_MASTER_HA_VIP_V6).text = i['master_ha_vip_v6']
        ET.SubElement(system_config, GRID_MASTER_FQDN).text = i['master_fqdn']
        ET.SubElement(system_config, GRID_MASTER_HA_ACTIVE_IP).text = i['master_ha_active_ip']
        ET.SubElement(system_config, GRID_MASTER_HA_PASSIVE_IP).text = i['master_ha_passive_ip']
        ET.SubElement(system_config, GRID_MASTER_HA_ACTIVE_IPV6).text = i['master_ha_active_ipv6']
        ET.SubElement(system_config, GRID_MASTER_HA_PASSIVE_IPV6).text = i['master_ha_passive_ipv6']
        ET.SubElement(system_config, GRID_MASTER_HA_ACTIVE_ID).text = i['master_ha_active_vmid']
        ET.SubElement(system_config, GRID_MASTER_HA_PASSIVE_ID).text = i['master_ha_passive_vmid']

    except:
        ### Assigning Value ###
        ET.SubElement(system_config, SESSION_IP).text = i['session_ip']
        ET.SubElement(system_config, GRID_MASTER_VIP).text = i['master_ip']
        ET.SubElement(system_config, GRID_MASTER_FQDN).text = i['master_fqdn']
        # Newly added variables
        ET.SubElement(system_config, GRID_MASTER_MGMT_VIP).text = i['master_mgmt_ip']
        ET.SubElement(system_config, GRID_MASTER_ID).text = i['master_vmid']
        ET.SubElement(system_config, GRID_MASTER_IPV6).text = i['master_ipv6']
        ET.SubElement(system_config, GRID_MASTER_MGMT_IPV6).text = i['master_mgmt_ipv6']

    finally:
        ET.SubElement(system_config, OWNER).text = i['owner']
        ET.SubElement(system_config, NETMASK).text = i['netmask']
        ET.SubElement(system_config, NETMASK_MGMT).text = i['netmask_mgmt']
        ET.SubElement(system_config, ROUTER).text = i['router']
        ET.SubElement(system_config, ROUTER_MGMT).text = i['router_mgmt']
        ET.SubElement(system_config, ROUTER_IPV6).text = i['router_ipv6']
        ET.SubElement(system_config, ROUTER_IPV6_MGMT).text = i['router_ipv6_mgmt']


# If it has members add that to tree
    y = 1
    if len(i['all_members']) != 0:
        for member in i['all_members']:

            GRID_MEMBER_VIP = "GRID" + str(x) + "_MEMBER" + str(y) + "_VIP"
            GRID_MEMBER_FQDN = "GRID" + str(x) + "_MEMBER" + str(y) + "_FQDN"
            # Newly added variables
            GRID_MEMBER_ID = "GRID" + str(x) + "_MEMBER" + str(y) + "_ID"
            GRID_MEMBER_IPV6 = "GRID" + str(x) + "_MEMBER" + str(y) + "_IPV6"
            GRID_MEMBER_MGMT_IP = "GRID" + str(x) + "_MEMBER" + str(y) + "_MGMT_IP"
            GRID_MEMBER_MGMT_IPV6 = "GRID" + str(x) + "_MEMBER" + str(y) + "_MGMT_IPV6"

            # Newly added HA data ##
            GRID_MEMBER_HA_VIP = "GRID" + str(x) + "_MEMBER" + str(y) + "_HA_VIP"
            GRID_MEMBER_HA_VIP_V6 = "GRID" + str(x) + "_MEMBER" + str(y) + "_HA_VIP_V6"
            GRID_MEMBER_HA_ACTIVE_IP = "GRID" + str(x) + "_MEMBER" + str(y) + "_ACTIVE_HA_IP"
            GRID_MEMBER_HA_PASSIVE_IP = "GRID" + str(x) + "_MEMBER" + str(y) + "_PASSIVE_HA_IP"
            GRID_MEMBER_HA_ACTIVE_IPV6 = "GRID" + str(x) + "_MEMBER" + str(y) + "_ACTIVE_HA_IPV6"
            GRID_MEMBER_HA_PASSIVE_IPV6 = "GRID" + str(x) + "_MEMBER" + str(y) + "_PASSIVE_HA_IPV6"
            GRID_MEMBER_HA_ACTIVE_ID = "GRID" + str(x) + "_MEMBER" + str(y) + "_HA_ACTIVE_ID"
            GRID_MEMBER_HA_PASSIVE_ID = "GRID" + str(x) + "_MEMBER" + str(y) + "_HA_PASSIVE_ID"

            try:
                ## Newly added HA data ##
                ET.SubElement(system_config, GRID_MEMBER_HA_VIP).text = member['member_ha_vip']
                ET.SubElement(system_config, GRID_MEMBER_HA_VIP_V6).text = member['member_ha_vip_v6']
                ET.SubElement(system_config, GRID_MEMBER_FQDN).text = member['host_name']
                ET.SubElement(system_config, GRID_MEMBER_HA_ACTIVE_IP).text = member['member_ha_active_ip']
                ET.SubElement(system_config, GRID_MEMBER_HA_PASSIVE_IP).text = member['member_ha_passive_ip']
                ET.SubElement(system_config, GRID_MEMBER_HA_ACTIVE_IPV6).text = member['member_ha_active_ipv6']
                ET.SubElement(system_config, GRID_MEMBER_HA_PASSIVE_IPV6).text = member['member_ha_passive_ipv6']
                ET.SubElement(system_config, GRID_MEMBER_HA_ACTIVE_ID).text = member['member_ha_active_vmid']
                ET.SubElement(system_config, GRID_MEMBER_HA_PASSIVE_ID).text = member['member_ha_passive_vmid']

            except:
                ET.SubElement(system_config, GRID_MEMBER_VIP).text = member['member_ip']
                ET.SubElement(system_config, GRID_MEMBER_FQDN).text = member['host_name']
                # Newly added variables
                ET.SubElement(system_config, GRID_MEMBER_ID).text = member['member_vmid']
                ET.SubElement(system_config, GRID_MEMBER_IPV6).text = member['member_ipv6']
                ET.SubElement(system_config, GRID_MEMBER_MGMT_IP).text = member['member_mgmt_ip']
                ET.SubElement(system_config, GRID_MEMBER_MGMT_IPV6).text = member['member_mgmt_ipv6']


            y = y + 1
    x = x + 1

# parse custom tags passed in cli

for tag in tags[1:]:
    tag_value = tag.split('=')
    ET.SubElement(system_config, tag_value[0]).text = tag_value[1]


tree = ET.ElementTree(root)
tree.write("Configuration.xml")
