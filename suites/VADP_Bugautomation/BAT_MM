#!/usr/bin/perl

use strict;
use warnings;
use diagnostics;
use lib "/import/qaddi/vADP_Automation/";
use REA;

my $myname="$0";
$myname=~s/.*\///;

my $ssh_ip=shift;
my $ip=shift;
my $rules_file=shift;
my $sudo_prefix='';
my $ping_command = 'ping';
if ($ENV{USER} ne 'root') {$sudo_prefix='sudo'}

if (! defined($ssh_ip) || $ssh_ip eq '' || $ssh_ip =~ /help/ || 
    ! defined($ip) || $ip eq '' || $ip =~ /help/ ||
    ! defined($rules_file) || $rules_file eq '' || $rules_file =~ /help/) {
    print "This program will execute a basic subset of test cases to quickly validate a NIOS rule set.\n";
    print "To run, provide the appliance's SSH IP address, the test IP Address, and optionally, the rules file to test.\n";
    print "E.G.     $myname 10.36.0.154 10.34.9.51 /import/qaddi/Olympic-Proj/ET_Rules/latest_et_rules_file.txt\n";
    print "To test against the currently loaded rules, specify the literal \"NIOS\" instead of a rules file name.\n";
    exit 1;
}

if ($ip =~ /^[\da-f:]*$/) {
    print "\nExecuting Monitor Mode Automation over LAN V6 Interface\n\n";
    $ping_command = 'ping6';
} else {
    print "\nExecuting Monitor Mode Automation\n\n";
}
# These test case definitions must come after we parse the IP address input since we use $ip in our commands.
# Since we use double quotes, be sure to escape Perl-like characters like @ in dig commands and $ and " themselves.
# Also be aware that the program has a built-in wait between test cases of 5 seconds, which may affect time-sensitive tests.

my @Test_Cases=(

                # EARLY DROP TCP non-DNS query # SID: 130000700
                {cmd=>"dnsq -ns=$ip -qname=205.234.19.100 -opcode=1 -protocol=tcp -wait=0.1", rule=>130000700},

                # EARLY DROP DNS named author attempts # SID: 110100100
                {cmd=>"dig +retries=0 \@$ip authors.bind. chaos txt", rule=>110100100, fail_if_match=>'no servers could be reached'},

                # EARLY DROP UDP DNS label too long # SID: 110100500
                {cmd=>"dnsq -ns=$ip -qname='|04|foo|03|com|00|' -wait=0.1", rule=>110100500, fail_if_match=>'You got no response from your'},

                # DROP UDP invalid DNS query with Authority # SID: 110100850
                {cmd=>"dnsq -ns=$ip -qname=sura.mdu -nscount=2 -wait=0.1", rule=>110100850},

                # DROP MALWARE possible Hiloti # SID: 130300400
                {cmd=>"dnsq -ns=$ip -qname cmd_exe", rule=>130300400},
                
                # DROP TCP invalid DNS IXFR query with zero or more than one Authority # SID: 130100600
                {cmd=>"dnsq -ns=$ip -qname=sura.mdu -qtype=ixfr -serial 21 -nscount=2   -protocol=tcp -wait=0.1", rule=>130100600},

                # DROP ICMP large packets # SID: 130400200
                {cmd=>"$ping_command -c 1 -s 1000 $ip", rule=>130400200},

                # DROP UDP DNS AXFR zone transfer requests # SID: 130200100
                {cmd=>"dnsq -ns=$ip -qname=sura.mdu -qtype=axfr", rule=>130200100, alert_count=>0, drop_count=>1},

                # DNS A record # SID: 130500100
                {cmd=>"dig +retries=0 \@$ip sura.mdu A", rule=>''},

                # Potential DDoS related domains category - SID 120600xxx: These rules filters UDP, type A queries.
                # Potential DDoS related domains category: Tests Event Filter = 10
                {cmd=>"dnsq -ns=$ip -qname=namepu.com -wait 0.001 -repeat 33", rule=>120600533, count=>1},

                # Potential DDoS related domains category: Negative case. The 120600xxx rules should not trigger when using TCP.
                {cmd=>"dig +retries=0 +tcp \@$ip foo.namepu.com. A", rule=>'120600533', drop_count=>0, fail_if_match=>'no servers could be reached'},

                # DROP TCP DNS Unexpected # SID: 140000200
                {cmd=>"dig +time=1 +tcp +retries=0 \@$ip google.com AFSDB", rule=>140000200}, # Unpopular Query

    );

if (! eval "require Net::RawIP") {
  my $msg="This system is missing the Net::RawIP Perl module, so expect the sendipip test cases to fail. ";
  if (`uname -a | grep -i ubuntu`) {
    if ($ENV{USER} eq 'root') {print STDERR "$msg Try apt-get install libnet-rawip-perl\n\n"}
                         else {print STDERR "$msg Try sudo apt-get install libnet-rawip-perl\n\n"}
  } else {
    if ($ENV{USER} eq 'root') {print STDERR "$msg Try yum -y install perl-Net-RawIP\n\n"}
                         else {print STDERR "$msg Try sudo yum -y install perl-Net-RawIP\n\n"}
  }
}

my $test;
$test = REA->new(ssh_ip=>$ssh_ip, test_ip=>$ip, rules_filename=>$rules_file, test_cases=>\@Test_Cases, strict_source_IP_checking=>1);
unless ($test) {die "$myname: Could not configure test environment to $ip\n"}

if ($rules_file !~ /^NIOS/) {$test->load_rules()}

#Enable and Validate Monitor Mode
print "Enable and Validate Monitor Mode on\n";
my %command_list;
%command_list = (
  #CLI Command => Output to validate
  "set adp monitor-mode on" => "Infoblox",
  "show adp" => "Threat Protection monitor mode:\\s*Enabled",
);
my ($str, $file);
my @result;
$file = "/import/qaddi/vADP_Automation/admin_console.exp";
die "$file not found, to enable Monitor Mode.\n" unless (-e $file);

cli_command();

$test->print_header();                          # Print a nice summary.
$test->execute_test_cases();                    # Run through our test cases.
$test->evaluate();                              # Determine PASS or FAIL for each test case.

#############################################################################################
#  Loop through all my test cases for any that are unchecked.  We should have 3, the        #
#  ones that spoof the source IP address to be the same as the destination IP address.      #
#############################################################################################
for (my $test_case_index=0; $test_case_index<$test->{Total_Test_Cases}; $test_case_index++) {
  my $test_case_number=$test_case_index+1;

  if ($test->{test_cases}[$test_case_index]{Status} eq 'UNCHECKED') {
    my $syslog_pattern='';
       if ($test->{test_cases}[$test_case_index]{cmd} =~ /sendipip -s $ip -d $ip/              ) {$syslog_pattern = 'threat-protect-log.*\|110000100\|.* act="DROP" '}
    elsif ($test->{test_cases}[$test_case_index]{cmd} =~ /nping --udp --source-ip $ip -c 1 $ip/) {$syslog_pattern = 'threat-protect-log.*\|110000200\|.* act="DROP" '}
    elsif ($test->{test_cases}[$test_case_index]{cmd} =~ /nping --tcp --source-ip $ip -c 1 $ip/) {$syslog_pattern = 'threat-protect-log.*\|110000300\|.* act="DROP" '}
    else {
      print "I don't know how to evaluate test case # $test_case_number.  Sorry.\n";
      next;
    };

    open(SYSLOG, "<$$.messages") || die "Couldn't open /var/log/syslog from $test->{ssh_ip}\n";
    my $line_number=0;
    while (<SYSLOG>) {
      $line_number++;
      if ($line_number < $test->{test_cases}[$test_case_index]{syslog_Starting_Line}) {next}
      if ($line_number > $test->{test_cases}[$test_case_index]{syslog_Ending_Line}) {last}

      #######################################################################################
      # Do we see the expected threat-protect-log line in syslog yet?                       #
      #######################################################################################
      if (/$syslog_pattern/) {
        $test->{test_cases}[$test_case_index]{Status} = 'PASS';

        if ($test->{test_cases}[$test_case_index]{Reason} ne '') {
             if ($test_case_number < 10 ) {$test->{test_cases}[$test_case_index]{Reason}.="\n                   - "}
          elsif ($test_case_number < 100) {$test->{test_cases}[$test_case_index]{Reason}.="\n                    - "}
                                     else {$test->{test_cases}[$test_case_index]{Reason}.="\n                     - "}
        }
        $test->{test_cases}[$test_case_index]{Reason} .= "Found /$syslog_pattern/.";
        last;
      }
    }
    close SYSLOG;
    if ($test->{test_cases}[$test_case_index]{Status} eq 'UNCHECKED') {
      $test->{test_cases}[$test_case_index]{Status} = 'FAIL';

      if ($test->{test_cases}[$test_case_index]{Reason} ne '') {
           if ($test_case_number < 10 ) {$test->{test_cases}[$test_case_index]{Reason}.="\n                   - "}
        elsif ($test_case_number < 100) {$test->{test_cases}[$test_case_index]{Reason}.="\n                    - "}
                                   else {$test->{test_cases}[$test_case_index]{Reason}.="\n                     - "}
      }
      $test->{test_cases}[$test_case_index]{Reason} .= "Failed to find /$syslog_pattern/.  Ooops.";
    }
  }
}

$test->summarize();                  # Print summary of passed, failed, and total test cases.

print "\nDisable and Validate Monitor Mode off\n";
%command_list = (
  #CLI Command => Output to validate
  "set adp monitor-mode off" => "Infoblox",
  "show adp" => "Threat Protection monitor mode:\\s*Disabled",
);
cli_command();

#################### End of MAIN ####################

sub cli_command {
    foreach my $scenario (sort keys %command_list) {
      $str = "expect $file $ssh_ip '$scenario'";
      @result = `$str 2>&1 | grep -A 20 "$scenario"`;
      if (grep (/$command_list{$scenario}/, @result)) {
         print "\t$scenario \t::\tPASSED ...\n";
      } else {
         print "\t$scenario \t::\tFAILED ...\n";
         print "Failed on Monitor Mode Enable. Hence terminated the execution\n";
         exit 0;
      }
      sleep 10;
    }
}


